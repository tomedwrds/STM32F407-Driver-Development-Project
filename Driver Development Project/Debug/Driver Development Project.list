
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f6c  08000f74  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  4 .ARM          00000000  08000f6c  08000f6c  00010f74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f6c  08000f74  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010f74  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010f74  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001b1f  00000000  00000000  00010fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00001589  00000000  00000000  00012ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004b3  00000000  00000000  0001404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  00014500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000af25  00000000  00000000  00014630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000000f8  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000004c0  00000000  00000000  0001f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001fb10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000420  00000000  00000000  0001fb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f54 	.word	0x08000f54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000f54 	.word	0x08000f54

080001e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f2:	490d      	ldr	r1, [pc, #52]	; (8000228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <LoopForever+0xe>)
  movs r3, #0
 80001f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f8:	e002      	b.n	8000200 <LoopCopyDataInit>

080001fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fe:	3304      	adds	r3, #4

08000200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000204:	d3f9      	bcc.n	80001fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000208:	4c0a      	ldr	r4, [pc, #40]	; (8000234 <LoopForever+0x16>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800020c:	e001      	b.n	8000212 <LoopFillZerobss>

0800020e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000210:	3204      	adds	r2, #4

08000212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000214:	d3fb      	bcc.n	800020e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000216:	f000 fe71 	bl	8000efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021a:	f000 fdc5 	bl	8000da8 <main>

0800021e <LoopForever>:

LoopForever:
    b LoopForever
 800021e:	e7fe      	b.n	800021e <LoopForever>
  ldr   r0, =_estack
 8000220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000228:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800022c:	08000f74 	.word	0x08000f74
  ldr r2, =_sbss
 8000230:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000234:	2000001c 	.word	0x2000001c

08000238 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000238:	e7fe      	b.n	8000238 <ADC_IRQHandler>
	...

0800023c <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000248:	78fb      	ldrb	r3, [r7, #3]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d161      	bne.n	8000312 <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a33      	ldr	r2, [pc, #204]	; (8000320 <GPIO_PeriClockControl+0xe4>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000256:	4b33      	ldr	r3, [pc, #204]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a32      	ldr	r2, [pc, #200]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 8000262:	e056      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a30      	ldr	r2, [pc, #192]	; (8000328 <GPIO_PeriClockControl+0xec>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d106      	bne.n	800027a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000278:	e04b      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <GPIO_PeriClockControl+0xf0>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000282:	4b28      	ldr	r3, [pc, #160]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000286:	4a27      	ldr	r2, [pc, #156]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028e:	e040      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a27      	ldr	r2, [pc, #156]	; (8000330 <GPIO_PeriClockControl+0xf4>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a21      	ldr	r2, [pc, #132]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a4:	e035      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a22      	ldr	r2, [pc, #136]	; (8000334 <GPIO_PeriClockControl+0xf8>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002b4:	f043 0310 	orr.w	r3, r3, #16
 80002b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ba:	e02a      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a1e      	ldr	r2, [pc, #120]	; (8000338 <GPIO_PeriClockControl+0xfc>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d0:	e01f      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <GPIO_PeriClockControl+0x100>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e6:	e014      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <GPIO_PeriClockControl+0x104>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e009      	b.n	8000312 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a10      	ldr	r2, [pc, #64]	; (8000344 <GPIO_PeriClockControl+0x108>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d105      	bne.n	8000312 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <GPIO_PeriClockControl+0xe8>)
 800030c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000
 8000324:	40023800 	.word	0x40023800
 8000328:	40020400 	.word	0x40020400
 800032c:	40020800 	.word	0x40020800
 8000330:	40020c00 	.word	0x40020c00
 8000334:	40021000 	.word	0x40021000
 8000338:	40021400 	.word	0x40021400
 800033c:	40021800 	.word	0x40021800
 8000340:	40021c00 	.word	0x40021c00
 8000344:	40022000 	.word	0x40022000

08000348 <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff70 	bl	800023c <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	795b      	ldrb	r3, [r3, #5]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d810      	bhi.n	8000386 <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791b      	ldrb	r3, [r3, #4]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	4619      	mov	r1, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	430a      	orrs	r2, r1
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	e0d4      	b.n	8000530 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	2b04      	cmp	r3, #4
 800038c:	d117      	bne.n	80003be <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800038e:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <GPIO_Init+0x180>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7912      	ldrb	r2, [r2, #4]
 8000396:	4611      	mov	r1, r2
 8000398:	2201      	movs	r2, #1
 800039a:	408a      	lsls	r2, r1
 800039c:	4611      	mov	r1, r2
 800039e:	4a4a      	ldr	r2, [pc, #296]	; (80004c8 <GPIO_Init+0x180>)
 80003a0:	430b      	orrs	r3, r1
 80003a2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a4:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <GPIO_Init+0x180>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	4611      	mov	r1, r2
 80003ae:	2201      	movs	r2, #1
 80003b0:	408a      	lsls	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a44      	ldr	r2, [pc, #272]	; (80004c8 <GPIO_Init+0x180>)
 80003b8:	400b      	ands	r3, r1
 80003ba:	6093      	str	r3, [r2, #8]
 80003bc:	e035      	b.n	800042a <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	795b      	ldrb	r3, [r3, #5]
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d117      	bne.n	80003f6 <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <GPIO_Init+0x180>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	7912      	ldrb	r2, [r2, #4]
 80003ce:	4611      	mov	r1, r2
 80003d0:	2201      	movs	r2, #1
 80003d2:	408a      	lsls	r2, r1
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <GPIO_Init+0x180>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003dc:	4b3a      	ldr	r3, [pc, #232]	; (80004c8 <GPIO_Init+0x180>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7912      	ldrb	r2, [r2, #4]
 80003e4:	4611      	mov	r1, r2
 80003e6:	2201      	movs	r2, #1
 80003e8:	408a      	lsls	r2, r1
 80003ea:	43d2      	mvns	r2, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a36      	ldr	r2, [pc, #216]	; (80004c8 <GPIO_Init+0x180>)
 80003f0:	400b      	ands	r3, r1
 80003f2:	60d3      	str	r3, [r2, #12]
 80003f4:	e019      	b.n	800042a <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d115      	bne.n	800042a <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fe:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <GPIO_Init+0x180>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7912      	ldrb	r2, [r2, #4]
 8000406:	4611      	mov	r1, r2
 8000408:	2201      	movs	r2, #1
 800040a:	408a      	lsls	r2, r1
 800040c:	4611      	mov	r1, r2
 800040e:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <GPIO_Init+0x180>)
 8000410:	430b      	orrs	r3, r1
 8000412:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <GPIO_Init+0x180>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <GPIO_Init+0x180>)
 8000426:	430b      	orrs	r3, r1
 8000428:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <GPIO_Init+0x184>)
 800042c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042e:	4a27      	ldr	r2, [pc, #156]	; (80004cc <GPIO_Init+0x184>)
 8000430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000434:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	089b      	lsrs	r3, r3, #2
 800043c:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	f003 0303 	and.w	r3, r3, #3
 8000446:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a20      	ldr	r2, [pc, #128]	; (80004d0 <GPIO_Init+0x188>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d050      	beq.n	80004f4 <GPIO_Init+0x1ac>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <GPIO_Init+0x18c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d032      	beq.n	80004c2 <GPIO_Init+0x17a>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <GPIO_Init+0x190>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d02b      	beq.n	80004be <GPIO_Init+0x176>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <GPIO_Init+0x194>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d024      	beq.n	80004ba <GPIO_Init+0x172>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <GPIO_Init+0x198>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d01d      	beq.n	80004b6 <GPIO_Init+0x16e>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <GPIO_Init+0x19c>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d016      	beq.n	80004b2 <GPIO_Init+0x16a>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <GPIO_Init+0x1a0>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d00f      	beq.n	80004ae <GPIO_Init+0x166>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <GPIO_Init+0x1a4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d008      	beq.n	80004aa <GPIO_Init+0x162>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <GPIO_Init+0x1a8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <GPIO_Init+0x15e>
 80004a2:	2308      	movs	r3, #8
 80004a4:	e027      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e025      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004aa:	2307      	movs	r3, #7
 80004ac:	e023      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004ae:	2306      	movs	r3, #6
 80004b0:	e021      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004b2:	2305      	movs	r3, #5
 80004b4:	e01f      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01d      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004ba:	2303      	movs	r3, #3
 80004bc:	e01b      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004be:	2302      	movs	r3, #2
 80004c0:	e019      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004c2:	2301      	movs	r3, #1
 80004c4:	e017      	b.n	80004f6 <GPIO_Init+0x1ae>
 80004c6:	bf00      	nop
 80004c8:	40013c00 	.word	0x40013c00
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40020400 	.word	0x40020400
 80004d8:	40020800 	.word	0x40020800
 80004dc:	40020c00 	.word	0x40020c00
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40021400 	.word	0x40021400
 80004e8:	40021800 	.word	0x40021800
 80004ec:	40021c00 	.word	0x40021c00
 80004f0:	40022000 	.word	0x40022000
 80004f4:	2300      	movs	r3, #0
 80004f6:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 80004f8:	4a58      	ldr	r2, [pc, #352]	; (800065c <GPIO_Init+0x314>)
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	3302      	adds	r3, #2
 80004fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000502:	7b79      	ldrb	r1, [r7, #13]
 8000504:	7bbb      	ldrb	r3, [r7, #14]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	4618      	mov	r0, r3
 800050e:	4953      	ldr	r1, [pc, #332]	; (800065c <GPIO_Init+0x314>)
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	4302      	orrs	r2, r0
 8000514:	3302      	adds	r3, #2
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051a:	4b51      	ldr	r3, [pc, #324]	; (8000660 <GPIO_Init+0x318>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	7912      	ldrb	r2, [r2, #4]
 8000522:	4611      	mov	r1, r2
 8000524:	2201      	movs	r2, #1
 8000526:	408a      	lsls	r2, r1
 8000528:	4611      	mov	r1, r2
 800052a:	4a4d      	ldr	r2, [pc, #308]	; (8000660 <GPIO_Init+0x318>)
 800052c:	430b      	orrs	r3, r1
 800052e:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	689a      	ldr	r2, [r3, #8]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	2103      	movs	r1, #3
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	400a      	ands	r2, r1
 800054c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	799b      	ldrb	r3, [r3, #6]
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	fa01 f303 	lsl.w	r3, r1, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	430a      	orrs	r2, r1
 800056c:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	2103      	movs	r1, #3
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68da      	ldr	r2, [r3, #12]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	79db      	ldrb	r3, [r3, #7]
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7a1b      	ldrb	r3, [r3, #8]
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d131      	bne.n	8000654 <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	7b3a      	ldrb	r2, [r7, #12]
 8000608:	3208      	adds	r2, #8
 800060a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800060e:	7afb      	ldrb	r3, [r7, #11]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	220f      	movs	r2, #15
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	43db      	mvns	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	7b3a      	ldrb	r2, [r7, #12]
 8000622:	4001      	ands	r1, r0
 8000624:	3208      	adds	r2, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	7b3a      	ldrb	r2, [r7, #12]
 8000630:	3208      	adds	r2, #8
 8000632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	461a      	mov	r2, r3
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	4618      	mov	r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7b3a      	ldrb	r2, [r7, #12]
 800064c:	4301      	orrs	r1, r0
 800064e:	3208      	adds	r2, #8
 8000650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	40013c00 	.word	0x40013c00

08000664 <GPIO_ToggleOutputPin>:
 * @return            -  none
 *
 * @Note              - only lower 16 bits of output data register are used.
 *********************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<< PinNumber);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	405a      	eors	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	615a      	str	r2, [r3, #20]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <TIM_PeriClockControl>:
 *
 * @Note              - none
 *********************************************************************/

void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t EnorDi)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	f040 8099 	bne.w	80007d6 <TIM_PeriClockControl+0x146>
	{
		if(pTIMx == TIM1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a4f      	ldr	r2, [pc, #316]	; (80007e4 <TIM_PeriClockControl+0x154>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d106      	bne.n	80006ba <TIM_PeriClockControl+0x2a>
		{
			TIM1_PCLK_EN();
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b0:	4a4d      	ldr	r2, [pc, #308]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pTIMx == TIM14)
		{
			TIM14_PCLK_EN();
		}
	}
}
 80006b8:	e08d      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM2)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c0:	d106      	bne.n	80006d0 <TIM_PeriClockControl+0x40>
			TIM2_PCLK_EN();
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ce:	e082      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a46      	ldr	r2, [pc, #280]	; (80007ec <TIM_PeriClockControl+0x15c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d106      	bne.n	80006e6 <TIM_PeriClockControl+0x56>
			TIM3_PCLK_EN();
 80006d8:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006e4:	e077      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM4)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <TIM_PeriClockControl+0x160>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <TIM_PeriClockControl+0x6c>
			TIM4_PCLK_EN();
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006fa:	e06c      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM5)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a3d      	ldr	r2, [pc, #244]	; (80007f4 <TIM_PeriClockControl+0x164>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <TIM_PeriClockControl+0x82>
			TIM5_PCLK_EN();
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a37      	ldr	r2, [pc, #220]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000710:	e061      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM6)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <TIM_PeriClockControl+0x168>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <TIM_PeriClockControl+0x98>
			TIM6_PCLK_EN();
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a32      	ldr	r2, [pc, #200]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000726:	e056      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM7)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a34      	ldr	r2, [pc, #208]	; (80007fc <TIM_PeriClockControl+0x16c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <TIM_PeriClockControl+0xae>
			TIM7_PCLK_EN();
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800073c:	e04b      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM8)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a2f      	ldr	r2, [pc, #188]	; (8000800 <TIM_PeriClockControl+0x170>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <TIM_PeriClockControl+0xc4>
			TIM8_PCLK_EN();
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000752:	e040      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM9)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <TIM_PeriClockControl+0x174>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <TIM_PeriClockControl+0xda>
			TIM9_PCLK_EN();
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000766:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000768:	e035      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM10)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <TIM_PeriClockControl+0x178>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <TIM_PeriClockControl+0xf0>
			TIM10_PCLK_EN();
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <TIM_PeriClockControl+0x158>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800077e:	e02a      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM11)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <TIM_PeriClockControl+0x17c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <TIM_PeriClockControl+0x106>
			TIM11_PCLK_EN();
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <TIM_PeriClockControl+0x158>)
 800078e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000792:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000794:	e01f      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM12)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <TIM_PeriClockControl+0x180>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <TIM_PeriClockControl+0x11c>
			TIM12_PCLK_EN();
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007aa:	e014      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM13)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <TIM_PeriClockControl+0x184>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <TIM_PeriClockControl+0x132>
			TIM13_PCLK_EN();
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007c0:	e009      	b.n	80007d6 <TIM_PeriClockControl+0x146>
		}else if (pTIMx == TIM14)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <TIM_PeriClockControl+0x188>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d105      	bne.n	80007d6 <TIM_PeriClockControl+0x146>
			TIM14_PCLK_EN();
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <TIM_PeriClockControl+0x158>)
 80007d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40010000 	.word	0x40010000
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40000400 	.word	0x40000400
 80007f0:	40000800 	.word	0x40000800
 80007f4:	40000c00 	.word	0x40000c00
 80007f8:	40001000 	.word	0x40001000
 80007fc:	40001400 	.word	0x40001400
 8000800:	40010400 	.word	0x40010400
 8000804:	40014000 	.word	0x40014000
 8000808:	40014400 	.word	0x40014400
 800080c:	40014800 	.word	0x40014800
 8000810:	40001800 	.word	0x40001800
 8000814:	40001c00 	.word	0x40001c00
 8000818:	40002000 	.word	0x40002000

0800081c <TIM_Init>:
 * @return            -  none
 *
 * @Note              - none
 *********************************************************************/
void TIM_Init(TIM_Handle_t *TIM_Handle_t)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	//Enable the clock
	TIM_PeriClockControl(TIM_Handle_t->pTIMx, ENABLE);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff30 	bl	8000690 <TIM_PeriClockControl>

	//Set the prescalar value
	TIM_Handle_t->pTIMx->PSC = TIM_Handle_t->TIMConfig.TIM_Prescalar;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	6852      	ldr	r2, [r2, #4]
 8000838:	629a      	str	r2, [r3, #40]	; 0x28

	//Set the autoreload value
	TIM_Handle_t->pTIMx->ARR = TIM_Handle_t->TIMConfig.TIM_AutoReload;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	891a      	ldrh	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c

	//Set the counter mode
	if(TIM_Handle_t->TIMConfig.TIM_CounterMode != TIM_COUNTER_UP)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a9b      	ldrb	r3, [r3, #10]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d042      	beq.n	80008d2 <TIM_Init+0xb6>
	{
		if(TIM_Handle_t->TIMConfig.TIM_CounterMode == TIM_COUNTER_DOWN)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a9b      	ldrb	r3, [r3, #10]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d108      	bne.n	8000866 <TIM_Init+0x4a>
		{
			TIM_Handle_t->pTIMx->CR1 |= (1<<TIM_CR1_DIR);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0210 	orr.w	r2, r2, #16
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e035      	b.n	80008d2 <TIM_Init+0xb6>
		}
		else if(TIM_Handle_t->TIMConfig.TIM_CounterMode == TIM_COUNTER_CMS_IT_DOWN)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7a9b      	ldrb	r3, [r3, #10]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d110      	bne.n	8000890 <TIM_Init+0x74>
		{
			TIM_Handle_t->pTIMx->CR1 &= ~(0x3<<TIM_CR1_CMS);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800087c:	601a      	str	r2, [r3, #0]
			TIM_Handle_t->pTIMx->CR1 |= (0x1<<TIM_CR1_CMS);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0220 	orr.w	r2, r2, #32
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e020      	b.n	80008d2 <TIM_Init+0xb6>
		}
		else if(TIM_Handle_t->TIMConfig.TIM_CounterMode == TIM_COUNTER_CMS_IT_UP)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7a9b      	ldrb	r3, [r3, #10]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d110      	bne.n	80008ba <TIM_Init+0x9e>
		{
			TIM_Handle_t->pTIMx->CR1 &= ~(0x3<<TIM_CR1_CMS);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80008a6:	601a      	str	r2, [r3, #0]
			TIM_Handle_t->pTIMx->CR1 |= (0x2<<TIM_CR1_CMS);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	e00b      	b.n	80008d2 <TIM_Init+0xb6>
		}
		else if(TIM_Handle_t->TIMConfig.TIM_CounterMode == TIM_COUNTER_CMS_IT_UPDOWN)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a9b      	ldrb	r3, [r3, #10]
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d107      	bne.n	80008d2 <TIM_Init+0xb6>
		{
			TIM_Handle_t->pTIMx->CR1 |= (0x3<<TIM_CR1_CMS);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80008d0:	601a      	str	r2, [r3, #0]
		}
	}

	//Configure the Capture Compare
	if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_OP)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7bdb      	ldrb	r3, [r3, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 8113 	beq.w	8000b02 <TIM_Init+0x2e6>
	{
		//output mode
	}
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7bdb      	ldrb	r3, [r3, #15]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d140      	bne.n	8000966 <TIM_Init+0x14a>
	{
		//input mode
		//configure CC into input mode and select TI channel
		TIM_Handle_t->pTIMx->CCMR1 |= (1<< TIM_CCMR1_CC1S);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	619a      	str	r2, [r3, #24]

		//configure the input capture filter
		TIM_Handle_t->pTIMx->CCMR1 |= (TIM_Handle_t->TIMICConfig.IC_Filter << TIM_CCMR1_IC1F);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7b1b      	ldrb	r3, [r3, #12]
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	4619      	mov	r1, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	430a      	orrs	r2, r1
 8000908:	619a      	str	r2, [r3, #24]

		//set the polarity CCNP holds MSB CCP holds LSB
		//CCNP and CCP are seperated by a bit
		//To set CCNP LSB is masked to set CCP MSB is masked
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x1)) << TIM_CCER_CC1NP);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7b5b      	ldrb	r3, [r3, #13]
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	735a      	strb	r2, [r3, #13]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7b5b      	ldrb	r3, [r3, #13]
 800091c:	00d9      	lsls	r1, r3, #3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6a1a      	ldr	r2, [r3, #32]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	430a      	orrs	r2, r1
 800092a:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x2)) << TIM_CCER_CC1P);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b5b      	ldrb	r3, [r3, #13]
 8000930:	f023 0302 	bic.w	r3, r3, #2
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	735a      	strb	r2, [r3, #13]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7b5b      	ldrb	r3, [r3, #13]
 800093e:	0059      	lsls	r1, r3, #1
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a1a      	ldr	r2, [r3, #32]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	621a      	str	r2, [r3, #32]

		//SEt the input prescalar
		TIM_Handle_t->pTIMx->CCMR1 |= (TIM_Handle_t->TIMICConfig.IC_Prescaler << TIM_CCMR1_IC1PSC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	699a      	ldr	r2, [r3, #24]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7b9b      	ldrb	r3, [r3, #14]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4619      	mov	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	430a      	orrs	r2, r1
 8000962:	619a      	str	r2, [r3, #24]
		TIM_Handle_t->pTIMx->CCMR2 |= (TIM_Handle_t->TIMICConfig.IC_Prescaler << TIM_CCMR2_IC4PSC);
	}



}
 8000964:	e0cd      	b.n	8000b02 <TIM_Init+0x2e6>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bdb      	ldrb	r3, [r3, #15]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d140      	bne.n	80009f0 <TIM_Init+0x1d4>
		TIM_Handle_t->pTIMx->CCMR1 |= (1<< TIM_CCMR1_CC2S);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	699a      	ldr	r2, [r3, #24]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800097c:	619a      	str	r2, [r3, #24]
		TIM_Handle_t->pTIMx->CCMR1 |= (TIM_Handle_t->TIMICConfig.IC_Filter << TIM_CCMR1_IC2F);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7b1b      	ldrb	r3, [r3, #12]
 8000988:	031b      	lsls	r3, r3, #12
 800098a:	4619      	mov	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	619a      	str	r2, [r3, #24]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x1)) << TIM_CCER_CC2NP);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7b5b      	ldrb	r3, [r3, #13]
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	735a      	strb	r2, [r3, #13]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7b5b      	ldrb	r3, [r3, #13]
 80009a6:	01d9      	lsls	r1, r3, #7
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a1a      	ldr	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x2)) << TIM_CCER_CC2P);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7b5b      	ldrb	r3, [r3, #13]
 80009ba:	f023 0302 	bic.w	r3, r3, #2
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	735a      	strb	r2, [r3, #13]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b5b      	ldrb	r3, [r3, #13]
 80009c8:	0159      	lsls	r1, r3, #5
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a1a      	ldr	r2, [r3, #32]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCMR1 |= (TIM_Handle_t->TIMICConfig.IC_Prescaler << TIM_CCMR1_IC2PSC);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7b9b      	ldrb	r3, [r3, #14]
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4619      	mov	r1, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	619a      	str	r2, [r3, #24]
}
 80009ee:	e088      	b.n	8000b02 <TIM_Init+0x2e6>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP3)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7bdb      	ldrb	r3, [r3, #15]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d140      	bne.n	8000a7a <TIM_Init+0x25e>
		TIM_Handle_t->pTIMx->CCMR2 |= (1<< TIM_CCMR2_CC3S);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	69da      	ldr	r2, [r3, #28]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
		TIM_Handle_t->pTIMx->CCMR2 |= (TIM_Handle_t->TIMICConfig.IC_Filter << TIM_CCMR2_IC3F);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	69da      	ldr	r2, [r3, #28]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7b1b      	ldrb	r3, [r3, #12]
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	61da      	str	r2, [r3, #28]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x1)) << TIM_CCER_CC3NP);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7b5b      	ldrb	r3, [r3, #13]
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	735a      	strb	r2, [r3, #13]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7b5b      	ldrb	r3, [r3, #13]
 8000a30:	02d9      	lsls	r1, r3, #11
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6a1a      	ldr	r2, [r3, #32]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x2)) << TIM_CCER_CC3P);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7b5b      	ldrb	r3, [r3, #13]
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	735a      	strb	r2, [r3, #13]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7b5b      	ldrb	r3, [r3, #13]
 8000a52:	0259      	lsls	r1, r3, #9
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6a1a      	ldr	r2, [r3, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCMR2 |= (TIM_Handle_t->TIMICConfig.IC_Prescaler << TIM_CCMR2_IC3PSC);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	69da      	ldr	r2, [r3, #28]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7b9b      	ldrb	r3, [r3, #14]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4619      	mov	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
}
 8000a78:	e043      	b.n	8000b02 <TIM_Init+0x2e6>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP4)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7bdb      	ldrb	r3, [r3, #15]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d13f      	bne.n	8000b02 <TIM_Init+0x2e6>
		TIM_Handle_t->pTIMx->CCMR2 |= (1<< TIM_CCMR2_CC4S);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a90:	61da      	str	r2, [r3, #28]
		TIM_Handle_t->pTIMx->CCMR2 |= (TIM_Handle_t->TIMICConfig.IC_Filter << TIM_CCMR2_IC4F);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69da      	ldr	r2, [r3, #28]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7b1b      	ldrb	r3, [r3, #12]
 8000a9c:	031b      	lsls	r3, r3, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	61da      	str	r2, [r3, #28]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x1)) << TIM_CCER_CC4NP);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b5b      	ldrb	r3, [r3, #13]
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	735a      	strb	r2, [r3, #13]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7b5b      	ldrb	r3, [r3, #13]
 8000aba:	03d9      	lsls	r1, r3, #15
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCER |= ((TIM_Handle_t->TIMICConfig.IC_Polarity &= ~(0x2)) << TIM_CCER_CC4P);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7b5b      	ldrb	r3, [r3, #13]
 8000ace:	f023 0302 	bic.w	r3, r3, #2
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	735a      	strb	r2, [r3, #13]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7b5b      	ldrb	r3, [r3, #13]
 8000adc:	0359      	lsls	r1, r3, #13
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6a1a      	ldr	r2, [r3, #32]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	621a      	str	r2, [r3, #32]
		TIM_Handle_t->pTIMx->CCMR2 |= (TIM_Handle_t->TIMICConfig.IC_Prescaler << TIM_CCMR2_IC4PSC);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	69da      	ldr	r2, [r3, #28]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7b9b      	ldrb	r3, [r3, #14]
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	4619      	mov	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	61da      	str	r2, [r3, #28]
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <TIM_IRQConfig>:
 * @return            -  none
 *
 * @Note              - none
 *********************************************************************/
void TIM_IRQConfig(uint8_t IRQ_Number, uint8_t EnorDi)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	//Enable or disable pin
	if(EnorDi == ENABLE)
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d120      	bne.n	8000b64 <TIM_IRQConfig+0x58>
	{
		//81 total inteturpts on STM32 there enable is spread across three reigsters
		if(IRQ_Number <= 31)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	d80a      	bhi.n	8000b3e <TIM_IRQConfig+0x32>
		{
			*NVIC_ISER0_BASE_ADDR |= (1 << IRQ_Number);
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <TIM_IRQConfig+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4611      	mov	r1, r2
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <TIM_IRQConfig+0xa8>)
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER1_BASE_ADDR &= ~(1 << IRQ_Number%32);
		}
	}

}
 8000b3c:	e034      	b.n	8000ba8 <TIM_IRQConfig+0x9c>
		else if(IRQ_Number > 31 && IRQ_Number<64)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b1f      	cmp	r3, #31
 8000b42:	d931      	bls.n	8000ba8 <TIM_IRQConfig+0x9c>
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b3f      	cmp	r3, #63	; 0x3f
 8000b48:	d82e      	bhi.n	8000ba8 <TIM_IRQConfig+0x9c>
			*NVIC_ISER1_BASE_ADDR |= (1 << IRQ_Number%32);
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <TIM_IRQConfig+0xac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	f002 021f 	and.w	r2, r2, #31
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <TIM_IRQConfig+0xac>)
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6013      	str	r3, [r2, #0]
}
 8000b62:	e021      	b.n	8000ba8 <TIM_IRQConfig+0x9c>
		if(IRQ_Number <= 31)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b1f      	cmp	r3, #31
 8000b68:	d80b      	bhi.n	8000b82 <TIM_IRQConfig+0x76>
			*NVIC_ICER0_BASE_ADDR &= ~(1 << IRQ_Number);
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <TIM_IRQConfig+0xb0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	2101      	movs	r1, #1
 8000b72:	fa01 f202 	lsl.w	r2, r1, r2
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <TIM_IRQConfig+0xb0>)
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	e012      	b.n	8000ba8 <TIM_IRQConfig+0x9c>
		else if(IRQ_Number > 31 && IRQ_Number<64)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d90f      	bls.n	8000ba8 <TIM_IRQConfig+0x9c>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b8c:	d80c      	bhi.n	8000ba8 <TIM_IRQConfig+0x9c>
			*NVIC_ICER1_BASE_ADDR &= ~(1 << IRQ_Number%32);
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <TIM_IRQConfig+0xb4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	f002 021f 	and.w	r2, r2, #31
 8000b98:	2101      	movs	r1, #1
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	43d2      	mvns	r2, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <TIM_IRQConfig+0xb4>)
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000e104 	.word	0xe000e104
 8000bbc:	e000e180 	.word	0xe000e180
 8000bc0:	e000e184 	.word	0xe000e184

08000bc4 <TIM_Toggle>:
 *
 * @Note              - none
 *********************************************************************/

void TIM_Toggle(TIM_RegDef_t *pTIMx,uint8_t EnorDi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d106      	bne.n	8000be4 <TIM_Toggle+0x20>
	{
		//pTIMx->DIER |= 1;
		pTIMx->CR1 |= 1;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
	else
	{
		//pTIMx->DIER &= ~1;
		pTIMx->CR1 &= ~1;
	}
}
 8000be2:	e005      	b.n	8000bf0 <TIM_Toggle+0x2c>
		pTIMx->CR1 &= ~1;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f023 0201 	bic.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <TIM_CC_Toggle>:
 *
 * @Note              - none
 *********************************************************************/

void TIM_CC_Toggle(TIM_Handle_t *TIM_Handle_t,uint8_t EnorDi)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
	if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7bdb      	ldrb	r3, [r3, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d124      	bne.n	8000c5a <TIM_CC_Toggle+0x5e>
	{
		if(EnorDi == ENABLE)
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d110      	bne.n	8000c38 <TIM_CC_Toggle+0x3c>
		{
			TIM_Handle_t->pTIMx->DIER |= (1<< TIM_DIER_CCIE1);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 0202 	orr.w	r2, r2, #2
 8000c24:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER |= (1<<TIM_CCER_CC1E);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a1a      	ldr	r2, [r3, #32]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0201 	orr.w	r2, r2, #1
 8000c34:	621a      	str	r2, [r3, #32]
		{
			TIM_Handle_t->pTIMx->DIER &= ~(1<< TIM_DIER_CCIE4);
			TIM_Handle_t->pTIMx->CCER &= ~(1<<TIM_CCER_CC4E);
		}
	}
}
 8000c36:	e08a      	b.n	8000d4e <TIM_CC_Toggle+0x152>
			TIM_Handle_t->pTIMx->DIER &= ~(1<< TIM_DIER_CCIE1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0202 	bic.w	r2, r2, #2
 8000c46:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER &= ~(1<<TIM_CCER_CC1E);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6a1a      	ldr	r2, [r3, #32]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	621a      	str	r2, [r3, #32]
}
 8000c58:	e079      	b.n	8000d4e <TIM_CC_Toggle+0x152>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7bdb      	ldrb	r3, [r3, #15]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d124      	bne.n	8000cac <TIM_CC_Toggle+0xb0>
		if(EnorDi == ENABLE)
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d110      	bne.n	8000c8a <TIM_CC_Toggle+0x8e>
			TIM_Handle_t->pTIMx->DIER |= (1<< TIM_DIER_CCIE2);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0204 	orr.w	r2, r2, #4
 8000c76:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER |= (1<<TIM_CCER_CC2E);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6a1a      	ldr	r2, [r3, #32]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0210 	orr.w	r2, r2, #16
 8000c86:	621a      	str	r2, [r3, #32]
}
 8000c88:	e061      	b.n	8000d4e <TIM_CC_Toggle+0x152>
			TIM_Handle_t->pTIMx->DIER &= ~(1<< TIM_DIER_CCIE2);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0204 	bic.w	r2, r2, #4
 8000c98:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER &= ~(1<<TIM_CCER_CC2E);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6a1a      	ldr	r2, [r3, #32]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0210 	bic.w	r2, r2, #16
 8000ca8:	621a      	str	r2, [r3, #32]
}
 8000caa:	e050      	b.n	8000d4e <TIM_CC_Toggle+0x152>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7bdb      	ldrb	r3, [r3, #15]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d124      	bne.n	8000cfe <TIM_CC_Toggle+0x102>
		if(EnorDi == ENABLE)
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d110      	bne.n	8000cdc <TIM_CC_Toggle+0xe0>
			TIM_Handle_t->pTIMx->DIER |= (1<< TIM_DIER_CCIE3);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0208 	orr.w	r2, r2, #8
 8000cc8:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER |= (1<<TIM_CCER_CC3E);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a1a      	ldr	r2, [r3, #32]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cd8:	621a      	str	r2, [r3, #32]
}
 8000cda:	e038      	b.n	8000d4e <TIM_CC_Toggle+0x152>
			TIM_Handle_t->pTIMx->DIER &= ~(1<< TIM_DIER_CCIE3);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0208 	bic.w	r2, r2, #8
 8000cea:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER &= ~(1<<TIM_CCER_CC3E);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cfa:	621a      	str	r2, [r3, #32]
}
 8000cfc:	e027      	b.n	8000d4e <TIM_CC_Toggle+0x152>
	else if(TIM_Handle_t->TIMICConfig.IC_Channel == TIM_IC_Channel_IP4)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7bdb      	ldrb	r3, [r3, #15]
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d123      	bne.n	8000d4e <TIM_CC_Toggle+0x152>
		if(EnorDi == ENABLE)
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d110      	bne.n	8000d2e <TIM_CC_Toggle+0x132>
			TIM_Handle_t->pTIMx->DIER |= (1<< TIM_DIER_CCIE4);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0210 	orr.w	r2, r2, #16
 8000d1a:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER |= (1<<TIM_CCER_CC4E);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a1a      	ldr	r2, [r3, #32]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d2a:	621a      	str	r2, [r3, #32]
}
 8000d2c:	e00f      	b.n	8000d4e <TIM_CC_Toggle+0x152>
			TIM_Handle_t->pTIMx->DIER &= ~(1<< TIM_DIER_CCIE4);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0210 	bic.w	r2, r2, #16
 8000d3c:	60da      	str	r2, [r3, #12]
			TIM_Handle_t->pTIMx->CCER &= ~(1<<TIM_CCER_CC4E);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6a1a      	ldr	r2, [r3, #32]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d4c:	621a      	str	r2, [r3, #32]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <TIM_Clear_Update>:
 * @return            -  none
 *
 * @Note              - none
 *********************************************************************/
void TIM_Clear_Update(TIM_RegDef_t *pTIMx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	pTIMx->SR &= ~1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	f023 0201 	bic.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <delay>:
#include <string.h>

void HSI_Config(void);

void delay(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e002      	b.n	8000d8e <delay+0x12>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <delay+0x28>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d9f8      	bls.n	8000d88 <delay+0xc>
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	0003d08f 	.word	0x0003d08f

08000da8 <main>:
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
	//Enable the irq config
	TIM_IRQConfig(IRQ_NO_TIM3, ENABLE);
 8000dae:	2101      	movs	r1, #1
 8000db0:	201d      	movs	r0, #29
 8000db2:	f7ff feab 	bl	8000b0c <TIM_IRQConfig>
	TIM_Handle_t timer;
	timer.pTIMx = TIM3;
 8000db6:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <main+0xf4>)
 8000db8:	61bb      	str	r3, [r7, #24]

	//-1 nesscary as extra clock cycle is spent at Auto reload value
	timer.TIMConfig.TIM_AutoReload = 64000-1;
 8000dba:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8000dbe:	843b      	strh	r3, [r7, #32]
	timer.TIMConfig.TIM_Prescalar = 24;
 8000dc0:	2318      	movs	r3, #24
 8000dc2:	61fb      	str	r3, [r7, #28]
	timer.TIMConfig.TIM_CounterMode = TIM_COUNTER_UP;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	timer.TIMICConfig.IC_Channel = TIM_IC_Channel_IP1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	timer.TIMICConfig.IC_Filter = TIM_IC_IF_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	timer.TIMICConfig.IC_Polarity = TIM_IC_POL_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	timer.TIMICConfig.IC_Prescaler = TIM_IC_PSC_1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	TIM_Init(&timer);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fd18 	bl	800081c <TIM_Init>


	//Iniatlize the LED
	GPIO_Handle_t GpioLed, GPIOClk;
	//Memset is used to prevent unset fields being set to junk values
	memset(&GpioLed,0,sizeof(GpioLed));
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	220c      	movs	r2, #12
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f8a5 	bl	8000f44 <memset>

	GpioLed.pGPIOx = GPIOA;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <main+0xf8>)
 8000dfc:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e02:	2302      	movs	r3, #2
 8000e04:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e06:	2302      	movs	r3, #2
 8000e08:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	74fb      	strb	r3, [r7, #19]
	GpioLed.GPIO_PinConfig.GPIO_PinAltFunMode = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	757b      	strb	r3, [r7, #21]

	GPIO_Init(&GpioLed);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fa94 	bl	8000348 <GPIO_Init>


	memset(&GpioLed,0,sizeof(GpioLed));
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	220c      	movs	r2, #12
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f88b 	bl	8000f44 <memset>

	GPIOClk.pGPIOx = GPIOA;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <main+0xf8>)
 8000e30:	603b      	str	r3, [r7, #0]
	GPIOClk.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000e32:	2308      	movs	r3, #8
 8000e34:	713b      	strb	r3, [r7, #4]
	GPIOClk.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e36:	2302      	movs	r3, #2
 8000e38:	717b      	strb	r3, [r7, #5]
	GPIOClk.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	727b      	strb	r3, [r7, #9]
	GPIOClk.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	71bb      	strb	r3, [r7, #6]
	GPIOClk.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e42:	2300      	movs	r3, #0
 8000e44:	723b      	strb	r3, [r7, #8]
	GPIOClk.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]

		GPIO_Init(&GPIOClk);
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fa7b 	bl	8000348 <GPIO_Init>

	HSI_Config();
 8000e52:	f000 f827 	bl	8000ea4 <HSI_Config>

	//Enable the CC on the time
	TIM_CC_Toggle(&timer, ENABLE);
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fecd 	bl	8000bfc <TIM_CC_Toggle>
	//Enable the timer
	TIM_Toggle(TIM3, ENABLE);
 8000e62:	2101      	movs	r1, #1
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <main+0xf4>)
 8000e66:	f7ff fead 	bl	8000bc4 <TIM_Toggle>

	//Enable

	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <main+0xf8>)
 8000e6e:	f7ff fbf9 	bl	8000664 <GPIO_ToggleOutputPin>
	delay();
 8000e72:	f7ff ff83 	bl	8000d7c <delay>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <main+0xf8>)
 8000e7a:	f7ff fbf3 	bl	8000664 <GPIO_ToggleOutputPin>
		delay();
 8000e7e:	f7ff ff7d 	bl	8000d7c <delay>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <main+0xf8>)
 8000e86:	f7ff fbed 	bl	8000664 <GPIO_ToggleOutputPin>
			delay();
 8000e8a:	f7ff ff77 	bl	8000d7c <delay>
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_0);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <main+0xf8>)
 8000e92:	f7ff fbe7 	bl	8000664 <GPIO_ToggleOutputPin>
				delay();
 8000e96:	f7ff ff71 	bl	8000d7c <delay>



	while(1);
 8000e9a:	e7fe      	b.n	8000e9a <main+0xf2>
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HSI_Config>:


}

void HSI_Config(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	RCC->CFGR |= (1<<21);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HSI_Config+0x40>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HSI_Config+0x40>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb2:	6093      	str	r3, [r2, #8]
	//Enable PWR clock
	PWR_PCLK_EN();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HSI_Config+0x40>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HSI_Config+0x40>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (1<< 8);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HSI_Config+0x44>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HSI_Config+0x44>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= 1;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HSI_Config+0x40>)
 8000ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HSI_Config+0x40>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6713      	str	r3, [r2, #112]	; 0x70

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	TIM_Clear_Update(TIM2);
 8000ef0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ef4:	f7ff ff31 	bl	8000d5a <TIM_Clear_Update>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <__libc_init_array>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4d0d      	ldr	r5, [pc, #52]	; (8000f34 <__libc_init_array+0x38>)
 8000f00:	4c0d      	ldr	r4, [pc, #52]	; (8000f38 <__libc_init_array+0x3c>)
 8000f02:	1b64      	subs	r4, r4, r5
 8000f04:	10a4      	asrs	r4, r4, #2
 8000f06:	2600      	movs	r6, #0
 8000f08:	42a6      	cmp	r6, r4
 8000f0a:	d109      	bne.n	8000f20 <__libc_init_array+0x24>
 8000f0c:	4d0b      	ldr	r5, [pc, #44]	; (8000f3c <__libc_init_array+0x40>)
 8000f0e:	4c0c      	ldr	r4, [pc, #48]	; (8000f40 <__libc_init_array+0x44>)
 8000f10:	f000 f820 	bl	8000f54 <_init>
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	10a4      	asrs	r4, r4, #2
 8000f18:	2600      	movs	r6, #0
 8000f1a:	42a6      	cmp	r6, r4
 8000f1c:	d105      	bne.n	8000f2a <__libc_init_array+0x2e>
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f24:	4798      	blx	r3
 8000f26:	3601      	adds	r6, #1
 8000f28:	e7ee      	b.n	8000f08 <__libc_init_array+0xc>
 8000f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2e:	4798      	blx	r3
 8000f30:	3601      	adds	r6, #1
 8000f32:	e7f2      	b.n	8000f1a <__libc_init_array+0x1e>
 8000f34:	08000f6c 	.word	0x08000f6c
 8000f38:	08000f6c 	.word	0x08000f6c
 8000f3c:	08000f6c 	.word	0x08000f6c
 8000f40:	08000f70 	.word	0x08000f70

08000f44 <memset>:
 8000f44:	4402      	add	r2, r0
 8000f46:	4603      	mov	r3, r0
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d100      	bne.n	8000f4e <memset+0xa>
 8000f4c:	4770      	bx	lr
 8000f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f52:	e7f9      	b.n	8000f48 <memset+0x4>

08000f54 <_init>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr

08000f60 <_fini>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr
