
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c50  08000c58  00010c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c50  08000c50  00010c58  2**0
                  CONTENTS
  4 .ARM          00000000  08000c50  08000c50  00010c58  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c50  08000c58  00010c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c50  08000c50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c54  08000c54  00010c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c58  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c58  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001971  00000000  00000000  00010c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000015eb  00000000  00000000  000125f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000049b  00000000  00000000  00013be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000198  00000000  00000000  00014080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008e7a  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000160  00000000  00000000  0001d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000a9a  00000000  00000000  0001d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001dc92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f4  00000000  00000000  0001dce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c38 	.word	0x08000c38

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c38 	.word	0x08000c38

080001e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f2:	490d      	ldr	r1, [pc, #52]	; (8000228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <LoopForever+0xe>)
  movs r3, #0
 80001f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f8:	e002      	b.n	8000200 <LoopCopyDataInit>

080001fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fe:	3304      	adds	r3, #4

08000200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000204:	d3f9      	bcc.n	80001fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000208:	4c0a      	ldr	r4, [pc, #40]	; (8000234 <LoopForever+0x16>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800020c:	e001      	b.n	8000212 <LoopFillZerobss>

0800020e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000210:	3204      	adds	r2, #4

08000212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000214:	d3fb      	bcc.n	800020e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000216:	f000 fceb 	bl	8000bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021a:	f000 f89b 	bl	8000354 <main>

0800021e <LoopForever>:

LoopForever:
    b LoopForever
 800021e:	e7fe      	b.n	800021e <LoopForever>
  ldr   r0, =_estack
 8000220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000228:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800022c:	08000c58 	.word	0x08000c58
  ldr r2, =_sbss
 8000230:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000234:	2000001c 	.word	0x2000001c

08000238 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000238:	e7fe      	b.n	8000238 <ADC_IRQHandler>
	...

0800023c <delay>:
//PB15 MOSI
//PB13 SCLK
//PB12 NSS
//Alt function mode 5
void delay(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e002      	b.n	800024e <delay+0x12>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <delay+0x28>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d9f8      	bls.n	8000248 <delay+0xc>
}
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	0003d08f 	.word	0x0003d08f

08000268 <SPI_GPIO_Inits>:
void SPI_GPIO_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
	//GPIO pins must be configured for AF mode
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <SPI_GPIO_Inits+0x58>)
 8000270:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000272:	2302      	movs	r3, #2
 8000274:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000276:	2305      	movs	r3, #5
 8000278:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027e:	2300      	movs	r3, #0
 8000280:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000286:	230d      	movs	r3, #13
 8000288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f99b 	bl	80005c8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000292:	230f      	movs	r3, #15
 8000294:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f995 	bl	80005c8 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800029e:	230e      	movs	r3, #14
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f98f 	bl	80005c8 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002aa:	230c      	movs	r3, #12
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f989 	bl	80005c8 <GPIO_Init>
}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400

080002c4 <SPI2_Inits>:




void SPI2_Inits(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <SPI2_Inits+0x38>)
 80002cc:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002ce:	2301      	movs	r3, #1
 80002d0:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002d2:	2301      	movs	r3, #1
 80002d4:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80002d6:	2300      	movs	r3, #0
 80002d8:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002da:	2300      	movs	r3, #0
 80002dc:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002de:	2300      	movs	r3, #0
 80002e0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fb47 	bl	8000980 <SPI_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3720      	adds	r7, #32
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40003800 	.word	0x40003800

08000300 <Btn_GPIO_Inits>:

void Btn_GPIO_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <Btn_GPIO_Inits+0x2c>)
 8000308:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800030a:	2300      	movs	r3, #0
 800030c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800030e:	2300      	movs	r3, #0
 8000310:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000312:	2302      	movs	r3, #2
 8000314:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000316:	2300      	movs	r3, #0
 8000318:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIOBtn);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f953 	bl	80005c8 <GPIO_Init>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020000 	.word	0x40020000

08000330 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2bf5      	cmp	r3, #245	; 0xf5
 800033e:	d101      	bne.n	8000344 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000340:	2301      	movs	r3, #1
 8000342:	e000      	b.n	8000346 <SPI_VerifyResponse+0x16>
	}
	else
	{
		//nack
		return 0;
 8000344:	2300      	movs	r3, #0
	}
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <main>:

int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
	uint8_t dummyByte = 0xff;
 800035a:	23ff      	movs	r3, #255	; 0xff
 800035c:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyRead;

	//Enable clock for GPIOB and SPI2
	SPI_GPIO_Inits();
 800035e:	f7ff ff83 	bl	8000268 <SPI_GPIO_Inits>
	SPI2_Inits();
 8000362:	f7ff ffaf 	bl	80002c4 <SPI2_Inits>
	Btn_GPIO_Inits();
 8000366:	f7ff ffcb 	bl	8000300 <Btn_GPIO_Inits>


	SPI_SSOEConfig(SPI2, ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	4851      	ldr	r0, [pc, #324]	; (80004b4 <main+0x160>)
 800036e:	f000 fc22 	bl	8000bb6 <SPI_SSOEConfig>
	while(1)
	{

		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000372:	bf00      	nop
 8000374:	2100      	movs	r1, #0
 8000376:	4850      	ldr	r0, [pc, #320]	; (80004b8 <main+0x164>)
 8000378:	f000 fab4 	bl	80008e4 <GPIO_ReadFromInputPin>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f8      	beq.n	8000374 <main+0x20>
		delay();
 8000382:	f7ff ff5b 	bl	800023c <delay>

		//Enable the SPE bit. It is recommended to only enable this bit after the settings have been made on the peripheal
		SPI_PeripheralControl(SPI2, ENABLE);
 8000386:	2101      	movs	r1, #1
 8000388:	484a      	ldr	r0, [pc, #296]	; (80004b4 <main+0x160>)
 800038a:	f000 fbdc 	bl	8000b46 <SPI_PeripheralControl>

		//Send the first command
		uint8_t commndcode = COMMAND_LED_CTRL;
 800038e:	2350      	movs	r3, #80	; 0x50
 8000390:	737b      	strb	r3, [r7, #13]
		uint8_t ackbyte;
		uint8_t args[2];
		//send command
		SPI_SendData(SPI2, &commndcode, 1);
 8000392:	f107 030d 	add.w	r3, r7, #13
 8000396:	2201      	movs	r2, #1
 8000398:	4619      	mov	r1, r3
 800039a:	4846      	ldr	r0, [pc, #280]	; (80004b4 <main+0x160>)
 800039c:	f000 fb6b 	bl	8000a76 <SPI_SendData>

		//dummy read is required to clear the RXNE of junk data that is received
		//by reading the value the RX buffer is cleared
		SPI_RecieveData(SPI2, &dummyRead, 1);
 80003a0:	f107 030e 	add.w	r3, r7, #14
 80003a4:	2201      	movs	r2, #1
 80003a6:	4619      	mov	r1, r3
 80003a8:	4842      	ldr	r0, [pc, #264]	; (80004b4 <main+0x160>)
 80003aa:	f000 fb98 	bl	8000ade <SPI_RecieveData>

		//send dummy bits to fetch the respone from slave. This allows for the Tx buffer of slave to enter Rx of Master
		SPI_SendData(SPI2, &dummyByte, 1);
 80003ae:	f107 030f 	add.w	r3, r7, #15
 80003b2:	2201      	movs	r2, #1
 80003b4:	4619      	mov	r1, r3
 80003b6:	483f      	ldr	r0, [pc, #252]	; (80004b4 <main+0x160>)
 80003b8:	f000 fb5d 	bl	8000a76 <SPI_SendData>
		SPI_RecieveData(SPI2, &ackbyte, 1);
 80003bc:	f107 030c 	add.w	r3, r7, #12
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	483b      	ldr	r0, [pc, #236]	; (80004b4 <main+0x160>)
 80003c6:	f000 fb8a 	bl	8000ade <SPI_RecieveData>

		//Determine wetehr receive ack or nack
		if(SPI_VerifyResponse(ackbyte))
 80003ca:	7b3b      	ldrb	r3, [r7, #12]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffaf 	bl	8000330 <SPI_VerifyResponse>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d011      	beq.n	80003fc <main+0xa8>
		{
			args[0] = LED_PIN;
 80003d8:	2309      	movs	r3, #9
 80003da:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	727b      	strb	r3, [r7, #9]
			//send data
			SPI_SendData(SPI2, args, 2);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	2202      	movs	r2, #2
 80003e6:	4619      	mov	r1, r3
 80003e8:	4832      	ldr	r0, [pc, #200]	; (80004b4 <main+0x160>)
 80003ea:	f000 fb44 	bl	8000a76 <SPI_SendData>
			//dummy read
			SPI_RecieveData(SPI2,args,2);
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2202      	movs	r2, #2
 80003f4:	4619      	mov	r1, r3
 80003f6:	482f      	ldr	r0, [pc, #188]	; (80004b4 <main+0x160>)
 80003f8:	f000 fb71 	bl	8000ade <SPI_RecieveData>
		}

		//CMD sensor read wait for button press again
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003fc:	bf00      	nop
 80003fe:	2100      	movs	r1, #0
 8000400:	482d      	ldr	r0, [pc, #180]	; (80004b8 <main+0x164>)
 8000402:	f000 fa6f 	bl	80008e4 <GPIO_ReadFromInputPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <main+0xaa>
		delay();
 800040c:	f7ff ff16 	bl	800023c <delay>

		commndcode = COMMAND_SENSOR_READ;
 8000410:	2351      	movs	r3, #81	; 0x51
 8000412:	737b      	strb	r3, [r7, #13]

		//send command
		SPI_SendData(SPI2, &commndcode, 1);
 8000414:	f107 030d 	add.w	r3, r7, #13
 8000418:	2201      	movs	r2, #1
 800041a:	4619      	mov	r1, r3
 800041c:	4825      	ldr	r0, [pc, #148]	; (80004b4 <main+0x160>)
 800041e:	f000 fb2a 	bl	8000a76 <SPI_SendData>

		//dummy read is required to clear the RXNE of junk data that is received
		//by reading the value the RX buffer is cleared
		SPI_RecieveData(SPI2, &dummyRead, 1);
 8000422:	f107 030e 	add.w	r3, r7, #14
 8000426:	2201      	movs	r2, #1
 8000428:	4619      	mov	r1, r3
 800042a:	4822      	ldr	r0, [pc, #136]	; (80004b4 <main+0x160>)
 800042c:	f000 fb57 	bl	8000ade <SPI_RecieveData>

		//send dummy bits to fetch the respone from slave. This allows for the Tx buffer of slave to enter Rx of Master
		SPI_SendData(SPI2, &dummyByte, 1);
 8000430:	f107 030f 	add.w	r3, r7, #15
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	481e      	ldr	r0, [pc, #120]	; (80004b4 <main+0x160>)
 800043a:	f000 fb1c 	bl	8000a76 <SPI_SendData>
		SPI_RecieveData(SPI2, &ackbyte, 1);
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	2201      	movs	r2, #1
 8000444:	4619      	mov	r1, r3
 8000446:	481b      	ldr	r0, [pc, #108]	; (80004b4 <main+0x160>)
 8000448:	f000 fb49 	bl	8000ade <SPI_RecieveData>

		//Determine wetehr receive ack or nack
		if(SPI_VerifyResponse(ackbyte))
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff6e 	bl	8000330 <SPI_VerifyResponse>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d01e      	beq.n	8000498 <main+0x144>
		{
			args[0] = ANALOG_PIN0;
 800045a:	2300      	movs	r3, #0
 800045c:	723b      	strb	r3, [r7, #8]
			SPI_SendData(SPI2, args, 1);
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	2201      	movs	r2, #1
 8000464:	4619      	mov	r1, r3
 8000466:	4813      	ldr	r0, [pc, #76]	; (80004b4 <main+0x160>)
 8000468:	f000 fb05 	bl	8000a76 <SPI_SendData>

			//Read the response of the sensor

			//dummy read is required to clear the RXNE of junk data that is received
			//by reading the value the RX buffer is cleared
			SPI_RecieveData(SPI2, &dummyRead, 1);
 800046c:	f107 030e 	add.w	r3, r7, #14
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <main+0x160>)
 8000476:	f000 fb32 	bl	8000ade <SPI_RecieveData>

			//Inset some delay so slave can be ready with the data from adc conversion
			delay();
 800047a:	f7ff fedf 	bl	800023c <delay>


			//send dummy bits to fetch the respone from slave. This allows for the Tx buffer of slave to enter Rx of Master
			SPI_SendData(SPI2, &dummyByte, 1);
 800047e:	f107 030f 	add.w	r3, r7, #15
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <main+0x160>)
 8000488:	f000 faf5 	bl	8000a76 <SPI_SendData>

			uint8_t anlg_read;

			SPI_RecieveData(SPI2, &anlg_read, 1);
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	2201      	movs	r2, #1
 8000490:	4619      	mov	r1, r3
 8000492:	4808      	ldr	r0, [pc, #32]	; (80004b4 <main+0x160>)
 8000494:	f000 fb23 	bl	8000ade <SPI_RecieveData>
		}



		//Waits until spi is no longer busy and commuication has finished
		while(SPI_Get_FlagStatus(SPI2, SPI_BUSY_FLAG));
 8000498:	bf00      	nop
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <main+0x160>)
 800049e:	f000 fad6 	bl	8000a4e <SPI_Get_FlagStatus>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f8      	bne.n	800049a <main+0x146>

		SPI_SSIConfig(SPI2,DISABLE);
 80004a8:	2100      	movs	r1, #0
 80004aa:	4802      	ldr	r0, [pc, #8]	; (80004b4 <main+0x160>)
 80004ac:	f000 fb67 	bl	8000b7e <SPI_SSIConfig>
	{
 80004b0:	e75f      	b.n	8000372 <main+0x1e>
 80004b2:	bf00      	nop
 80004b4:	40003800 	.word	0x40003800
 80004b8:	40020000 	.word	0x40020000

080004bc <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d161      	bne.n	8000592 <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a33      	ldr	r2, [pc, #204]	; (80005a0 <GPIO_PeriClockControl+0xe4>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004d6:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a32      	ldr	r2, [pc, #200]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 80004e2:	e056      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <GPIO_PeriClockControl+0xec>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004ec:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 80004f2:	f043 0302 	orr.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e04b      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <GPIO_PeriClockControl+0xf0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a27      	ldr	r2, [pc, #156]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	e040      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <GPIO_PeriClockControl+0xf4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000524:	e035      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <GPIO_PeriClockControl+0xf8>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053a:	e02a      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <GPIO_PeriClockControl+0xfc>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000550:	e01f      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a19      	ldr	r2, [pc, #100]	; (80005bc <GPIO_PeriClockControl+0x100>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000566:	e014      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <GPIO_PeriClockControl+0x104>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057c:	e009      	b.n	8000592 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <GPIO_PeriClockControl+0x108>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d105      	bne.n	8000592 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <GPIO_PeriClockControl+0xe8>)
 800058c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40021400 	.word	0x40021400
 80005bc:	40021800 	.word	0x40021800
 80005c0:	40021c00 	.word	0x40021c00
 80005c4:	40022000 	.word	0x40022000

080005c8 <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff70 	bl	80004bc <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d810      	bhi.n	8000606 <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e0d4      	b.n	80007b0 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d117      	bne.n	800063e <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <GPIO_Init+0x180>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <GPIO_Init+0x180>)
 8000620:	430b      	orrs	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <GPIO_Init+0x180>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a44      	ldr	r2, [pc, #272]	; (8000748 <GPIO_Init+0x180>)
 8000638:	400b      	ands	r3, r1
 800063a:	6093      	str	r3, [r2, #8]
 800063c:	e035      	b.n	80006aa <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d117      	bne.n	8000676 <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <GPIO_Init+0x180>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a3c      	ldr	r2, [pc, #240]	; (8000748 <GPIO_Init+0x180>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <GPIO_Init+0x180>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	43d2      	mvns	r2, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a36      	ldr	r2, [pc, #216]	; (8000748 <GPIO_Init+0x180>)
 8000670:	400b      	ands	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
 8000674:	e019      	b.n	80006aa <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	2b06      	cmp	r3, #6
 800067c:	d115      	bne.n	80006aa <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <GPIO_Init+0x180>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7912      	ldrb	r2, [r2, #4]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	4611      	mov	r1, r2
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <GPIO_Init+0x180>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <GPIO_Init+0x180>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <GPIO_Init+0x180>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <GPIO_Init+0x184>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <GPIO_Init+0x184>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	f003 0303 	and.w	r3, r3, #3
 80006c6:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <GPIO_Init+0x188>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d050      	beq.n	8000774 <GPIO_Init+0x1ac>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <GPIO_Init+0x18c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d032      	beq.n	8000742 <GPIO_Init+0x17a>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <GPIO_Init+0x190>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d02b      	beq.n	800073e <GPIO_Init+0x176>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <GPIO_Init+0x194>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d024      	beq.n	800073a <GPIO_Init+0x172>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <GPIO_Init+0x198>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d01d      	beq.n	8000736 <GPIO_Init+0x16e>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <GPIO_Init+0x19c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d016      	beq.n	8000732 <GPIO_Init+0x16a>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <GPIO_Init+0x1a0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d00f      	beq.n	800072e <GPIO_Init+0x166>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <GPIO_Init+0x1a4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d008      	beq.n	800072a <GPIO_Init+0x162>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <GPIO_Init+0x1a8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <GPIO_Init+0x15e>
 8000722:	2308      	movs	r3, #8
 8000724:	e027      	b.n	8000776 <GPIO_Init+0x1ae>
 8000726:	2300      	movs	r3, #0
 8000728:	e025      	b.n	8000776 <GPIO_Init+0x1ae>
 800072a:	2307      	movs	r3, #7
 800072c:	e023      	b.n	8000776 <GPIO_Init+0x1ae>
 800072e:	2306      	movs	r3, #6
 8000730:	e021      	b.n	8000776 <GPIO_Init+0x1ae>
 8000732:	2305      	movs	r3, #5
 8000734:	e01f      	b.n	8000776 <GPIO_Init+0x1ae>
 8000736:	2304      	movs	r3, #4
 8000738:	e01d      	b.n	8000776 <GPIO_Init+0x1ae>
 800073a:	2303      	movs	r3, #3
 800073c:	e01b      	b.n	8000776 <GPIO_Init+0x1ae>
 800073e:	2302      	movs	r3, #2
 8000740:	e019      	b.n	8000776 <GPIO_Init+0x1ae>
 8000742:	2301      	movs	r3, #1
 8000744:	e017      	b.n	8000776 <GPIO_Init+0x1ae>
 8000746:	bf00      	nop
 8000748:	40013c00 	.word	0x40013c00
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021000 	.word	0x40021000
 8000764:	40021400 	.word	0x40021400
 8000768:	40021800 	.word	0x40021800
 800076c:	40021c00 	.word	0x40021c00
 8000770:	40022000 	.word	0x40022000
 8000774:	2300      	movs	r3, #0
 8000776:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 8000778:	4a58      	ldr	r2, [pc, #352]	; (80008dc <GPIO_Init+0x314>)
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	3302      	adds	r3, #2
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	7b79      	ldrb	r1, [r7, #13]
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	4618      	mov	r0, r3
 800078e:	4953      	ldr	r1, [pc, #332]	; (80008dc <GPIO_Init+0x314>)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4302      	orrs	r2, r0
 8000794:	3302      	adds	r3, #2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079a:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <GPIO_Init+0x318>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7912      	ldrb	r2, [r2, #4]
 80007a2:	4611      	mov	r1, r2
 80007a4:	2201      	movs	r2, #1
 80007a6:	408a      	lsls	r2, r1
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a4d      	ldr	r2, [pc, #308]	; (80008e0 <GPIO_Init+0x318>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	2103      	movs	r1, #3
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	400a      	ands	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	799b      	ldrb	r3, [r3, #6]
 80007d8:	4619      	mov	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	4619      	mov	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2103      	movs	r1, #3
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	79db      	ldrb	r3, [r3, #7]
 8000816:	4619      	mov	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	791b      	ldrb	r3, [r3, #4]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	400a      	ands	r2, r1
 8000848:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	4619      	mov	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	430a      	orrs	r2, r1
 8000866:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d131      	bne.n	80008d4 <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7b3a      	ldrb	r2, [r7, #12]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7b3a      	ldrb	r2, [r7, #12]
 80008a2:	4001      	ands	r1, r0
 80008a4:	3208      	adds	r2, #8
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7b3a      	ldrb	r2, [r7, #12]
 80008b0:	3208      	adds	r2, #8
 80008b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7a5b      	ldrb	r3, [r3, #9]
 80008ba:	461a      	mov	r2, r3
 80008bc:	7afb      	ldrb	r3, [r7, #11]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	7b3a      	ldrb	r2, [r7, #12]
 80008cc:	4301      	orrs	r1, r0
 80008ce:	3208      	adds	r2, #8
 80008d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40013800 	.word	0x40013800
 80008e0:	40013c00 	.word	0x40013c00

080008e4 <GPIO_ReadFromInputPin>:
 *
 * @Note              - none
 *********************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	//Shift the value to the LSB then mask all other bits
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	fa22 f303 	lsr.w	r3, r2, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
	return value;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SPI_PeriClockControl>:
 *
 * @Note              -none
 *********************************************************************/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d11f      	bne.n	8000962 <SPI_PeriClockControl+0x52>
		{
			//Enables the clock for the given SPI peripheal
			if(pSPIx == SPI1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <SPI_PeriClockControl+0x60>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <SPI_PeriClockControl+0x64>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <SPI_PeriClockControl+0x64>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
			}else if (pSPIx == SPI3)
			{
				SPI3_PCLK_EN();
			}
		}
}
 8000936:	e014      	b.n	8000962 <SPI_PeriClockControl+0x52>
			}else if (pSPIx == SPI2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <SPI_PeriClockControl+0x68>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <SPI_PeriClockControl+0x64>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <SPI_PeriClockControl+0x64>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800094c:	e009      	b.n	8000962 <SPI_PeriClockControl+0x52>
			}else if (pSPIx == SPI3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SPI_PeriClockControl+0x6c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d105      	bne.n	8000962 <SPI_PeriClockControl+0x52>
				SPI3_PCLK_EN();
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <SPI_PeriClockControl+0x64>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <SPI_PeriClockControl+0x64>)
 800095c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40013000 	.word	0x40013000
 8000974:	40023800 	.word	0x40023800
 8000978:	40003800 	.word	0x40003800
 800097c:	40003c00 	.word	0x40003c00

08000980 <SPI_Init>:
 * @Note              -none
 *********************************************************************/


void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffbe 	bl	8000910 <SPI_PeriClockControl>

	//First the SPI_CR1 is configured
	//As a large amount of bits need to be set a temp register is used. This will then be copied into the actual register.
	uint16_t tempReg = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	81fb      	strh	r3, [r7, #14]

	//Configure the device mode mater or slave
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	b21a      	sxth	r2, r3
 80009a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	81fb      	strh	r3, [r7, #14]

	//Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	795b      	ldrb	r3, [r3, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d104      	bne.n	80009bc <SPI_Init+0x3c>
	{
		//Enable BIDI by clearing bit
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009b8:	81fb      	strh	r3, [r7, #14]
 80009ba:	e016      	b.n	80009ea <SPI_Init+0x6a>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	795b      	ldrb	r3, [r3, #5]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d106      	bne.n	80009d2 <SPI_Init+0x52>
	{
		//Disable BIDI by setting bit
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009ce:	81fb      	strh	r3, [r7, #14]
 80009d0:	e00b      	b.n	80009ea <SPI_Init+0x6a>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d107      	bne.n	80009ea <SPI_Init+0x6a>
	{
		//Enable BIDI by clearing bit and set RX only for recieve only
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80009da:	89fb      	ldrh	r3, [r7, #14]
 80009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e0:	81fb      	strh	r3, [r7, #14]
		tempReg |= (1 << SPI_CR1_RXONLY);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e8:	81fb      	strh	r3, [r7, #14]
	}

	//Set the SCLK divisor
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	81fb      	strh	r3, [r7, #14]

	//Set the DFF
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF<< SPI_CR1_DFF;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	79db      	ldrb	r3, [r3, #7]
 8000a00:	02db      	lsls	r3, r3, #11
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	81fb      	strh	r3, [r7, #14]

	//Set the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL<< SPI_CR1_CPOL;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7a1b      	ldrb	r3, [r3, #8]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	81fb      	strh	r3, [r7, #14]

	//Set the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA<< SPI_CR1_CPHA;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	81fb      	strh	r3, [r7, #14]

	//Set the SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM<< SPI_CR1_SSM;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7a9b      	ldrb	r3, [r3, #10]
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	81fb      	strh	r3, [r7, #14]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	89fa      	ldrh	r2, [r7, #14]
 8000a44:	601a      	str	r2, [r3, #0]




}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SPI_Get_FlagStatus>:
		SPI2_REG_RESET();
	}
}

uint8_t SPI_Get_FlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SPI_Get_FlagStatus+0x1a>
	{
		return SET;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <SPI_Get_FlagStatus+0x1c>
	}
	else
	{
		return RESET;
 8000a68:	2300      	movs	r3, #0
	}
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SPI_SendData>:

//Blocking call. While loop present so fuction does return until all data sent.


void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* dataToSend,uint32_t Len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b084      	sub	sp, #16
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a82:	e024      	b.n	8000ace <SPI_SendData+0x58>
	{
		//Check if the TXE is set and Tx buffer empty. Program hangs until this happens
		while(SPI_Get_FlagStatus(pSPIx,SPI_TXE_FLAG) == RESET);
 8000a84:	bf00      	nop
 8000a86:	2102      	movs	r1, #2
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff ffe0 	bl	8000a4e <SPI_Get_FlagStatus>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f8      	beq.n	8000a86 <SPI_SendData+0x10>

		//Check dff
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00b      	beq.n	8000ab8 <SPI_SendData+0x42>
		{
			//16bit
			pSPIx->DR = *((uint16_t*)dataToSend);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	60da      	str	r2, [r3, #12]
			Len -=2;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3b02      	subs	r3, #2
 8000aae:	607b      	str	r3, [r7, #4]

			//Increment the dataTosend pointer
			dataToSend+=2;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	e00a      	b.n	8000ace <SPI_SendData+0x58>

		}
		else
		{
			//8bit
			pSPIx->DR = *dataToSend;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60da      	str	r2, [r3, #12]
			Len --;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
			dataToSend++;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1d7      	bne.n	8000a84 <SPI_SendData+0xe>
		}

	}

}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <SPI_RecieveData>:



void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t* dataReceived,uint32_t Len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000aea:	e024      	b.n	8000b36 <SPI_RecieveData+0x58>
	{
		//Check if the RXE is not empty
		while(SPI_Get_FlagStatus(pSPIx,SPI_RXNE_FLAG) == SET);
 8000aec:	bf00      	nop
 8000aee:	2101      	movs	r1, #1
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffac 	bl	8000a4e <SPI_Get_FlagStatus>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d0f8      	beq.n	8000aee <SPI_RecieveData+0x10>

		//Check dff
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <SPI_RecieveData+0x42>
		{
			//16bit
			 *((uint16_t*)dataReceived) = pSPIx->DR;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	801a      	strh	r2, [r3, #0]
			Len -=2;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3b02      	subs	r3, #2
 8000b16:	607b      	str	r3, [r7, #4]

			//Increment the dataTosend pointer
			dataReceived+=2;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	e00a      	b.n	8000b36 <SPI_RecieveData+0x58>

		}
		else
		{
			//8bit
			*dataReceived = pSPIx->DR;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	701a      	strb	r2, [r3, #0]
			Len --;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
			dataReceived++;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1d7      	bne.n	8000aec <SPI_RecieveData+0xe>
		}

	}

}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <SPI_PeripheralControl>:
	}
	return state;
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d106      	bne.n	8000b66 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000b64:	e005      	b.n	8000b72 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d106      	bne.n	8000b9e <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SSI);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SSI);
	}
}
 8000b9c:	e005      	b.n	8000baa <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SSI);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SPI_SSOEConfig>:

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d106      	bne.n	8000bd6 <SPI_SSOEConfig+0x20>
		{
			pSPIx->CR2 |= (1<< SPI_CR2_SSOE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f043 0204 	orr.w	r2, r3, #4
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	605a      	str	r2, [r3, #4]
		}
		else
		{
			pSPIx->CR2 &= ~(1<< SPI_CR2_SSOE);
		}
}
 8000bd4:	e005      	b.n	8000be2 <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1<< SPI_CR2_SSOE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f023 0204 	bic.w	r2, r3, #4
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	605a      	str	r2, [r3, #4]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <__libc_init_array>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	4d0d      	ldr	r5, [pc, #52]	; (8000c28 <__libc_init_array+0x38>)
 8000bf4:	4c0d      	ldr	r4, [pc, #52]	; (8000c2c <__libc_init_array+0x3c>)
 8000bf6:	1b64      	subs	r4, r4, r5
 8000bf8:	10a4      	asrs	r4, r4, #2
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	42a6      	cmp	r6, r4
 8000bfe:	d109      	bne.n	8000c14 <__libc_init_array+0x24>
 8000c00:	4d0b      	ldr	r5, [pc, #44]	; (8000c30 <__libc_init_array+0x40>)
 8000c02:	4c0c      	ldr	r4, [pc, #48]	; (8000c34 <__libc_init_array+0x44>)
 8000c04:	f000 f818 	bl	8000c38 <_init>
 8000c08:	1b64      	subs	r4, r4, r5
 8000c0a:	10a4      	asrs	r4, r4, #2
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	42a6      	cmp	r6, r4
 8000c10:	d105      	bne.n	8000c1e <__libc_init_array+0x2e>
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c18:	4798      	blx	r3
 8000c1a:	3601      	adds	r6, #1
 8000c1c:	e7ee      	b.n	8000bfc <__libc_init_array+0xc>
 8000c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c22:	4798      	blx	r3
 8000c24:	3601      	adds	r6, #1
 8000c26:	e7f2      	b.n	8000c0e <__libc_init_array+0x1e>
 8000c28:	08000c50 	.word	0x08000c50
 8000c2c:	08000c50 	.word	0x08000c50
 8000c30:	08000c50 	.word	0x08000c50
 8000c34:	08000c54 	.word	0x08000c54

08000c38 <_init>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	bf00      	nop
 8000c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3e:	bc08      	pop	{r3}
 8000c40:	469e      	mov	lr, r3
 8000c42:	4770      	bx	lr

08000c44 <_fini>:
 8000c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c46:	bf00      	nop
 8000c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4a:	bc08      	pop	{r3}
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	4770      	bx	lr
