
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c68  08000c68  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c68  08000c68  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000c68  08000c68  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c68  08000c68  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          00000044  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000190f  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00001508  00000000  00000000  0002197f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004cb  00000000  00000000  00022e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  00023358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000094e0  00000000  00000000  000234c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000138  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000d50  00000000  00000000  0002cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000530  00000000  00000000  0002d880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000040 	.word	0x20000040
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c50 	.word	0x08000c50

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000044 	.word	0x20000044
 80001e4:	08000c50 	.word	0x08000c50

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fcef 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f000 f87b 	bl	8000324 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800023c:	08000c70 	.word	0x08000c70
  ldr r2, =_sbss
 8000240:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000244:	20000084 	.word	0x20000084

08000248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC_IRQHandler>
	...

0800024c <delay>:

#include "stm32f407xx.h"
#include <string.h>

void delay(void)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e002      	b.n	800025e <delay+0x12>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <delay+0x28>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d9f8      	bls.n	8000258 <delay+0xc>
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	0003d08f 	.word	0x0003d08f

08000278 <I2C1_GPIO_Inits>:
void I2C1_GPIO_Inits(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	//GPIO pins must be configured for AF mode
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <I2C1_GPIO_Inits+0x40>)
 8000280:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000282:	2302      	movs	r3, #2
 8000284:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000286:	2304      	movs	r3, #4
 8000288:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800028a:	2301      	movs	r3, #1
 800028c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800028e:	2301      	movs	r3, #1
 8000290:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72bb      	strb	r3, [r7, #10]

	//SCLK
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000296:	2306      	movs	r3, #6
 8000298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8ef 	bl	8000480 <GPIO_Init>

	//MOSI
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002a2:	2307      	movs	r3, #7
 80002a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f8e9 	bl	8000480 <GPIO_Init>

}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <I2C1_Inits>:
uint8_t some_data[] = "We are testing i2c mater Tx\n";
#define MY_ADDR 0x61
#define SLAVE_ADDR 0x68

void I2C1_Inits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <I2C1_Inits+0x2c>)
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <I2C1_Inits+0x30>)
 80002c4:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <I2C1_Inits+0x2c>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <I2C1_Inits+0x2c>)
 80002ce:	2261      	movs	r2, #97	; 0x61
 80002d0:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <I2C1_Inits+0x2c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <I2C1_Inits+0x2c>)
 80002da:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <I2C1_Inits+0x34>)
 80002dc:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <I2C1_Inits+0x2c>)
 80002e0:	f000 fb46 	bl	8000970 <I2C_Init>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000005c 	.word	0x2000005c
 80002ec:	40005400 	.word	0x40005400
 80002f0:	000186a0 	.word	0x000186a0

080002f4 <Btn_GPIO_Inits>:

void Btn_GPIO_Inits(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <Btn_GPIO_Inits+0x2c>)
 80002fc:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002fe:	2300      	movs	r3, #0
 8000300:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000302:	2300      	movs	r3, #0
 8000304:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000306:	2302      	movs	r3, #2
 8000308:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800030a:	2300      	movs	r3, #0
 800030c:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIOBtn);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f8b5 	bl	8000480 <GPIO_Init>
}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000

08000324 <main>:


int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	Btn_GPIO_Inits();
 8000328:	f7ff ffe4 	bl	80002f4 <Btn_GPIO_Inits>
	//i2c
	I2C1_GPIO_Inits();
 800032c:	f7ff ffa4 	bl	8000278 <I2C1_GPIO_Inits>
	I2C1_Inits();
 8000330:	f7ff ffc4 	bl	80002bc <I2C1_Inits>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000334:	2101      	movs	r1, #1
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <main+0x40>)
 8000338:	f000 fc36 	bl	8000ba8 <I2C_PeripheralControl>
	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800033c:	bf00      	nop
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <main+0x44>)
 8000342:	f000 fa2b 	bl	800079c <GPIO_ReadFromInputPin>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f8      	beq.n	800033e <main+0x1a>
		delay();
 800034c:	f7ff ff7e 	bl	800024c <delay>
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 8000350:	4806      	ldr	r0, [pc, #24]	; (800036c <main+0x48>)
 8000352:	f7ff ff49 	bl	80001e8 <strlen>
 8000356:	4602      	mov	r2, r0
 8000358:	2368      	movs	r3, #104	; 0x68
 800035a:	4904      	ldr	r1, [pc, #16]	; (800036c <main+0x48>)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <main+0x4c>)
 800035e:	f000 fbc3 	bl	8000ae8 <I2C_MasterSendData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000362:	e7eb      	b.n	800033c <main+0x18>
 8000364:	40005400 	.word	0x40005400
 8000368:	40020000 	.word	0x40020000
 800036c:	20000000 	.word	0x20000000
 8000370:	2000005c 	.word	0x2000005c

08000374 <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d161      	bne.n	800044a <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_PeriClockControl+0xe4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 800039a:	e056      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a30      	ldr	r2, [pc, #192]	; (8000460 <GPIO_PeriClockControl+0xec>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e04b      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <GPIO_PeriClockControl+0xf0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e040      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <GPIO_PeriClockControl+0xf4>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a21      	ldr	r2, [pc, #132]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e035      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_PeriClockControl+0xf8>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e02a      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <GPIO_PeriClockControl+0xfc>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e01f      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a19      	ldr	r2, [pc, #100]	; (8000474 <GPIO_PeriClockControl+0x100>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e014      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <GPIO_PeriClockControl+0x104>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <GPIO_PeriClockControl+0xe8>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <GPIO_PeriClockControl+0xe8>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e009      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <GPIO_PeriClockControl+0x108>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000
 800045c:	40023800 	.word	0x40023800
 8000460:	40020400 	.word	0x40020400
 8000464:	40020800 	.word	0x40020800
 8000468:	40020c00 	.word	0x40020c00
 800046c:	40021000 	.word	0x40021000
 8000470:	40021400 	.word	0x40021400
 8000474:	40021800 	.word	0x40021800
 8000478:	40021c00 	.word	0x40021c00
 800047c:	40022000 	.word	0x40022000

08000480 <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff70 	bl	8000374 <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b03      	cmp	r3, #3
 800049a:	d810      	bhi.n	80004be <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	4619      	mov	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	430a      	orrs	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	e0d4      	b.n	8000668 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	795b      	ldrb	r3, [r3, #5]
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	d117      	bne.n	80004f6 <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c6:	4b4e      	ldr	r3, [pc, #312]	; (8000600 <GPIO_Init+0x180>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7912      	ldrb	r2, [r2, #4]
 80004ce:	4611      	mov	r1, r2
 80004d0:	2201      	movs	r2, #1
 80004d2:	408a      	lsls	r2, r1
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a4a      	ldr	r2, [pc, #296]	; (8000600 <GPIO_Init+0x180>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004dc:	4b48      	ldr	r3, [pc, #288]	; (8000600 <GPIO_Init+0x180>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7912      	ldrb	r2, [r2, #4]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a44      	ldr	r2, [pc, #272]	; (8000600 <GPIO_Init+0x180>)
 80004f0:	400b      	ands	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]
 80004f4:	e035      	b.n	8000562 <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d117      	bne.n	800052e <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b40      	ldr	r3, [pc, #256]	; (8000600 <GPIO_Init+0x180>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a3c      	ldr	r2, [pc, #240]	; (8000600 <GPIO_Init+0x180>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000514:	4b3a      	ldr	r3, [pc, #232]	; (8000600 <GPIO_Init+0x180>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7912      	ldrb	r2, [r2, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	43d2      	mvns	r2, r2
 8000524:	4611      	mov	r1, r2
 8000526:	4a36      	ldr	r2, [pc, #216]	; (8000600 <GPIO_Init+0x180>)
 8000528:	400b      	ands	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
 800052c:	e019      	b.n	8000562 <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	795b      	ldrb	r3, [r3, #5]
 8000532:	2b06      	cmp	r3, #6
 8000534:	d115      	bne.n	8000562 <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <GPIO_Init+0x180>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	4611      	mov	r1, r2
 8000546:	4a2e      	ldr	r2, [pc, #184]	; (8000600 <GPIO_Init+0x180>)
 8000548:	430b      	orrs	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054c:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <GPIO_Init+0x180>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a28      	ldr	r2, [pc, #160]	; (8000600 <GPIO_Init+0x180>)
 800055e:	430b      	orrs	r3, r1
 8000560:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <GPIO_Init+0x184>)
 8000564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000566:	4a27      	ldr	r2, [pc, #156]	; (8000604 <GPIO_Init+0x184>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056c:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <GPIO_Init+0x188>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d050      	beq.n	800062c <GPIO_Init+0x1ac>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1f      	ldr	r2, [pc, #124]	; (800060c <GPIO_Init+0x18c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d032      	beq.n	80005fa <GPIO_Init+0x17a>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <GPIO_Init+0x190>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d02b      	beq.n	80005f6 <GPIO_Init+0x176>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <GPIO_Init+0x194>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d024      	beq.n	80005f2 <GPIO_Init+0x172>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <GPIO_Init+0x198>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d01d      	beq.n	80005ee <GPIO_Init+0x16e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a19      	ldr	r2, [pc, #100]	; (800061c <GPIO_Init+0x19c>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d016      	beq.n	80005ea <GPIO_Init+0x16a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <GPIO_Init+0x1a0>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d00f      	beq.n	80005e6 <GPIO_Init+0x166>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <GPIO_Init+0x1a4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d008      	beq.n	80005e2 <GPIO_Init+0x162>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <GPIO_Init+0x1a8>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d101      	bne.n	80005de <GPIO_Init+0x15e>
 80005da:	2308      	movs	r3, #8
 80005dc:	e027      	b.n	800062e <GPIO_Init+0x1ae>
 80005de:	2300      	movs	r3, #0
 80005e0:	e025      	b.n	800062e <GPIO_Init+0x1ae>
 80005e2:	2307      	movs	r3, #7
 80005e4:	e023      	b.n	800062e <GPIO_Init+0x1ae>
 80005e6:	2306      	movs	r3, #6
 80005e8:	e021      	b.n	800062e <GPIO_Init+0x1ae>
 80005ea:	2305      	movs	r3, #5
 80005ec:	e01f      	b.n	800062e <GPIO_Init+0x1ae>
 80005ee:	2304      	movs	r3, #4
 80005f0:	e01d      	b.n	800062e <GPIO_Init+0x1ae>
 80005f2:	2303      	movs	r3, #3
 80005f4:	e01b      	b.n	800062e <GPIO_Init+0x1ae>
 80005f6:	2302      	movs	r3, #2
 80005f8:	e019      	b.n	800062e <GPIO_Init+0x1ae>
 80005fa:	2301      	movs	r3, #1
 80005fc:	e017      	b.n	800062e <GPIO_Init+0x1ae>
 80005fe:	bf00      	nop
 8000600:	40013c00 	.word	0x40013c00
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000
 800060c:	40020400 	.word	0x40020400
 8000610:	40020800 	.word	0x40020800
 8000614:	40020c00 	.word	0x40020c00
 8000618:	40021000 	.word	0x40021000
 800061c:	40021400 	.word	0x40021400
 8000620:	40021800 	.word	0x40021800
 8000624:	40021c00 	.word	0x40021c00
 8000628:	40022000 	.word	0x40022000
 800062c:	2300      	movs	r3, #0
 800062e:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 8000630:	4a58      	ldr	r2, [pc, #352]	; (8000794 <GPIO_Init+0x314>)
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3302      	adds	r3, #2
 8000636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800063a:	7b79      	ldrb	r1, [r7, #13]
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	4618      	mov	r0, r3
 8000646:	4953      	ldr	r1, [pc, #332]	; (8000794 <GPIO_Init+0x314>)
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4302      	orrs	r2, r0
 800064c:	3302      	adds	r3, #2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000652:	4b51      	ldr	r3, [pc, #324]	; (8000798 <GPIO_Init+0x318>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a4d      	ldr	r2, [pc, #308]	; (8000798 <GPIO_Init+0x318>)
 8000664:	430b      	orrs	r3, r1
 8000666:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2103      	movs	r1, #3
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	799b      	ldrb	r3, [r3, #6]
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68da      	ldr	r2, [r3, #12]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	2103      	movs	r1, #3
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	79db      	ldrb	r3, [r3, #7]
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	400a      	ands	r2, r1
 8000700:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	4619      	mov	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	4619      	mov	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	430a      	orrs	r2, r1
 800071e:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d131      	bne.n	800078c <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	08db      	lsrs	r3, r3, #3
 800072e:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	7b3a      	ldrb	r2, [r7, #12]
 8000740:	3208      	adds	r2, #8
 8000742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	220f      	movs	r2, #15
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	43db      	mvns	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7b3a      	ldrb	r2, [r7, #12]
 800075a:	4001      	ands	r1, r0
 800075c:	3208      	adds	r2, #8
 800075e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	7b3a      	ldrb	r2, [r7, #12]
 8000768:	3208      	adds	r2, #8
 800076a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7a5b      	ldrb	r3, [r3, #9]
 8000772:	461a      	mov	r2, r3
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	4618      	mov	r0, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	7b3a      	ldrb	r2, [r7, #12]
 8000784:	4301      	orrs	r1, r0
 8000786:	3208      	adds	r2, #8
 8000788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40013800 	.word	0x40013800
 8000798:	40013c00 	.word	0x40013c00

0800079c <GPIO_ReadFromInputPin>:
 *
 * @Note              - none
 *********************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	//Shift the value to the LSB then mask all other bits
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	fa22 f303 	lsr.w	r3, r2, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
	return value;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_START);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	//Slave address is 7 bits from 7:1. The first bit must be cleared as its r/w bit and we are wirting
	SlaveAddr <<= 1;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8000802:	78fa      	ldrb	r2, [r7, #3]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	611a      	str	r2, [r3, #16]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <I2C_ClearADDRFlag>:
	SlaveAddr |= 1;
	pI2Cx->DR=SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2CHandle->pI2Cx->SR1;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2CHandle->pI2Cx->SR2;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	60fb      	str	r3, [r7, #12]
	(void)dummyRead; //dummy read needs to be type cast to void to prevent unused variable warning

}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_STOP);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <I2C_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11f      	bne.n	80008aa <I2C_PeriClockControl+0x52>
	{
		//In header file for I2C macros are set for all I2C addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pI2Cx == I2C1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <I2C_PeriClockControl+0x60>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <I2C_PeriClockControl+0x64>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <I2C_PeriClockControl+0x64>)
 8000878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}
}
 800087e:	e014      	b.n	80008aa <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <I2C_PeriClockControl+0x68>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <I2C_PeriClockControl+0x64>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <I2C_PeriClockControl+0x64>)
 800088e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000894:	e009      	b.n	80008aa <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <I2C_PeriClockControl+0x6c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d105      	bne.n	80008aa <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <I2C_PeriClockControl+0x64>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <I2C_PeriClockControl+0x64>)
 80008a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40005800 	.word	0x40005800
 80008c4:	40005c00 	.word	0x40005c00

080008c8 <RCC_Get_PCLK1Value>:

uint32_t RCC_Get_PCLK1Value(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
	uint32_t pClk1,SystemClk;

	//Get the clock source HSI, HSE, PLL
	uint8_t clkSrc = (RCC->CFGR >> 2) & 0x3;
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <RCC_Get_PCLK1Value+0x94>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	71fb      	strb	r3, [r7, #7]
	if(clkSrc == 0)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <RCC_Get_PCLK1Value+0x20>
	{
		//HSI
		SystemClk = 16000000;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <RCC_Get_PCLK1Value+0x98>)
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e004      	b.n	80008f2 <RCC_Get_PCLK1Value+0x2a>
	}
	else if (clkSrc == 1)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d101      	bne.n	80008f2 <RCC_Get_PCLK1Value+0x2a>
	{
		//HSE
		SystemClk = 8000000;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <RCC_Get_PCLK1Value+0x9c>)
 80008f0:	60fb      	str	r3, [r7, #12]
	{
		//PLL not used
	}

	//Get the AHB prescalar value
	uint8_t AHBSetPreScalar = (RCC->CFGR >> 4) & 0xF;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <RCC_Get_PCLK1Value+0x94>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	71bb      	strb	r3, [r7, #6]
	uint16_t ahbp;

	if(AHBSetPreScalar < 8)
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d802      	bhi.n	800090c <RCC_Get_PCLK1Value+0x44>
	{
		ahbp = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	817b      	strh	r3, [r7, #10]
 800090a:	e005      	b.n	8000918 <RCC_Get_PCLK1Value+0x50>
	}
	else
	{
		//First value is 1000 next is 1001. Therefore -8 is nesscary to index array correctly
		ahbp = AHBPreScalarValues[AHBSetPreScalar-8];
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	3b08      	subs	r3, #8
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <RCC_Get_PCLK1Value+0xa0>)
 8000912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000916:	817b      	strh	r3, [r7, #10]
	}

	//Get the APB1 prescalar value
	uint8_t APB1SetPreScalar = (RCC->CFGR >> 10) & 0x7;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <RCC_Get_PCLK1Value+0x94>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	0a9b      	lsrs	r3, r3, #10
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	717b      	strb	r3, [r7, #5]
	uint16_t apb1p;

	if(APB1SetPreScalar < 4)
 8000926:	797b      	ldrb	r3, [r7, #5]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d802      	bhi.n	8000932 <RCC_Get_PCLK1Value+0x6a>
	{
		apb1p = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	813b      	strh	r3, [r7, #8]
 8000930:	e005      	b.n	800093e <RCC_Get_PCLK1Value+0x76>
	}
	else
	{
		apb1p = APB1PreScalarValues[APB1SetPreScalar-4];
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	3b04      	subs	r3, #4
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <RCC_Get_PCLK1Value+0xa4>)
 8000938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093c:	813b      	strh	r3, [r7, #8]
	}

	pClk1 = SystemClk/ahbp/apb1p;
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	fbb2 f2f3 	udiv	r2, r2, r3
 8000946:	893b      	ldrh	r3, [r7, #8]
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	603b      	str	r3, [r7, #0]

	return pClk1;
 800094e:	683b      	ldr	r3, [r7, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023800 	.word	0x40023800
 8000960:	00f42400 	.word	0x00f42400
 8000964:	007a1200 	.word	0x007a1200
 8000968:	20000020 	.word	0x20000020
 800096c:	20000030 	.word	0x20000030

08000970 <I2C_Init>:

/*
 * Init and De-init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	//Enable the clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff6a 	bl	8000858 <I2C_PeriClockControl>

	//Enable the ACKing
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a5b      	ldrb	r3, [r3, #9]
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4619      	mov	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	601a      	str	r2, [r3, #0]

	//Set the freq field
	pI2CHandle->pI2Cx->CR2 |= (RCC_Get_PCLK1Value())/1000000;
 800099a:	f7ff ff95 	bl	80008c8 <RCC_Get_PCLK1Value>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <I2C_Init+0x170>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	0c99      	lsrs	r1, r3, #18
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	605a      	str	r2, [r3, #4]

	//Configure the device address
	pI2CHandle->pI2Cx->OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress) << 1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7a1b      	ldrb	r3, [r3, #8]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	609a      	str	r2, [r3, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	pI2CHandle->pI2Cx->OAR1 |= (1<<14);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009da:	609a      	str	r2, [r3, #8]

	//CCR calculation
	uint16_t ccr_value = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	81fb      	strh	r3, [r7, #14]

	//First mode is configured
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <I2C_Init+0x174>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d813      	bhi.n	8000a12 <I2C_Init+0xa2>
	{
		//CCR = Tscl / 2TpClk1 | CCR = FPclk1 / 2Fscl
		ccr_value = RCC_Get_PCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80009ea:	f7ff ff6d 	bl	80008c8 <RCC_Get_PCLK1Value>
 80009ee:	4602      	mov	r2, r0
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	81fb      	strh	r3, [r7, #14]
		//Mask out bits beyond 13 bits of ccr_value
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	69d9      	ldr	r1, [r3, #28]
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	61da      	str	r2, [r3, #28]
 8000a10:	e039      	b.n	8000a86 <I2C_Init+0x116>
	}
	else
	{
		//fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69da      	ldr	r2, [r3, #28]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a20:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY );
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	69da      	ldr	r2, [r3, #28]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7a9b      	ldrb	r3, [r3, #10]
 8000a2c:	039b      	lsls	r3, r3, #14
 8000a2e:	4619      	mov	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	61da      	str	r2, [r3, #28]

		//Configure the duty cycle based on value user provided
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7a9b      	ldrb	r3, [r3, #10]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10b      	bne.n	8000a58 <I2C_Init+0xe8>
		{
			//Tlow : Thigh is 2:1
			ccr_value = RCC_Get_PCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a40:	f7ff ff42 	bl	80008c8 <RCC_Get_PCLK1Value>
 8000a44:	4601      	mov	r1, r0
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a54:	81fb      	strh	r3, [r7, #14]
 8000a56:	e00c      	b.n	8000a72 <I2C_Init+0x102>
		}
		else
		{
			//Tlow : Thigh is 16:9
			ccr_value = RCC_Get_PCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a58:	f7ff ff36 	bl	80008c8 <RCC_Get_PCLK1Value>
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	009a      	lsls	r2, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a70:	81fb      	strh	r3, [r7, #14]
		}
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	69d9      	ldr	r1, [r3, #28]
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	61da      	str	r2, [r3, #28]
	}

	//Configure the rise time for I2C pin
	uint8_t tRise;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <I2C_Init+0x174>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d80a      	bhi.n	8000aa6 <I2C_Init+0x136>
	{
		//standard mode
		//trise = trisemax / tpclk1
		//trise = Fpclk / Frisemax
		tRise = (RCC_Get_PCLK1Value() / 1000000U) + 1;
 8000a90:	f7ff ff1a 	bl	80008c8 <RCC_Get_PCLK1Value>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <I2C_Init+0x170>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9b      	lsrs	r3, r3, #18
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	737b      	strb	r3, [r7, #13]
 8000aa4:	e00d      	b.n	8000ac2 <I2C_Init+0x152>
	}
	else
	{
		tRise = ((RCC_Get_PCLK1Value()  *300)/ 1000000U) + 1;
 8000aa6:	f7ff ff0f 	bl	80008c8 <RCC_Get_PCLK1Value>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <I2C_Init+0x170>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3301      	adds	r3, #1
 8000ac0:	737b      	strb	r3, [r7, #13]
	}
	pI2CHandle->pI2Cx->TRISE |=(tRise & 0x3F);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a19      	ldr	r1, [r3, #32]
 8000ac8:	7b7b      	ldrb	r3, [r7, #13]
 8000aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	621a      	str	r2, [r3, #32]
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	000186a0 	.word	0x000186a0

08000ae8 <I2C_MasterSendData>:

/*
 * Data Send and Receive
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	70fb      	strb	r3, [r7, #3]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fe64 	bl	80007c8 <I2C_GenerateStartCondition>

	//Read SR1 register to check if SB has been set. Not operator is nesscary to hang the code until flag = 1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000b00:	bf00      	nop
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2101      	movs	r1, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f869 	bl	8000be0 <I2C_GetFlagStatus>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f6      	beq.n	8000b02 <I2C_MasterSendData+0x1a>

	//Write the address of the slave to DR register
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	78fa      	ldrb	r2, [r7, #3]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe63 	bl	80007e8 <I2C_ExecuteAddressPhaseWrite>

	//Confirm the address phase is compelted by checking if ADDR bit set in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000b22:	bf00      	nop
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f858 	bl	8000be0 <I2C_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f6      	beq.n	8000b24 <I2C_MasterSendData+0x3c>

	//Clear the ADDR flag by reading SR1 and SR2
	I2C_ClearADDRFlag(pI2CHandle);
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff fe6c 	bl	8000814 <I2C_ClearADDRFlag>

	//Send all bytes of data until len is = 0
	while(Len > 0)
 8000b3c:	e014      	b.n	8000b68 <I2C_MasterSendData+0x80>
	{
		//When txe is set to 1 data register is empty and ready to recieve data
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000b3e:	bf00      	nop
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f84a 	bl	8000be0 <I2C_GetFlagStatus>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f6      	beq.n	8000b40 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	611a      	str	r2, [r3, #16]
		pTxbuffer ++;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
		Len --;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1e7      	bne.n	8000b3e <I2C_MasterSendData+0x56>
	}

	//Wait for Txe and BTF to be set as they signal end of data transfer
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000b6e:	bf00      	nop
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f832 	bl	8000be0 <I2C_GetFlagStatus>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f6      	beq.n	8000b70 <I2C_MasterSendData+0x88>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000b82:	bf00      	nop
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f828 	bl	8000be0 <I2C_GetFlagStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f6      	beq.n	8000b84 <I2C_MasterSendData+0x9c>

	//Generate stop condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe4c 	bl	8000838 <I2C_GenerateStopCondition>


}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <I2C_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d106      	bne.n	8000bc8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1<< I2C_CR1_PE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
	}
}
 8000bc6:	e005      	b.n	8000bd4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 0201 	bic.w	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <I2C_GetFlagStatus>:
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <I2C_GetFlagStatus+0x1a>
	{
		return SET;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <I2C_GetFlagStatus+0x1c>
	}
	else
	{
		return RESET;
 8000bfa:	2300      	movs	r3, #0
	}
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4d0d      	ldr	r5, [pc, #52]	; (8000c40 <__libc_init_array+0x38>)
 8000c0c:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <__libc_init_array+0x3c>)
 8000c0e:	1b64      	subs	r4, r4, r5
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	2600      	movs	r6, #0
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	4d0b      	ldr	r5, [pc, #44]	; (8000c48 <__libc_init_array+0x40>)
 8000c1a:	4c0c      	ldr	r4, [pc, #48]	; (8000c4c <__libc_init_array+0x44>)
 8000c1c:	f000 f818 	bl	8000c50 <_init>
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	2600      	movs	r6, #0
 8000c26:	42a6      	cmp	r6, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c30:	4798      	blx	r3
 8000c32:	3601      	adds	r6, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3a:	4798      	blx	r3
 8000c3c:	3601      	adds	r6, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08000c68 	.word	0x08000c68
 8000c44:	08000c68 	.word	0x08000c68
 8000c48:	08000c68 	.word	0x08000c68
 8000c4c:	08000c6c 	.word	0x08000c6c

08000c50 <_init>:
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	bf00      	nop
 8000c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c56:	bc08      	pop	{r3}
 8000c58:	469e      	mov	lr, r3
 8000c5a:	4770      	bx	lr

08000c5c <_fini>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr
