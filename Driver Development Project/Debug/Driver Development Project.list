
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d68  08000d68  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d68  08000d68  00020420  2**0
                  CONTENTS
  4 .ARM          00000000  08000d68  08000d68  00020420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d68  08000d68  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d68  08000d68  00010d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d6c  08000d6c  00010d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08000d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020420  2**0
                  CONTENTS
 10 .bss          00000040  20000420  20000420  00020420  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  00020420  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 13 .debug_line   000021d7  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00001937  00000000  00000000  00022627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005e2  00000000  00000000  00023f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000180  00000000  00000000  00024540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000af58  00000000  00000000  000246c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000138  00000000  00000000  0002f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00001121  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00030871  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000514  00000000  00000000  000308c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000420 	.word	0x20000420
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d50 	.word	0x08000d50

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000424 	.word	0x20000424
 80001e4:	08000d50 	.word	0x08000d50

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fd6f 	bl	8000d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f000 fd45 	bl	8000cb8 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800023c:	08000d70 	.word	0x08000d70
  ldr r2, =_sbss
 8000240:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000244:	20000460 	.word	0x20000460

08000248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC_IRQHandler>
	...

0800024c <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000258:	78fb      	ldrb	r3, [r7, #3]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d161      	bne.n	8000322 <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a33      	ldr	r2, [pc, #204]	; (8000330 <GPIO_PeriClockControl+0xe4>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000266:	4b33      	ldr	r3, [pc, #204]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 8000272:	e056      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a30      	ldr	r2, [pc, #192]	; (8000338 <GPIO_PeriClockControl+0xec>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800027c:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000288:	e04b      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a2b      	ldr	r2, [pc, #172]	; (800033c <GPIO_PeriClockControl+0xf0>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a27      	ldr	r2, [pc, #156]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029e:	e040      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a27      	ldr	r2, [pc, #156]	; (8000340 <GPIO_PeriClockControl+0xf4>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a21      	ldr	r2, [pc, #132]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b4:	e035      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a22      	ldr	r2, [pc, #136]	; (8000344 <GPIO_PeriClockControl+0xf8>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002c4:	f043 0310 	orr.w	r3, r3, #16
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ca:	e02a      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a1e      	ldr	r2, [pc, #120]	; (8000348 <GPIO_PeriClockControl+0xfc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e01f      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a19      	ldr	r2, [pc, #100]	; (800034c <GPIO_PeriClockControl+0x100>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a11      	ldr	r2, [pc, #68]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 80002f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	e014      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <GPIO_PeriClockControl+0x104>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030c:	e009      	b.n	8000322 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <GPIO_PeriClockControl+0x108>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d105      	bne.n	8000322 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a06      	ldr	r2, [pc, #24]	; (8000334 <GPIO_PeriClockControl+0xe8>)
 800031c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40020000 	.word	0x40020000
 8000334:	40023800 	.word	0x40023800
 8000338:	40020400 	.word	0x40020400
 800033c:	40020800 	.word	0x40020800
 8000340:	40020c00 	.word	0x40020c00
 8000344:	40021000 	.word	0x40021000
 8000348:	40021400 	.word	0x40021400
 800034c:	40021800 	.word	0x40021800
 8000350:	40021c00 	.word	0x40021c00
 8000354:	40022000 	.word	0x40022000

08000358 <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2101      	movs	r1, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff70 	bl	800024c <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d810      	bhi.n	8000396 <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	795b      	ldrb	r3, [r3, #5]
 800037e:	4619      	mov	r1, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	791b      	ldrb	r3, [r3, #4]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	4619      	mov	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	430a      	orrs	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	e0d4      	b.n	8000540 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	795b      	ldrb	r3, [r3, #5]
 800039a:	2b04      	cmp	r3, #4
 800039c:	d117      	bne.n	80003ce <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800039e:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <GPIO_Init+0x180>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	7912      	ldrb	r2, [r2, #4]
 80003a6:	4611      	mov	r1, r2
 80003a8:	2201      	movs	r2, #1
 80003aa:	408a      	lsls	r2, r1
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <GPIO_Init+0x180>)
 80003b0:	430b      	orrs	r3, r1
 80003b2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <GPIO_Init+0x180>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7912      	ldrb	r2, [r2, #4]
 80003bc:	4611      	mov	r1, r2
 80003be:	2201      	movs	r2, #1
 80003c0:	408a      	lsls	r2, r1
 80003c2:	43d2      	mvns	r2, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a44      	ldr	r2, [pc, #272]	; (80004d8 <GPIO_Init+0x180>)
 80003c8:	400b      	ands	r3, r1
 80003ca:	6093      	str	r3, [r2, #8]
 80003cc:	e035      	b.n	800043a <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	d117      	bne.n	8000406 <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d6:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <GPIO_Init+0x180>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	7912      	ldrb	r2, [r2, #4]
 80003de:	4611      	mov	r1, r2
 80003e0:	2201      	movs	r2, #1
 80003e2:	408a      	lsls	r2, r1
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <GPIO_Init+0x180>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ec:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <GPIO_Init+0x180>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	7912      	ldrb	r2, [r2, #4]
 80003f4:	4611      	mov	r1, r2
 80003f6:	2201      	movs	r2, #1
 80003f8:	408a      	lsls	r2, r1
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a36      	ldr	r2, [pc, #216]	; (80004d8 <GPIO_Init+0x180>)
 8000400:	400b      	ands	r3, r1
 8000402:	60d3      	str	r3, [r2, #12]
 8000404:	e019      	b.n	800043a <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795b      	ldrb	r3, [r3, #5]
 800040a:	2b06      	cmp	r3, #6
 800040c:	d115      	bne.n	800043a <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040e:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <GPIO_Init+0x180>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a2e      	ldr	r2, [pc, #184]	; (80004d8 <GPIO_Init+0x180>)
 8000420:	430b      	orrs	r3, r1
 8000422:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <GPIO_Init+0x180>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7912      	ldrb	r2, [r2, #4]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	4611      	mov	r1, r2
 8000434:	4a28      	ldr	r2, [pc, #160]	; (80004d8 <GPIO_Init+0x180>)
 8000436:	430b      	orrs	r3, r1
 8000438:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <GPIO_Init+0x184>)
 800043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043e:	4a27      	ldr	r2, [pc, #156]	; (80004dc <GPIO_Init+0x184>)
 8000440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000444:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	f003 0303 	and.w	r3, r3, #3
 8000456:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <GPIO_Init+0x188>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d050      	beq.n	8000504 <GPIO_Init+0x1ac>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <GPIO_Init+0x18c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d032      	beq.n	80004d2 <GPIO_Init+0x17a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <GPIO_Init+0x190>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d02b      	beq.n	80004ce <GPIO_Init+0x176>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <GPIO_Init+0x194>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d024      	beq.n	80004ca <GPIO_Init+0x172>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1a      	ldr	r2, [pc, #104]	; (80004f0 <GPIO_Init+0x198>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d01d      	beq.n	80004c6 <GPIO_Init+0x16e>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <GPIO_Init+0x19c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d016      	beq.n	80004c2 <GPIO_Init+0x16a>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <GPIO_Init+0x1a0>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d00f      	beq.n	80004be <GPIO_Init+0x166>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <GPIO_Init+0x1a4>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d008      	beq.n	80004ba <GPIO_Init+0x162>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <GPIO_Init+0x1a8>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d101      	bne.n	80004b6 <GPIO_Init+0x15e>
 80004b2:	2308      	movs	r3, #8
 80004b4:	e027      	b.n	8000506 <GPIO_Init+0x1ae>
 80004b6:	2300      	movs	r3, #0
 80004b8:	e025      	b.n	8000506 <GPIO_Init+0x1ae>
 80004ba:	2307      	movs	r3, #7
 80004bc:	e023      	b.n	8000506 <GPIO_Init+0x1ae>
 80004be:	2306      	movs	r3, #6
 80004c0:	e021      	b.n	8000506 <GPIO_Init+0x1ae>
 80004c2:	2305      	movs	r3, #5
 80004c4:	e01f      	b.n	8000506 <GPIO_Init+0x1ae>
 80004c6:	2304      	movs	r3, #4
 80004c8:	e01d      	b.n	8000506 <GPIO_Init+0x1ae>
 80004ca:	2303      	movs	r3, #3
 80004cc:	e01b      	b.n	8000506 <GPIO_Init+0x1ae>
 80004ce:	2302      	movs	r3, #2
 80004d0:	e019      	b.n	8000506 <GPIO_Init+0x1ae>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e017      	b.n	8000506 <GPIO_Init+0x1ae>
 80004d6:	bf00      	nop
 80004d8:	40013c00 	.word	0x40013c00
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40020400 	.word	0x40020400
 80004e8:	40020800 	.word	0x40020800
 80004ec:	40020c00 	.word	0x40020c00
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40021400 	.word	0x40021400
 80004f8:	40021800 	.word	0x40021800
 80004fc:	40021c00 	.word	0x40021c00
 8000500:	40022000 	.word	0x40022000
 8000504:	2300      	movs	r3, #0
 8000506:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 8000508:	4a58      	ldr	r2, [pc, #352]	; (800066c <GPIO_Init+0x314>)
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	3302      	adds	r3, #2
 800050e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000512:	7b79      	ldrb	r1, [r7, #13]
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	4618      	mov	r0, r3
 800051e:	4953      	ldr	r1, [pc, #332]	; (800066c <GPIO_Init+0x314>)
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	4302      	orrs	r2, r0
 8000524:	3302      	adds	r3, #2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b51      	ldr	r3, [pc, #324]	; (8000670 <GPIO_Init+0x318>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a4d      	ldr	r2, [pc, #308]	; (8000670 <GPIO_Init+0x318>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2103      	movs	r1, #3
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	4619      	mov	r1, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	400a      	ands	r2, r1
 800055c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	799b      	ldrb	r3, [r3, #6]
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
 8000574:	4619      	mov	r1, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	430a      	orrs	r2, r1
 800057c:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	400a      	ands	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	79db      	ldrb	r3, [r3, #7]
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	400a      	ands	r2, r1
 80005d8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a1b      	ldrb	r3, [r3, #8]
 80005e4:	4619      	mov	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d131      	bne.n	8000664 <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7b3a      	ldrb	r2, [r7, #12]
 8000618:	3208      	adds	r2, #8
 800061a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	220f      	movs	r2, #15
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	7b3a      	ldrb	r2, [r7, #12]
 8000632:	4001      	ands	r1, r0
 8000634:	3208      	adds	r2, #8
 8000636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	7b3a      	ldrb	r2, [r7, #12]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a5b      	ldrb	r3, [r3, #9]
 800064a:	461a      	mov	r2, r3
 800064c:	7afb      	ldrb	r3, [r7, #11]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	4618      	mov	r0, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	7b3a      	ldrb	r2, [r7, #12]
 800065c:	4301      	orrs	r1, r0
 800065e:	3208      	adds	r2, #8
 8000660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	40013c00 	.word	0x40013c00

08000674 <GPIO_ReadFromInputPin>:
 *
 * @Note              - none
 *********************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	//Shift the value to the LSB then mask all other bits
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691a      	ldr	r2, [r3, #16]
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
	return value;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <RCC_GetPCLK1Value>:

uint16_t AHBPreScalarValues[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1PreScalarValues[8] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
	uint32_t pClk1,SystemClk;

	//Get the clock source HSI, HSE, PLL
	uint8_t clkSrc = (RCC->CFGR >> 2) & 0x3;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <RCC_GetPCLK1Value+0x94>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	71fb      	strb	r3, [r7, #7]
	if(clkSrc == 0)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <RCC_GetPCLK1Value+0x20>
	{
		//HSI
		SystemClk = 16000000;
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <RCC_GetPCLK1Value+0x98>)
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e004      	b.n	80006ca <RCC_GetPCLK1Value+0x2a>
	}
	else if (clkSrc == 1)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d101      	bne.n	80006ca <RCC_GetPCLK1Value+0x2a>
	{
		//HSE
		SystemClk = 8000000;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <RCC_GetPCLK1Value+0x9c>)
 80006c8:	60fb      	str	r3, [r7, #12]
	{
		//PLL not used
	}

	//Get the AHB prescalar value
	uint8_t AHBSetPreScalar = (RCC->CFGR >> 4) & 0xF;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <RCC_GetPCLK1Value+0x94>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	71bb      	strb	r3, [r7, #6]
	uint16_t ahbp;

	if(AHBSetPreScalar < 8)
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d802      	bhi.n	80006e4 <RCC_GetPCLK1Value+0x44>
	{
		ahbp = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	817b      	strh	r3, [r7, #10]
 80006e2:	e005      	b.n	80006f0 <RCC_GetPCLK1Value+0x50>
	}
	else
	{
		//First value is 1000 next is 1001. Therefore -8 is nesscary to index array correctly
		ahbp = AHBPreScalarValues[AHBSetPreScalar-8];
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	3b08      	subs	r3, #8
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <RCC_GetPCLK1Value+0xa0>)
 80006ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ee:	817b      	strh	r3, [r7, #10]
	}

	//Get the APB1 prescalar value
	uint8_t APB1SetPreScalar = (RCC->CFGR >> 10) & 0x7;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <RCC_GetPCLK1Value+0x94>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	0a9b      	lsrs	r3, r3, #10
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0307 	and.w	r3, r3, #7
 80006fc:	717b      	strb	r3, [r7, #5]
	uint16_t apb1p;

	if(APB1SetPreScalar < 4)
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d802      	bhi.n	800070a <RCC_GetPCLK1Value+0x6a>
	{
		apb1p = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	813b      	strh	r3, [r7, #8]
 8000708:	e005      	b.n	8000716 <RCC_GetPCLK1Value+0x76>
	}
	else
	{
		apb1p = APB1PreScalarValues[APB1SetPreScalar-4];
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	3b04      	subs	r3, #4
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <RCC_GetPCLK1Value+0xa4>)
 8000710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000714:	813b      	strh	r3, [r7, #8]
	}

	pClk1 = SystemClk/ahbp/apb1p;
 8000716:	897b      	ldrh	r3, [r7, #10]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	fbb2 f2f3 	udiv	r2, r2, r3
 800071e:	893b      	ldrh	r3, [r7, #8]
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	603b      	str	r3, [r7, #0]

	return pClk1;
 8000726:	683b      	ldr	r3, [r7, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800
 8000738:	00f42400 	.word	0x00f42400
 800073c:	007a1200 	.word	0x007a1200
 8000740:	20000000 	.word	0x20000000
 8000744:	20000010 	.word	0x20000010

08000748 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
	uint32_t pClk,SystemClk;

	//Get the clock source HSI, HSE, PLL
	uint8_t clkSrc = (RCC->CFGR >> 2) & 0x3;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <RCC_GetPCLK2Value+0x94>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0303 	and.w	r3, r3, #3
 800075a:	71fb      	strb	r3, [r7, #7]
	if(clkSrc == 0)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d102      	bne.n	8000768 <RCC_GetPCLK2Value+0x20>
	{
		//HSI
		SystemClk = 16000000;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <RCC_GetPCLK2Value+0x98>)
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e004      	b.n	8000772 <RCC_GetPCLK2Value+0x2a>
	}
	else if (clkSrc == 1)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d101      	bne.n	8000772 <RCC_GetPCLK2Value+0x2a>
	{
		//HSE
		SystemClk = 8000000;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <RCC_GetPCLK2Value+0x9c>)
 8000770:	60fb      	str	r3, [r7, #12]
	{
		//PLL not used
	}

	//Get the AHB prescalar value
	uint8_t AHBSetPreScalar = (RCC->CFGR >> 4) & 0xF;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <RCC_GetPCLK2Value+0x94>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	091b      	lsrs	r3, r3, #4
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	71bb      	strb	r3, [r7, #6]
	uint16_t ahbp;

	if(AHBSetPreScalar < 8)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b07      	cmp	r3, #7
 8000784:	d802      	bhi.n	800078c <RCC_GetPCLK2Value+0x44>
	{
		ahbp = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	817b      	strh	r3, [r7, #10]
 800078a:	e005      	b.n	8000798 <RCC_GetPCLK2Value+0x50>
	}
	else
	{
		//First value is 1000 next is 1001. Therefore -8 is nesscary to index array correctly
		ahbp = AHBPreScalarValues[AHBSetPreScalar-8];
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	3b08      	subs	r3, #8
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <RCC_GetPCLK2Value+0xa0>)
 8000792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000796:	817b      	strh	r3, [r7, #10]
	}

	//Get the APB1 prescalar value
	uint8_t APB2SetPreScalar = (RCC->CFGR >> 13) & 0x7;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <RCC_GetPCLK2Value+0x94>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	0b5b      	lsrs	r3, r3, #13
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0307 	and.w	r3, r3, #7
 80007a4:	717b      	strb	r3, [r7, #5]
	uint16_t apb2p;

	if(APB2SetPreScalar < 4)
 80007a6:	797b      	ldrb	r3, [r7, #5]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d802      	bhi.n	80007b2 <RCC_GetPCLK2Value+0x6a>
	{
		apb2p = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	813b      	strh	r3, [r7, #8]
 80007b0:	e005      	b.n	80007be <RCC_GetPCLK2Value+0x76>
	}
	else
	{
		apb2p = APB1PreScalarValues[APB2SetPreScalar-4];
 80007b2:	797b      	ldrb	r3, [r7, #5]
 80007b4:	3b04      	subs	r3, #4
 80007b6:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <RCC_GetPCLK2Value+0xa4>)
 80007b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007bc:	813b      	strh	r3, [r7, #8]
	}

	pClk = SystemClk/ahbp/apb2p;
 80007be:	897b      	ldrh	r3, [r7, #10]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c6:	893b      	ldrh	r3, [r7, #8]
 80007c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007cc:	603b      	str	r3, [r7, #0]

	return pClk;
 80007ce:	683b      	ldr	r3, [r7, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800
 80007e0:	00f42400 	.word	0x00f42400
 80007e4:	007a1200 	.word	0x007a1200
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000010 	.word	0x20000010

080007f0 <USART_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d140      	bne.n	8000884 <USART_PeriClockControl+0x94>
	{
		//Enables the clock for the given USART peripheal
		if(pUSARTx == USART1)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <USART_PeriClockControl+0xa0>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <USART_PeriClockControl+0xa4>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pUSARTx == USART6)
		{
			USART6_PCLK_EN();
		}
	}
}
 8000816:	e035      	b.n	8000884 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <USART_PeriClockControl+0xa8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082c:	e02a      	b.n	8000884 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a1a      	ldr	r2, [pc, #104]	; (800089c <USART_PeriClockControl+0xac>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d106      	bne.n	8000844 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <USART_PeriClockControl+0xa4>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000842:	e01f      	b.n	8000884 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == UART4)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <USART_PeriClockControl+0xb0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <USART_PeriClockControl+0xa4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a10      	ldr	r2, [pc, #64]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000858:	e014      	b.n	8000884 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == UART5)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <USART_PeriClockControl+0xb4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <USART_PeriClockControl+0xa4>)
 8000868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800086e:	e009      	b.n	8000884 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART6)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <USART_PeriClockControl+0xb8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d105      	bne.n	8000884 <USART_PeriClockControl+0x94>
			USART6_PCLK_EN();
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <USART_PeriClockControl+0xa4>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <USART_PeriClockControl+0xa4>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40011000 	.word	0x40011000
 8000894:	40023800 	.word	0x40023800
 8000898:	40004400 	.word	0x40004400
 800089c:	40004800 	.word	0x40004800
 80008a0:	40004c00 	.word	0x40004c00
 80008a4:	40005000 	.word	0x40005000
 80008a8:	40011400 	.word	0x40011400

080008ac <USART_Init>:

/*
 * Init and De-init
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	//Enable the clock
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff98 	bl	80007f0 <USART_PeriClockControl>


	//Set the mode of the USART
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d108      	bne.n	80008da <USART_Init+0x2e>
	{
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f042 0204 	orr.w	r2, r2, #4
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	e020      	b.n	800091c <USART_Init+0x70>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	791b      	ldrb	r3, [r3, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d108      	bne.n	80008f4 <USART_Init+0x48>
	{
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 0208 	orr.w	r2, r2, #8
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	e013      	b.n	800091c <USART_Init+0x70>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d10f      	bne.n	800091c <USART_Init+0x70>
	{
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0208 	orr.w	r2, r2, #8
 800091a:	60da      	str	r2, [r3, #12]
	}

	//Word length configuartion
	pUSARTHandle->pUSARTx->CR1 |= (pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7b5b      	ldrb	r3, [r3, #13]
 8000926:	031b      	lsls	r3, r3, #12
 8000928:	4619      	mov	r1, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7b9b      	ldrb	r3, [r3, #14]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d108      	bne.n	800094c <USART_Init+0xa0>
	{
		//Implement the code to enale the parity control
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	e013      	b.n	8000974 <USART_Init+0xc8>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control
	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7b9b      	ldrb	r3, [r3, #14]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d10f      	bne.n	8000974 <USART_Init+0xc8>
	{
		//Implement the code to enable the parity control
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000962:	60da      	str	r2, [r3, #12]

		//Implement the code to enable ODD parity
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PS);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000972:	60da      	str	r2, [r3, #12]

	}

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	pUSARTHandle->pUSARTx->CR2 |= (pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7b1b      	ldrb	r3, [r3, #12]
 800097e:	031b      	lsls	r3, r3, #12
 8000980:	4619      	mov	r1, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	611a      	str	r2, [r3, #16]


	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7bdb      	ldrb	r3, [r3, #15]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d108      	bne.n	80009a4 <USART_Init+0xf8>
	{
		//Implement the code to enable CTS flow control
		pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_CTSE);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	e020      	b.n	80009e6 <USART_Init+0x13a>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7bdb      	ldrb	r3, [r3, #15]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d108      	bne.n	80009be <USART_Init+0x112>
	{
		//Implement the code to enable RTS flow control
		pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_RTSE);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	e013      	b.n	80009e6 <USART_Init+0x13a>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7bdb      	ldrb	r3, [r3, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d10f      	bne.n	80009e6 <USART_Init+0x13a>
	{
		//Implement the code to enable both CTS and RTS Flow control
		pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_CTSE);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009d4:	615a      	str	r2, [r3, #20]
		pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_RTSE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009e4:	615a      	str	r2, [r3, #20]
	}

	//Baudrate configuration
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4610      	mov	r0, r2
 80009f2:	f000 f883 	bl	8000afc <USART_SetBaudRate>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <USART_SendData>:

/*
 * Data Send and Receive
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e031      	b.n	8000a74 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000a10:	bf00      	nop
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f83e 	bl	8000a9a <USART_GetFlagStatus>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f6      	beq.n	8000a12 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	7b5b      	ldrb	r3, [r3, #13]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d118      	bne.n	8000a5e <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a3e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	7b9b      	ldrb	r3, [r3, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e00b      	b.n	8000a6e <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	e007      	b.n	8000a6e <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3c9      	bcc.n	8000a10 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f808 	bl	8000a9a <USART_GetFlagStatus>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f6      	beq.n	8000a7e <USART_SendData+0x80>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <USART_GetFlagStatus>:
/*
 * Other Peripheral Control APIs
 */

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <USART_GetFlagStatus+0x1e>
	}
	else
	{
		return RESET;
 8000ab6:	2300      	movs	r3, #0
	}
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <USART_PeripheralControl>:
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
	pUSARTx->SR &= ~(StatusFlagName);
}
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d106      	bne.n	8000ae4 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1<< USART_CR1_UE);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1<< USART_CR1_UE);
	}
}
 8000ae2:	e005      	b.n	8000af0 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1<< USART_CR1_UE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60da      	str	r2, [r3, #12]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <USART_SetBaudRate>:
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;


  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <USART_SetBaudRate+0xcc>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d003      	beq.n	8000b16 <USART_SetBaudRate+0x1a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <USART_SetBaudRate+0xd0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d103      	bne.n	8000b1e <USART_SetBaudRate+0x22>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b16:	f7ff fe17 	bl	8000748 <RCC_GetPCLK2Value>
 8000b1a:	6178      	str	r0, [r7, #20]
 8000b1c:	e002      	b.n	8000b24 <USART_SetBaudRate+0x28>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000b1e:	f7ff fdbf 	bl	80006a0 <RCC_GetPCLK1Value>
 8000b22:	6178      	str	r0, [r7, #20]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d009      	beq.n	8000b44 <USART_SetBaudRate+0x48>
  {
	  //OVER8 = 1 , over sampling by 8
	  //x100 is to preserve 2 dp for the fractional part
	  usartdiv = ((PCLKx) / (8 *BaudRate))*100;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	2264      	movs	r2, #100	; 0x64
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	e008      	b.n	8000b56 <USART_SetBaudRate+0x5a>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((PCLKx) / (16 *BaudRate))*100;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	fb02 f303 	mul.w	r3, r2, r3
 8000b54:	613b      	str	r3, [r7, #16]
  }

  //Calculate the Mantissa part
  //Division by 100 removes added dp
  //C division floors result
  M_part = usartdiv/100;
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <USART_SetBaudRate+0xd4>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	60bb      	str	r3, [r7, #8]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  pUSARTx->BRR |= M_part << 4;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	60fb      	str	r3, [r7, #12]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00a      	beq.n	8000ba0 <USART_SetBaudRate+0xa4>
   {
	  //OVER8 = 1 , over sampling by 8
	  //Addition of 50 allows for proper round as c floors
	  //bit masking is used so only last 3 bits sent
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	3332      	adds	r3, #50	; 0x32
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <USART_SetBaudRate+0xd4>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	e009      	b.n	8000bb4 <USART_SetBaudRate+0xb8>
   }else
   {
	   //over sampling by 16
	   //Addition of 50 allows for proper round as c floors
	   	  //bit masking is used so only last 4 bits sent
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	3332      	adds	r3, #50	; 0x32
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <USART_SetBaudRate+0xd4>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	095b      	lsrs	r3, r3, #5
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	60fb      	str	r3, [r7, #12]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  pUSARTx->BRR |= F_part;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]

}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40011400 	.word	0x40011400
 8000bd0:	51eb851f 	.word	0x51eb851f

08000bd4 <delay>:
#include <stdio.h>
#include <string.h>

char msg[1024]= "UART TxTesting...\n\r";
void delay(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e002      	b.n	8000be6 <delay+0x12>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <delay+0x28>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d9f8      	bls.n	8000be0 <delay+0xc>
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	0003d08f 	.word	0x0003d08f

08000c00 <Btn_GPIO_Inits>:
void Btn_GPIO_Inits(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <Btn_GPIO_Inits+0x2c>)
 8000c08:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c12:	2302      	movs	r3, #2
 8000c14:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c16:	2300      	movs	r3, #0
 8000c18:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIOBtn);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb9b 	bl	8000358 <GPIO_Init>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020000 	.word	0x40020000

08000c30 <USART2_GPIO_Inits>:

void USART2_GPIO_Inits(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
	//GPIO pins must be configured for AF mode
	GPIO_Handle_t USARTPins;
	USARTPins.pGPIOx = GPIOA;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <USART2_GPIO_Inits+0x40>)
 8000c38:	607b      	str	r3, [r7, #4]
	USARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	737b      	strb	r3, [r7, #13]
	USARTPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c42:	2300      	movs	r3, #0
 8000c44:	733b      	strb	r3, [r7, #12]
	USARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c46:	2301      	movs	r3, #1
 8000c48:	72fb      	strb	r3, [r7, #11]
	USARTPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	72bb      	strb	r3, [r7, #10]

	//Tx
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fb7f 	bl	8000358 <GPIO_Init>

	//Rx
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb79 	bl	8000358 <GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020000 	.word	0x40020000

08000c74 <USART2_Inits>:

USART_Handle_t usart2_handle;

void USART2_Inits(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <USART2_Inits+0x40>)
 8000c7c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <USART2_Inits+0x3c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <USART2_Inits+0x3c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <USART2_Inits+0x3c>)
 8000ca6:	f7ff fe01 	bl	80008ac <USART_Init>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000043c 	.word	0x2000043c
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <main>:




int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	Btn_GPIO_Inits();
 8000cbc:	f7ff ffa0 	bl	8000c00 <Btn_GPIO_Inits>
	USART2_GPIO_Inits();
 8000cc0:	f7ff ffb6 	bl	8000c30 <USART2_GPIO_Inits>
	USART2_Inits();
 8000cc4:	f7ff ffd6 	bl	8000c74 <USART2_Inits>
	USART_PeripheralControl(USART2, ENABLE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <main+0x40>)
 8000ccc:	f7ff fefa 	bl	8000ac4 <USART_PeripheralControl>

	while(1)
	{

		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000cd0:	bf00      	nop
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <main+0x44>)
 8000cd6:	f7ff fccd 	bl	8000674 <GPIO_ReadFromInputPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f8      	beq.n	8000cd2 <main+0x1a>
		delay();
 8000ce0:	f7ff ff78 	bl	8000bd4 <delay>
		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <main+0x48>)
 8000ce6:	f7ff fa7f 	bl	80001e8 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4904      	ldr	r1, [pc, #16]	; (8000d00 <main+0x48>)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <main+0x4c>)
 8000cf2:	f7ff fe84 	bl	80009fe <USART_SendData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000cf6:	e7eb      	b.n	8000cd0 <main+0x18>
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	20000020 	.word	0x20000020
 8000d04:	2000043c 	.word	0x2000043c

08000d08 <__libc_init_array>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	4d0d      	ldr	r5, [pc, #52]	; (8000d40 <__libc_init_array+0x38>)
 8000d0c:	4c0d      	ldr	r4, [pc, #52]	; (8000d44 <__libc_init_array+0x3c>)
 8000d0e:	1b64      	subs	r4, r4, r5
 8000d10:	10a4      	asrs	r4, r4, #2
 8000d12:	2600      	movs	r6, #0
 8000d14:	42a6      	cmp	r6, r4
 8000d16:	d109      	bne.n	8000d2c <__libc_init_array+0x24>
 8000d18:	4d0b      	ldr	r5, [pc, #44]	; (8000d48 <__libc_init_array+0x40>)
 8000d1a:	4c0c      	ldr	r4, [pc, #48]	; (8000d4c <__libc_init_array+0x44>)
 8000d1c:	f000 f818 	bl	8000d50 <_init>
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	2600      	movs	r6, #0
 8000d26:	42a6      	cmp	r6, r4
 8000d28:	d105      	bne.n	8000d36 <__libc_init_array+0x2e>
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d30:	4798      	blx	r3
 8000d32:	3601      	adds	r6, #1
 8000d34:	e7ee      	b.n	8000d14 <__libc_init_array+0xc>
 8000d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3a:	4798      	blx	r3
 8000d3c:	3601      	adds	r6, #1
 8000d3e:	e7f2      	b.n	8000d26 <__libc_init_array+0x1e>
 8000d40:	08000d68 	.word	0x08000d68
 8000d44:	08000d68 	.word	0x08000d68
 8000d48:	08000d68 	.word	0x08000d68
 8000d4c:	08000d6c 	.word	0x08000d6c

08000d50 <_init>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr

08000d5c <_fini>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr
