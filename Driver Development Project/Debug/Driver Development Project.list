
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002c28  08002c28  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c28  08002c28  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000006c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ec9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c09  00000000  00000000  00022f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00023b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000328  00000000  00000000  00023f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dc1  00000000  00000000  00024260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f51  00000000  00000000  00028021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cea0  00000000  00000000  0002bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00038e12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015f8  00000000  00000000  00038e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002aa0 	.word	0x08002aa0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002aa0 	.word	0x08002aa0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <ITM_SendChar+0x48>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <ITM_SendChar+0x48>)
 80002a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <ITM_SendChar+0x4c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <ITM_SendChar+0x4c>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002b2:	bf00      	nop
 80002b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f8      	beq.n	80002b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	6013      	str	r3, [r2, #0]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000edfc 	.word	0xe000edfc
 80002dc:	e0000e00 	.word	0xe0000e00

080002e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	e00a      	b.n	8000308 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002f2:	f3af 8000 	nop.w
 80002f6:	4601      	mov	r1, r0
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	60ba      	str	r2, [r7, #8]
 80002fe:	b2ca      	uxtb	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf0      	blt.n	80002f2 <_read+0x12>
	}

return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b086      	sub	sp, #24
 800031e:	af00      	add	r7, sp, #0
 8000320:	60f8      	str	r0, [r7, #12]
 8000322:	60b9      	str	r1, [r7, #8]
 8000324:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	e009      	b.n	8000340 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	60ba      	str	r2, [r7, #8]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffab 	bl	8000290 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	429a      	cmp	r2, r3
 8000346:	dbf1      	blt.n	800032c <_write+0x12>
	}
	return len;
 8000348:	687b      	ldr	r3, [r7, #4]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <_close>:

int _close(int file)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
	return -1;
 800035a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037a:	605a      	str	r2, [r3, #4]
	return 0;
 800037c:	2300      	movs	r3, #0
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <_isatty>:

int _isatty(int file)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
	return 1;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
	return 0;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <_sbrk+0x5c>)
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <_sbrk+0x60>)
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <_sbrk+0x64>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <_sbrk+0x68>)
 80003dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <_sbrk+0x64>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d207      	bcs.n	80003fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003ec:	f001 fb22 	bl	8001a34 <__errno>
 80003f0:	4603      	mov	r3, r0
 80003f2:	220c      	movs	r2, #12
 80003f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	e009      	b.n	8000410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <_sbrk+0x64>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <_sbrk+0x64>)
 800040c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040e:	68fb      	ldr	r3, [r7, #12]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20020000 	.word	0x20020000
 800041c:	00000400 	.word	0x00000400
 8000420:	200000a0 	.word	0x200000a0
 8000424:	200000f0 	.word	0x200000f0

08000428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800042c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490d      	ldr	r1, [pc, #52]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000456:	f001 faf3 	bl	8001a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f000 fc8f 	bl	8000d7c <main>

0800045e <LoopForever>:

LoopForever:
    b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   r0, =_estack
 8000460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800046c:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 8000470:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000474:	200000f0 	.word	0x200000f0

08000478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>
	...

0800047c <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);

I2C_Handle_t g_ds1307I2CHandle;

uint8_t ds1307_init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	//initalize the i2c pins
	ds1307_i2c_pin_config();
 8000482:	f000 f90f 	bl	80006a4 <ds1307_i2c_pin_config>

	//iniatlize the i2c peripheals
	ds1307_i2c_config();
 8000486:	f000 f949 	bl	800071c <ds1307_i2c_config>

	//enable the i2c peripheal
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800048a:	2101      	movs	r1, #1
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <ds1307_init+0x38>)
 800048e:	f001 fa30 	bl	80018f2 <I2C_PeripheralControl>

	//Make clock halt = 0 in DS peripheal
	ds1307_write(0x00,DS1307_ADDR_SEC);
 8000492:	2100      	movs	r1, #0
 8000494:	2000      	movs	r0, #0
 8000496:	f000 f957 	bl	8000748 <ds1307_write>

	//Read back the clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800049a:	2000      	movs	r0, #0
 800049c:	f000 f970 	bl	8000780 <ds1307_read>
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]

	return (clock_state >> 7);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	09db      	lsrs	r3, r3, #7
 80004a8:	b2db      	uxtb	r3, r3

	//reteruns 1 clock not enabled
	//return 1 clock enabled

}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40005400 	.word	0x40005400

080004b8 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f979 	bl	80007bc <binary_to_bcd>
 80004ca:	4603      	mov	r3, r0
 80004cc:	73bb      	strb	r3, [r7, #14]
	//Ensure bit 7 is cleared to not turn of clock
	seconds &= ~(1<<7);
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004d4:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds,DS1307_ADDR_SEC);
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f934 	bl	8000748 <ds1307_write>

	//send minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f969 	bl	80007bc <binary_to_bcd>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f92a 	bl	8000748 <ds1307_write>

	//set hours
	hrs = binary_to_bcd(rtc_time->hours);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f95f 	bl	80007bc <binary_to_bcd>
 80004fe:	4603      	mov	r3, r0
 8000500:	73fb      	strb	r3, [r7, #15]
	//Ensure bit 7 is cleared to not turn of clock
	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	78db      	ldrb	r3, [r3, #3]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d104      	bne.n	8000514 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e011      	b.n	8000538 <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051a:	73fb      	strb	r3, [r7, #15]
		hrs =(rtc_time->time_format ==TIME_FORMAT_12HRS_PM ) ? hrs | (1<<5) : hrs & ~(1<<5);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	78db      	ldrb	r3, [r3, #3]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d104      	bne.n	800052e <ds1307_set_current_time+0x76>
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	b2db      	uxtb	r3, r3
 800052c:	e003      	b.n	8000536 <ds1307_set_current_time+0x7e>
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	f023 0320 	bic.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2102      	movs	r1, #2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f903 	bl	8000748 <ds1307_write>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <ds1307_get_current_time>:
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b084      	sub	sp, #16
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f914 	bl	8000780 <ds1307_read>
 8000558:	4603      	mov	r3, r0
 800055a:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000562:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f954 	bl	8000814 <bcd_to_binary>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f903 	bl	8000780 <ds1307_read>
 800057a:	4603      	mov	r3, r0
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f949 	bl	8000814 <bcd_to_binary>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800058a:	2002      	movs	r0, #2
 800058c:	f000 f8f8 	bl	8000780 <ds1307_read>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1<<6))
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00f      	beq.n	80005be <ds1307_get_current_time+0x74>
	{
		//12hr format
		//ever gives 12hr am (0) or 12hr pm (1)
		rtc_time->time_format = !((hrs & (1<< 5)) == 0) ;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	70da      	strb	r2, [r3, #3]
		//clear 6th and 5th position
		hrs &= ~(0x3 << 5);
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e002      	b.n	80005c4 <ds1307_get_current_time+0x7a>
	}
	else
	{
		//24hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2202      	movs	r2, #2
 80005c2:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f924 	bl	8000814 <bcd_to_binary>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	709a      	strb	r2, [r3, #2]
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t * rtc_date)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8e7 	bl	80007bc <binary_to_bcd>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f8a8 	bl	8000748 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f8dd 	bl	80007bc <binary_to_bcd>
 8000602:	4603      	mov	r3, r0
 8000604:	2106      	movs	r1, #6
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f89e 	bl	8000748 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f8d3 	bl	80007bc <binary_to_bcd>
 8000616:	4603      	mov	r3, r0
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f894 	bl	8000748 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f8c9 	bl	80007bc <binary_to_bcd>
 800062a:	4603      	mov	r3, r0
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f88a 	bl	8000748 <ds1307_write>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ds1307_get_current_date>:
void ds1307_get_current_date(RTC_date_t * rtc_date)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000644:	2004      	movs	r0, #4
 8000646:	f000 f89b 	bl	8000780 <ds1307_read>
 800064a:	4603      	mov	r3, r0
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8e1 	bl	8000814 <bcd_to_binary>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	701a      	strb	r2, [r3, #0]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800065a:	2006      	movs	r0, #6
 800065c:	f000 f890 	bl	8000780 <ds1307_read>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f8d6 	bl	8000814 <bcd_to_binary>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	709a      	strb	r2, [r3, #2]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000670:	2005      	movs	r0, #5
 8000672:	f000 f885 	bl	8000780 <ds1307_read>
 8000676:	4603      	mov	r3, r0
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f8cb 	bl	8000814 <bcd_to_binary>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000686:	2003      	movs	r0, #3
 8000688:	f000 f87a 	bl	8000780 <ds1307_read>
 800068c:	4603      	mov	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f8c0 	bl	8000814 <bcd_to_binary>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	70da      	strb	r2, [r3, #3]
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	220c      	movs	r2, #12
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f9e8 	bl	8001a88 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80006b8:	463b      	mov	r3, r7
 80006ba:	220c      	movs	r2, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9e2 	bl	8001a88 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <ds1307_i2c_pin_config+0x74>)
 80006c6:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode =GPIO_MODE_ALTFN;
 80006cc:	2302      	movs	r3, #2
 80006ce:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80006d0:	2307      	movs	r3, #7
 80006d2:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80006d4:	2301      	movs	r3, #1
 80006d6:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80006d8:	2301      	movs	r3, #1
 80006da:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed =GPIO_SPEED_FAST;
 80006dc:	2302      	movs	r3, #2
 80006de:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fcf1 	bl	80010cc <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <ds1307_i2c_pin_config+0x74>)
 80006ec:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode =GPIO_MODE_ALTFN;
 80006f2:	2302      	movs	r3, #2
 80006f4:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80006f6:	2306      	movs	r3, #6
 80006f8:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80006fa:	2301      	movs	r3, #1
 80006fc:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80006fe:	2301      	movs	r3, #1
 8000700:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed =GPIO_SPEED_FAST;
 8000702:	2302      	movs	r3, #2
 8000704:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000706:	463b      	mov	r3, r7
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fcdf 	bl	80010cc <GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020400 	.word	0x40020400

0800071c <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <ds1307_i2c_config+0x20>)
 8000722:	4a07      	ldr	r2, [pc, #28]	; (8000740 <ds1307_i2c_config+0x24>)
 8000724:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <ds1307_i2c_config+0x20>)
 8000728:	2201      	movs	r2, #1
 800072a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <ds1307_i2c_config+0x20>)
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <ds1307_i2c_config+0x28>)
 8000730:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2CHandle);
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <ds1307_i2c_config+0x20>)
 8000734:	f000 ff3c 	bl	80015b0 <I2C_Init>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000a4 	.word	0x200000a4
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
	//Sends two bytes of data to enable the clock
	uint8_t tx[2];
	tx[0]=reg_addr;
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000760:	f107 010c 	add.w	r1, r7, #12
 8000764:	2300      	movs	r3, #0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2368      	movs	r3, #104	; 0x68
 800076a:	2202      	movs	r2, #2
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <ds1307_write+0x34>)
 800076e:	f000 ffcf 	bl	8001710 <I2C_MasterSendData>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a4 	.word	0x200000a4

08000780 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//Data will be read from current position of pointer so data write is used to set pointer position
	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 1);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	2301      	movs	r3, #1
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2368      	movs	r3, #104	; 0x68
 8000792:	2201      	movs	r2, #1
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <ds1307_read+0x38>)
 8000796:	f000 ffbb 	bl	8001710 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800079a:	f107 010f 	add.w	r1, r7, #15
 800079e:	2300      	movs	r3, #0
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2368      	movs	r3, #104	; 0x68
 80007a4:	2201      	movs	r2, #1
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <ds1307_read+0x38>)
 80007a8:	f001 f815 	bl	80017d6 <I2C_MasterReceiveData>

	return data;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000a4 	.word	0x200000a4

080007bc <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	uint8_t tens, ones,bcd;
	//If only 1s bcd value is the same as binary
	bcd = value;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	d918      	bls.n	8000802 <binary_to_bcd+0x46>
	{
		tens = value/10;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <binary_to_bcd+0x54>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	73bb      	strb	r3, [r7, #14]
		ones = value %10;
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <binary_to_bcd+0x54>)
 80007e0:	fba3 1302 	umull	r1, r3, r3, r2
 80007e4:	08d9      	lsrs	r1, r3, #3
 80007e6:	460b      	mov	r3, r1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((tens<<4)|ones );
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	cccccccd 	.word	0xcccccccd

08000814 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	//This function gets the amount of tens and ones
	uint8_t tens, ones,binary;
	tens = (value >>4);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	091b      	lsrs	r3, r3, #4
 8000822:	73fb      	strb	r3, [r7, #15]
	ones = (value & 0x0F);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	73bb      	strb	r3, [r7, #14]
	binary = tens*10 + ones;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	461a      	mov	r2, r3
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	4413      	add	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	4413      	add	r3, r2
 800083c:	737b      	strb	r3, [r7, #13]

	return (uint8_t)binary;
 800083e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <lcd_send_command+0x40>)
 800085c:	f000 fdc4 	bl	80013e8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2101      	movs	r1, #1
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <lcd_send_command+0x40>)
 8000866:	f000 fdbf 	bl	80013e8 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f8cd 	bl	8000a10 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f8c6 	bl	8000a10 <write_4_bits>

}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40020c00 	.word	0x40020c00

08000890 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2100      	movs	r1, #0
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <lcd_print_char+0x40>)
 80008a0:	f000 fda2 	bl	80013e8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <lcd_print_char+0x40>)
 80008aa:	f000 fd9d 	bl	80013e8 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f8ab 	bl	8000a10 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 030f 	and.w	r3, r3, #15
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f8a4 	bl	8000a10 <write_4_bits>

}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffd3 	bl	8000890 <lcd_print_char>
      }
      while (*message != '\0');
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f4      	bne.n	80008dc <lcd_print_string+0x8>

}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <lcd_init>:


void lcd_init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <lcd_init+0x110>)
 8000904:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000906:	2301      	movs	r3, #1
 8000908:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800090a:	2300      	movs	r3, #0
 800090c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800090e:	2300      	movs	r3, #0
 8000910:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000912:	2300      	movs	r3, #0
 8000914:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000916:	2302      	movs	r3, #2
 8000918:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fbd5 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000922:	2301      	movs	r3, #1
 8000924:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fbcf 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800092e:	2302      	movs	r3, #2
 8000930:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fbc9 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800093a:	2303      	movs	r3, #3
 800093c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fbc3 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000946:	2304      	movs	r3, #4
 8000948:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fbbd 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000952:	2305      	movs	r3, #5
 8000954:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fbb7 	bl	80010cc <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800095e:	2306      	movs	r3, #6
 8000960:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fbb1 	bl	80010cc <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <lcd_init+0x110>)
 8000970:	f000 fd3a 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	4824      	ldr	r0, [pc, #144]	; (8000a0c <lcd_init+0x110>)
 800097a:	f000 fd35 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	4822      	ldr	r0, [pc, #136]	; (8000a0c <lcd_init+0x110>)
 8000984:	f000 fd30 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2103      	movs	r1, #3
 800098c:	481f      	ldr	r0, [pc, #124]	; (8000a0c <lcd_init+0x110>)
 800098e:	f000 fd2b 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2104      	movs	r1, #4
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <lcd_init+0x110>)
 8000998:	f000 fd26 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2105      	movs	r1, #5
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <lcd_init+0x110>)
 80009a2:	f000 fd21 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2106      	movs	r1, #6
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <lcd_init+0x110>)
 80009ac:	f000 fd1c 	bl	80013e8 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80009b0:	2028      	movs	r0, #40	; 0x28
 80009b2:	f000 f8b7 	bl	8000b24 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <lcd_init+0x110>)
 80009bc:	f000 fd14 	bl	80013e8 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <lcd_init+0x110>)
 80009c6:	f000 fd0f 	bl	80013e8 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f820 	bl	8000a10 <write_4_bits>

	mdelay(5);
 80009d0:	2005      	movs	r0, #5
 80009d2:	f000 f8a7 	bl	8000b24 <mdelay>

	write_4_bits(0x3);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f81a 	bl	8000a10 <write_4_bits>

	udelay(150);
 80009dc:	2096      	movs	r0, #150	; 0x96
 80009de:	f000 f8ba 	bl	8000b56 <udelay>

	write_4_bits(0x3);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f000 f814 	bl	8000a10 <write_4_bits>
	write_4_bits(0x2);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 f811 	bl	8000a10 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80009ee:	2028      	movs	r0, #40	; 0x28
 80009f0:	f7ff ff2c 	bl	800084c <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 80009f4:	200e      	movs	r0, #14
 80009f6:	f7ff ff29 	bl	800084c <lcd_send_command>

	lcd_display_clear();
 80009fa:	f000 f841 	bl	8000a80 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 80009fe:	2006      	movs	r0, #6
 8000a00:	f7ff ff24 	bl	800084c <lcd_send_command>



}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	2103      	movs	r1, #3
 8000a26:	4815      	ldr	r0, [pc, #84]	; (8000a7c <write_4_bits+0x6c>)
 8000a28:	f000 fcde 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	085b      	lsrs	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <write_4_bits+0x6c>)
 8000a3e:	f000 fcd3 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2105      	movs	r1, #5
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <write_4_bits+0x6c>)
 8000a54:	f000 fcc8 	bl	80013e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	2106      	movs	r1, #6
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <write_4_bits+0x6c>)
 8000a6a:	f000 fcbd 	bl	80013e8 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000a6e:	f000 f843 	bl	8000af8 <lcd_enable>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fee1 	bl	800084c <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 f84a 	bl	8000b24 <mdelay>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fed7 	bl	800084c <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 f840 	bl	8000b24 <mdelay>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
  column--;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	71bb      	strb	r3, [r7, #6]
  switch (row)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d002      	beq.n	8000aca <lcd_set_cursor+0x22>
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d009      	beq.n	8000adc <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000ac8:	e011      	b.n	8000aee <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ad0:	71bb      	strb	r3, [r7, #6]
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff feb9 	bl	800084c <lcd_send_command>
      break;
 8000ada:	e008      	b.n	8000aee <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000ae2:	71bb      	strb	r3, [r7, #6]
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff feb0 	bl	800084c <lcd_send_command>
      break;
 8000aec:	bf00      	nop
  }
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <lcd_enable>:



static void lcd_enable(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2102      	movs	r1, #2
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <lcd_enable+0x28>)
 8000b02:	f000 fc71 	bl	80013e8 <GPIO_WriteToOutputPin>
	udelay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f000 f825 	bl	8000b56 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <lcd_enable+0x28>)
 8000b12:	f000 fc69 	bl	80013e8 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 f81d 	bl	8000b56 <udelay>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e002      	b.n	8000b38 <mdelay+0x14>
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3301      	adds	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b3e:	fb02 f303 	mul.w	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f4      	bcc.n	8000b32 <mdelay+0xe>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <udelay>:

static void udelay(uint32_t cnt)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e002      	b.n	8000b6a <udelay+0x14>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3f8      	bcc.n	8000b64 <udelay+0xe>
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <init_systick_timer+0x60>)
 8000b8a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <init_systick_timer+0x64>)
 8000b8e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <init_systick_timer+0x68>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f043 0202 	orr.w	r2, r3, #2
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f043 0204 	orr.w	r2, r3, #4
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f043 0201 	orr.w	r2, r3, #1
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	601a      	str	r2, [r3, #0]

}
 8000bd2:	bf00      	nop
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e014 	.word	0xe000e014
 8000be4:	e000e010 	.word	0xe000e010
 8000be8:	00f42400 	.word	0x00f42400

08000bec <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8000bec:	b4b0      	push	{r4, r5, r7}
 8000bee:	b08b      	sub	sp, #44	; 0x2c
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <get_day_of_week+0x38>)
 8000bf8:	f107 040c 	add.w	r4, r7, #12
 8000bfc:	461d      	mov	r5, r3
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3328      	adds	r3, #40	; 0x28
 8000c12:	443b      	add	r3, r7
 8000c14:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	372c      	adds	r7, #44	; 0x2c
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bcb0      	pop	{r4, r5, r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	08002afc 	.word	0x08002afc

08000c28 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b09      	cmp	r3, #9
 8000c38:	d809      	bhi.n	8000c4e <number_to_string+0x26>
		buf[0] = '0';
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2230      	movs	r2, #48	; 0x30
 8000c3e:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	3230      	adds	r2, #48	; 0x30
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 8000c4c:	e01f      	b.n	8000c8e <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d91c      	bls.n	8000c8e <number_to_string+0x66>
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b62      	cmp	r3, #98	; 0x62
 8000c58:	d819      	bhi.n	8000c8e <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <number_to_string+0x74>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3330      	adds	r3, #48	; 0x30
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <number_to_string+0x74>)
 8000c72:	fba3 1302 	umull	r1, r3, r3, r2
 8000c76:	08d9      	lsrs	r1, r3, #3
 8000c78:	460b      	mov	r3, r1
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	3230      	adds	r2, #48	; 0x30
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	cccccccd 	.word	0xcccccccd

08000ca0 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <time_to_string+0x48>)
 8000caa:	223a      	movs	r2, #58	; 0x3a
 8000cac:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <time_to_string+0x48>)
 8000cb0:	223a      	movs	r2, #58	; 0x3a
 8000cb2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <time_to_string+0x48>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffb4 	bl	8000c28 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <time_to_string+0x4c>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffae 	bl	8000c28 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <time_to_string+0x50>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffa8 	bl	8000c28 <number_to_string>

	buf[8] = '\0';
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <time_to_string+0x48>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]

	return buf;
 8000cde:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <time_to_string+0x48>)

}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000cc 	.word	0x200000cc
 8000cec:	200000cf 	.word	0x200000cf
 8000cf0:	200000d2 	.word	0x200000d2

08000cf4 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <date_to_string+0x48>)
 8000cfe:	222f      	movs	r2, #47	; 0x2f
 8000d00:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <date_to_string+0x48>)
 8000d04:	222f      	movs	r2, #47	; 0x2f
 8000d06:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	490b      	ldr	r1, [pc, #44]	; (8000d3c <date_to_string+0x48>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff8a 	bl	8000c28 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <date_to_string+0x4c>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff84 	bl	8000c28 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <date_to_string+0x50>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff7e 	bl	8000c28 <number_to_string>

	buf[8]= '\0';
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <date_to_string+0x48>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	721a      	strb	r2, [r3, #8]

	return buf;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <date_to_string+0x48>)

}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d8 	.word	0x200000d8
 8000d40:	200000db 	.word	0x200000db
 8000d44:	200000de 	.word	0x200000de

08000d48 <mdelay>:

static void mdelay(uint32_t cnt)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e002      	b.n	8000d5c <mdelay+0x14>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3f4      	bcc.n	8000d56 <mdelay+0xe>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <main>:

int main(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;


	printf("RTC test\n");
 8000d82:	4847      	ldr	r0, [pc, #284]	; (8000ea0 <main+0x124>)
 8000d84:	f000 ff0e 	bl	8001ba4 <puts>

	lcd_init();
 8000d88:	f7ff fdb8 	bl	80008fc <lcd_init>

	lcd_print_string("RTC Test...");
 8000d8c:	4845      	ldr	r0, [pc, #276]	; (8000ea4 <main+0x128>)
 8000d8e:	f7ff fda1 	bl	80008d4 <lcd_print_string>


	mdelay(2000);
 8000d92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d96:	f7ff ffd7 	bl	8000d48 <mdelay>

	lcd_display_clear();
 8000d9a:	f7ff fe71 	bl	8000a80 <lcd_display_clear>
	lcd_display_return_home();
 8000d9e:	f7ff fe79 	bl	8000a94 <lcd_display_return_home>


	if(ds1307_init()){
 8000da2:	f7ff fb6b 	bl	800047c <ds1307_init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <main+0x38>
		printf("RTC init has failed\n");
 8000dac:	483e      	ldr	r0, [pc, #248]	; (8000ea8 <main+0x12c>)
 8000dae:	f000 fef9 	bl	8001ba4 <puts>
		while(1);
 8000db2:	e7fe      	b.n	8000db2 <main+0x36>
	}

	init_systick_timer(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fee3 	bl	8000b80 <init_systick_timer>

	current_date.day = FRIDAY;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000dc6:	2315      	movs	r3, #21
 8000dc8:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000dca:	230b      	movs	r3, #11
 8000dcc:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000dce:	233b      	movs	r3, #59	; 0x3b
 8000dd0:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000dd2:	231e      	movs	r3, #30
 8000dd4:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fbfd 	bl	80005dc <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb66 	bl	80004b8 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fbaa 	bl	800054a <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fc1f 	bl	800063c <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d01e      	beq.n	8000e42 <main+0xc6>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <main+0x92>
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <main+0x130>)
 8000e0c:	e000      	b.n	8000e10 <main+0x94>
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <main+0x134>)
 8000e10:	60fb      	str	r3, [r7, #12]

		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff42 	bl	8000ca0 <time_to_string>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4619      	mov	r1, r3
 8000e22:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <main+0x138>)
 8000e24:	f000 fe38 	bl	8001a98 <iprintf>

		lcd_print_string(time_to_string(&current_time));
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff37 	bl	8000ca0 <time_to_string>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd4d 	bl	80008d4 <lcd_print_string>
		lcd_print_string(am_pm);
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff fd4a 	bl	80008d4 <lcd_print_string>
 8000e40:	e012      	b.n	8000e68 <main+0xec>

	}else{

		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff2a 	bl	8000ca0 <time_to_string>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <main+0x13c>)
 8000e52:	f000 fe21 	bl	8001a98 <iprintf>

		lcd_print_string(time_to_string(&current_time));
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff20 	bl	8000ca0 <time_to_string>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd36 	bl	80008d4 <lcd_print_string>

	}


	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff42 	bl	8000cf4 <date_to_string>
 8000e70:	4604      	mov	r4, r0
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff feb9 	bl	8000bec <get_day_of_week>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4621      	mov	r1, r4
 8000e80:	480e      	ldr	r0, [pc, #56]	; (8000ebc <main+0x140>)
 8000e82:	f000 fe09 	bl	8001a98 <iprintf>

	lcd_set_cursor(2, 1);
 8000e86:	2101      	movs	r1, #1
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fe0d 	bl	8000aa8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff2f 	bl	8000cf4 <date_to_string>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fd1b 	bl	80008d4 <lcd_print_string>



	while(1);
 8000e9e:	e7fe      	b.n	8000e9e <main+0x122>
 8000ea0:	08002b18 	.word	0x08002b18
 8000ea4:	08002b24 	.word	0x08002b24
 8000ea8:	08002b30 	.word	0x08002b30
 8000eac:	08002b44 	.word	0x08002b44
 8000eb0:	08002b48 	.word	0x08002b48
 8000eb4:	08002b4c 	.word	0x08002b4c
 8000eb8:	08002b64 	.word	0x08002b64
 8000ebc:	08002b78 	.word	0x08002b78

08000ec0 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb3d 	bl	800054a <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d022      	beq.n	8000f1c <SysTick_Handler+0x5c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SysTick_Handler+0x20>
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <SysTick_Handler+0xec>)
 8000ede:	e000      	b.n	8000ee2 <SysTick_Handler+0x22>
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <SysTick_Handler+0xf0>)
 8000ee2:	60fb      	str	r3, [r7, #12]

		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fed9 	bl	8000ca0 <time_to_string>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <SysTick_Handler+0xf4>)
 8000ef6:	f000 fdcf 	bl	8001a98 <iprintf>

		lcd_set_cursor(1, 1);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fdd3 	bl	8000aa8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff feca 	bl	8000ca0 <time_to_string>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fce0 	bl	80008d4 <lcd_print_string>
		lcd_print_string(am_pm);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fcdd 	bl	80008d4 <lcd_print_string>
 8000f1a:	e016      	b.n	8000f4a <SysTick_Handler+0x8a>


	}else{

		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff febd 	bl	8000ca0 <time_to_string>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <SysTick_Handler+0xf8>)
 8000f2c:	f000 fdb4 	bl	8001a98 <iprintf>

		lcd_set_cursor(1, 1);
 8000f30:	2101      	movs	r1, #1
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fdb8 	bl	8000aa8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff feaf 	bl	8000ca0 <time_to_string>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fcc5 	bl	80008d4 <lcd_print_string>

	}

	ds1307_get_current_date(&current_date);
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb75 	bl	800063c <ds1307_get_current_date>


	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fecd 	bl	8000cf4 <date_to_string>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe44 	bl	8000bec <get_day_of_week>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <SysTick_Handler+0xfc>)
 8000f6c:	f000 fd94 	bl	8001a98 <iprintf>

	lcd_set_cursor(2, 1);
 8000f70:	2101      	movs	r1, #1
 8000f72:	2002      	movs	r0, #2
 8000f74:	f7ff fd98 	bl	8000aa8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff feba 	bl	8000cf4 <date_to_string>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fca6 	bl	80008d4 <lcd_print_string>
	lcd_print_char('<');
 8000f88:	203c      	movs	r0, #60	; 0x3c
 8000f8a:	f7ff fc81 	bl	8000890 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe2b 	bl	8000bec <get_day_of_week>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fc9b 	bl	80008d4 <lcd_print_string>
	lcd_print_char('>');
 8000f9e:	203e      	movs	r0, #62	; 0x3e
 8000fa0:	f7ff fc76 	bl	8000890 <lcd_print_char>



}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	08002b44 	.word	0x08002b44
 8000fb0:	08002b48 	.word	0x08002b48
 8000fb4:	08002b4c 	.word	0x08002b4c
 8000fb8:	08002b64 	.word	0x08002b64
 8000fbc:	08002b78 	.word	0x08002b78

08000fc0 <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d161      	bne.n	8001096 <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a33      	ldr	r2, [pc, #204]	; (80010a4 <GPIO_PeriClockControl+0xe4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d106      	bne.n	8000fe8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 8000fe6:	e056      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a30      	ldr	r2, [pc, #192]	; (80010ac <GPIO_PeriClockControl+0xec>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d106      	bne.n	8000ffe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ffc:	e04b      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <GPIO_PeriClockControl+0xf0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d106      	bne.n	8001014 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001012:	e040      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <GPIO_PeriClockControl+0xf4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d106      	bne.n	800102a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001028:	e035      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <GPIO_PeriClockControl+0xf8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d106      	bne.n	8001040 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800103e:	e02a      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <GPIO_PeriClockControl+0xfc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d106      	bne.n	8001056 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001054:	e01f      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <GPIO_PeriClockControl+0x100>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d106      	bne.n	800106c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
}
 800106a:	e014      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <GPIO_PeriClockControl+0x104>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d106      	bne.n	8001082 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800107a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001080:	e009      	b.n	8001096 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <GPIO_PeriClockControl+0x108>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d105      	bne.n	8001096 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <GPIO_PeriClockControl+0xe8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40022000 	.word	0x40022000

080010cc <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff70 	bl	8000fc0 <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d810      	bhi.n	800110a <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	4619      	mov	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e0d4      	b.n	80012b4 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d117      	bne.n	8001142 <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001112:	4b4e      	ldr	r3, [pc, #312]	; (800124c <GPIO_Init+0x180>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	7912      	ldrb	r2, [r2, #4]
 800111a:	4611      	mov	r1, r2
 800111c:	2201      	movs	r2, #1
 800111e:	408a      	lsls	r2, r1
 8001120:	4611      	mov	r1, r2
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <GPIO_Init+0x180>)
 8001124:	430b      	orrs	r3, r1
 8001126:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <GPIO_Init+0x180>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	7912      	ldrb	r2, [r2, #4]
 8001130:	4611      	mov	r1, r2
 8001132:	2201      	movs	r2, #1
 8001134:	408a      	lsls	r2, r1
 8001136:	43d2      	mvns	r2, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <GPIO_Init+0x180>)
 800113c:	400b      	ands	r3, r1
 800113e:	6093      	str	r3, [r2, #8]
 8001140:	e035      	b.n	80011ae <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d117      	bne.n	800117a <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800114a:	4b40      	ldr	r3, [pc, #256]	; (800124c <GPIO_Init+0x180>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7912      	ldrb	r2, [r2, #4]
 8001152:	4611      	mov	r1, r2
 8001154:	2201      	movs	r2, #1
 8001156:	408a      	lsls	r2, r1
 8001158:	4611      	mov	r1, r2
 800115a:	4a3c      	ldr	r2, [pc, #240]	; (800124c <GPIO_Init+0x180>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001160:	4b3a      	ldr	r3, [pc, #232]	; (800124c <GPIO_Init+0x180>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7912      	ldrb	r2, [r2, #4]
 8001168:	4611      	mov	r1, r2
 800116a:	2201      	movs	r2, #1
 800116c:	408a      	lsls	r2, r1
 800116e:	43d2      	mvns	r2, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <GPIO_Init+0x180>)
 8001174:	400b      	ands	r3, r1
 8001176:	60d3      	str	r3, [r2, #12]
 8001178:	e019      	b.n	80011ae <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	2b06      	cmp	r3, #6
 8001180:	d115      	bne.n	80011ae <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <GPIO_Init+0x180>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	7912      	ldrb	r2, [r2, #4]
 800118a:	4611      	mov	r1, r2
 800118c:	2201      	movs	r2, #1
 800118e:	408a      	lsls	r2, r1
 8001190:	4611      	mov	r1, r2
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <GPIO_Init+0x180>)
 8001194:	430b      	orrs	r3, r1
 8001196:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <GPIO_Init+0x180>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	7912      	ldrb	r2, [r2, #4]
 80011a0:	4611      	mov	r1, r2
 80011a2:	2201      	movs	r2, #1
 80011a4:	408a      	lsls	r2, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	4a28      	ldr	r2, [pc, #160]	; (800124c <GPIO_Init+0x180>)
 80011aa:	430b      	orrs	r3, r1
 80011ac:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <GPIO_Init+0x184>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <GPIO_Init+0x184>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	791b      	ldrb	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a20      	ldr	r2, [pc, #128]	; (8001254 <GPIO_Init+0x188>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d050      	beq.n	8001278 <GPIO_Init+0x1ac>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <GPIO_Init+0x18c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d032      	beq.n	8001246 <GPIO_Init+0x17a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <GPIO_Init+0x190>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d02b      	beq.n	8001242 <GPIO_Init+0x176>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <GPIO_Init+0x194>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d024      	beq.n	800123e <GPIO_Init+0x172>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <GPIO_Init+0x198>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01d      	beq.n	800123a <GPIO_Init+0x16e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <GPIO_Init+0x19c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d016      	beq.n	8001236 <GPIO_Init+0x16a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <GPIO_Init+0x1a0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00f      	beq.n	8001232 <GPIO_Init+0x166>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <GPIO_Init+0x1a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d008      	beq.n	800122e <GPIO_Init+0x162>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <GPIO_Init+0x1a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <GPIO_Init+0x15e>
 8001226:	2308      	movs	r3, #8
 8001228:	e027      	b.n	800127a <GPIO_Init+0x1ae>
 800122a:	2300      	movs	r3, #0
 800122c:	e025      	b.n	800127a <GPIO_Init+0x1ae>
 800122e:	2307      	movs	r3, #7
 8001230:	e023      	b.n	800127a <GPIO_Init+0x1ae>
 8001232:	2306      	movs	r3, #6
 8001234:	e021      	b.n	800127a <GPIO_Init+0x1ae>
 8001236:	2305      	movs	r3, #5
 8001238:	e01f      	b.n	800127a <GPIO_Init+0x1ae>
 800123a:	2304      	movs	r3, #4
 800123c:	e01d      	b.n	800127a <GPIO_Init+0x1ae>
 800123e:	2303      	movs	r3, #3
 8001240:	e01b      	b.n	800127a <GPIO_Init+0x1ae>
 8001242:	2302      	movs	r3, #2
 8001244:	e019      	b.n	800127a <GPIO_Init+0x1ae>
 8001246:	2301      	movs	r3, #1
 8001248:	e017      	b.n	800127a <GPIO_Init+0x1ae>
 800124a:	bf00      	nop
 800124c:	40013c00 	.word	0x40013c00
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40022000 	.word	0x40022000
 8001278:	2300      	movs	r3, #0
 800127a:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <GPIO_Init+0x314>)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3302      	adds	r3, #2
 8001282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001286:	7b79      	ldrb	r1, [r7, #13]
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4618      	mov	r0, r3
 8001292:	4953      	ldr	r1, [pc, #332]	; (80013e0 <GPIO_Init+0x314>)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4302      	orrs	r2, r0
 8001298:	3302      	adds	r3, #2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <GPIO_Init+0x318>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	7912      	ldrb	r2, [r2, #4]
 80012a6:	4611      	mov	r1, r2
 80012a8:	2201      	movs	r2, #1
 80012aa:	408a      	lsls	r2, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <GPIO_Init+0x318>)
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2103      	movs	r1, #3
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	799b      	ldrb	r3, [r3, #6]
 80012dc:	4619      	mov	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4619      	mov	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2103      	movs	r1, #3
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	400a      	ands	r2, r1
 800130e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	79db      	ldrb	r3, [r3, #7]
 800131a:	4619      	mov	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7a1b      	ldrb	r3, [r3, #8]
 8001358:	4619      	mov	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	4619      	mov	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	795b      	ldrb	r3, [r3, #5]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d131      	bne.n	80013d8 <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	7b3a      	ldrb	r2, [r7, #12]
 800138c:	3208      	adds	r2, #8
 800138e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	7b3a      	ldrb	r2, [r7, #12]
 80013a6:	4001      	ands	r1, r0
 80013a8:	3208      	adds	r2, #8
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	7b3a      	ldrb	r2, [r7, #12]
 80013b4:	3208      	adds	r2, #8
 80013b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a5b      	ldrb	r3, [r3, #9]
 80013be:	461a      	mov	r2, r3
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	7b3a      	ldrb	r2, [r7, #12]
 80013d0:	4301      	orrs	r1, r0
 80013d2:	3208      	adds	r2, #8
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <GPIO_WriteToOutputPin>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	4613      	mov	r3, r2
 80013f6:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 80013f8:	78bb      	ldrb	r3, [r7, #2]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d109      	bne.n	8001412 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to set the bit
		pGPIOx->ODR |= (1<< PinNumber);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	615a      	str	r2, [r3, #20]
	else
	{
		//clear the bit register
		pGPIOx->ODR |= ~(1<< PinNumber);
	}
}
 8001410:	e009      	b.n	8001426 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR |= ~(1<< PinNumber);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	43d2      	mvns	r2, r2
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	615a      	str	r2, [r3, #20]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );



static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_START);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
	//Slave address is 7 bits from 7:1. The first bit must be cleared as its r/w bit and we are wirting
	SlaveAddr <<= 1;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	611a      	str	r2, [r3, #16]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	//Slave address is 7 bits from 7:1. The first bit must be set as its r/w bit and we are readin
	SlaveAddr <<= 1;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <I2C_ClearADDRFlag>:
	}

}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2CHandle->pI2Cx->SR1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	60fb      	str	r3, [r7, #12]
	//check device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01f      	beq.n	8001508 <I2C_ClearADDRFlag+0x5e>
	{
		//master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7f1b      	ldrb	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d112      	bne.n	80014f6 <I2C_ClearADDRFlag+0x4c>
		{
			//if data sent is only 1 byte ack must be cleared on first byte transmisson
			if(pI2CHandle->RxSize == 1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <I2C_ClearADDRFlag+0x3a>
			{

				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fa37 	bl	8001952 <I2C_ManageAcking>
			}
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	60fb      	str	r3, [r7, #12]
	}




}
 80014f4:	e010      	b.n	8001518 <I2C_ClearADDRFlag+0x6e>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	60fb      	str	r3, [r7, #12]
}
 8001506:	e007      	b.n	8001518 <I2C_ClearADDRFlag+0x6e>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	60fb      	str	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_STOP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <I2C_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d11f      	bne.n	8001592 <I2C_PeriClockControl+0x52>
	{
		//In header file for I2C macros are set for all I2C addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pI2Cx == I2C1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <I2C_PeriClockControl+0x60>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d106      	bne.n	8001568 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <I2C_PeriClockControl+0x64>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <I2C_PeriClockControl+0x64>)
 8001560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}
}
 8001566:	e014      	b.n	8001592 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <I2C_PeriClockControl+0x68>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d106      	bne.n	800157e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <I2C_PeriClockControl+0x64>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <I2C_PeriClockControl+0x64>)
 8001576:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800157c:	e009      	b.n	8001592 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <I2C_PeriClockControl+0x6c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d105      	bne.n	8001592 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <I2C_PeriClockControl+0x64>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <I2C_PeriClockControl+0x64>)
 800158c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40005800 	.word	0x40005800
 80015ac:	40005c00 	.word	0x40005c00

080015b0 <I2C_Init>:

/*
 * Init and De-init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	//Enable the clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ffbe 	bl	8001540 <I2C_PeriClockControl>



	//Set the freq field
	pI2CHandle->pI2Cx->CR2 |= (RCC_GetPCLK1Value())/1000000;
 80015c4:	f000 f9e2 	bl	800198c <RCC_GetPCLK1Value>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <I2C_Init+0x158>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c99      	lsrs	r1, r3, #18
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

	//Configure the device address
	pI2CHandle->pI2Cx->OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress) << 1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7a1b      	ldrb	r3, [r3, #8]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	pI2CHandle->pI2Cx->OAR1 |= (1<<14);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001604:	609a      	str	r2, [r3, #8]

	//CCR calculation
	uint16_t ccr_value = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]

	//First mode is configured
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a3f      	ldr	r2, [pc, #252]	; (800170c <I2C_Init+0x15c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d813      	bhi.n	800163c <I2C_Init+0x8c>
	{
		//CCR = Tscl / 2TpClk1 | CCR = FPclk1 / 2Fscl
		ccr_value = RCC_GetPCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001614:	f000 f9ba 	bl	800198c <RCC_GetPCLK1Value>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	81fb      	strh	r3, [r7, #14]
		//Mask out bits beyond 13 bits of ccr_value
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69d9      	ldr	r1, [r3, #28]
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	61da      	str	r2, [r3, #28]
 800163a:	e039      	b.n	80016b0 <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164a:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a9b      	ldrb	r3, [r3, #10]
 8001656:	039b      	lsls	r3, r3, #14
 8001658:	4619      	mov	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	61da      	str	r2, [r3, #28]

		//Configure the duty cycle based on value user provided
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a9b      	ldrb	r3, [r3, #10]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10b      	bne.n	8001682 <I2C_Init+0xd2>
		{
			//Tlow : Thigh is 2:1
			ccr_value = RCC_GetPCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800166a:	f000 f98f 	bl	800198c <RCC_GetPCLK1Value>
 800166e:	4601      	mov	r1, r0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	fbb1 f3f3 	udiv	r3, r1, r3
 800167e:	81fb      	strh	r3, [r7, #14]
 8001680:	e00c      	b.n	800169c <I2C_Init+0xec>
		}
		else
		{
			//Tlow : Thigh is 16:9
			ccr_value = RCC_GetPCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001682:	f000 f983 	bl	800198c <RCC_GetPCLK1Value>
 8001686:	4601      	mov	r1, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	009a      	lsls	r2, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	fbb1 f3f3 	udiv	r3, r1, r3
 800169a:	81fb      	strh	r3, [r7, #14]
		}
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69d9      	ldr	r1, [r3, #28]
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	61da      	str	r2, [r3, #28]
	}

	//Configure the rise time for I2C pin
	uint8_t tRise;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <I2C_Init+0x15c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d80a      	bhi.n	80016d0 <I2C_Init+0x120>
	{
		//standard mode
		//trise = trisemax / tpclk1
		//trise = Fpclk / Frisemax
		tRise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80016ba:	f000 f967 	bl	800198c <RCC_GetPCLK1Value>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <I2C_Init+0x158>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	737b      	strb	r3, [r7, #13]
 80016ce:	e00d      	b.n	80016ec <I2C_Init+0x13c>
	}
	else
	{
		tRise = ((RCC_GetPCLK1Value()  *300)/ 1000000U) + 1;
 80016d0:	f000 f95c 	bl	800198c <RCC_GetPCLK1Value>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <I2C_Init+0x158>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	737b      	strb	r3, [r7, #13]
	}
	pI2CHandle->pI2Cx->TRISE |=(tRise & 0x3F);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a19      	ldr	r1, [r3, #32]
 80016f2:	7b7b      	ldrb	r3, [r7, #13]
 80016f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	431bde83 	.word	0x431bde83
 800170c:	000186a0 	.word	0x000186a0

08001710 <I2C_MasterSendData>:

/*
 * Data Send and Receive
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	70fb      	strb	r3, [r7, #3]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe85 	bl	8001432 <I2C_GenerateStartCondition>

	//Read SR1 register to check if SB has been set. Not operator is nesscary to hang the code until flag = 1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001728:	bf00      	nop
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8fa 	bl	800192a <I2C_GetFlagStatus>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f6      	beq.n	800172a <I2C_MasterSendData+0x1a>

	//Write the address of the slave to DR register
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe84 	bl	8001452 <I2C_ExecuteAddressPhaseWrite>

	//Confirm the address phase is compelted by checking if ADDR bit set in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800174a:	bf00      	nop
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f8e9 	bl	800192a <I2C_GetFlagStatus>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f6      	beq.n	800174c <I2C_MasterSendData+0x3c>

	//Clear the ADDR flag by reading SR1 and SR2
	I2C_ClearADDRFlag(pI2CHandle);
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fea3 	bl	80014aa <I2C_ClearADDRFlag>

	//Send all bytes of data until len is = 0
	while(Len > 0)
 8001764:	e014      	b.n	8001790 <I2C_MasterSendData+0x80>
	{
		//When txe is set to 1 data register is empty and ready to recieve data
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8001766:	bf00      	nop
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f8db 	bl	800192a <I2C_GetFlagStatus>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f6      	beq.n	8001768 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	611a      	str	r2, [r3, #16]
		pTxbuffer ++;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3301      	adds	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
		Len --;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3b01      	subs	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e7      	bne.n	8001766 <I2C_MasterSendData+0x56>
	}

	//Wait for Txe and BTF to be set as they signal end of data transfer
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8001796:	bf00      	nop
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f8c3 	bl	800192a <I2C_GetFlagStatus>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f6      	beq.n	8001798 <I2C_MasterSendData+0x88>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80017aa:	bf00      	nop
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2104      	movs	r1, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f8b9 	bl	800192a <I2C_GetFlagStatus>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f6      	beq.n	80017ac <I2C_MasterSendData+0x9c>

	//Generate stop condition
	if(Sr == I2C_DISABLE_SR)
 80017be:	7e3b      	ldrb	r3, [r7, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fea9 	bl	8001520 <I2C_GenerateStopCondition>


}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	4611      	mov	r1, r2
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe1e 	bl	8001432 <I2C_GenerateStartCondition>

	//Confirm the start generation is completed by checking the SB flag in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80017f6:	bf00      	nop
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f893 	bl	800192a <I2C_GetFlagStatus>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f6      	beq.n	80017f8 <I2C_MasterReceiveData+0x22>

	//Send the address of the slave with the r/nw bit to R(1)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe33 	bl	800147e <I2C_ExecuteAddressPhaseRead>

	//Wait until the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001818:	bf00      	nop
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f882 	bl	800192a <I2C_GetFlagStatus>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f6      	beq.n	800181a <I2C_MasterReceiveData+0x44>


	//Procedure to handle last byte and ending communcation
	if(Len == 1)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d121      	bne.n	8001876 <I2C_MasterReceiveData+0xa0>
	{
		//Disable acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f88a 	bl	8001952 <I2C_ManageAcking>


		//clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fe33 	bl	80014aa <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8001844:	bf00      	nop
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f86c 	bl	800192a <I2C_GetFlagStatus>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f6      	beq.n	8001846 <I2C_MasterReceiveData+0x70>

		if(Sr == I2C_DISABLE_SR)
 8001858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <I2C_MasterReceiveData+0x94>
			//Generate the stop condtion
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe5b 	bl	8001520 <I2C_GenerateStopCondition>

		//read data in to the buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	701a      	strb	r2, [r3, #0]
	}

	if(Len > 1)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d930      	bls.n	80018de <I2C_MasterReceiveData+0x108>
	{
		//Clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fe14 	bl	80014aa <I2C_ClearADDRFlag>
		//read the data until len becomes 0
		for(uint32_t i = Len; i > 0; i--)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e027      	b.n	80018d8 <I2C_MasterReceiveData+0x102>
		{
			//wait until rxne becomes 1. hang the program until read buffer is full
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8001888:	bf00      	nop
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f84a 	bl	800192a <I2C_GetFlagStatus>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f6      	beq.n	800188a <I2C_MasterReceiveData+0xb4>

			//There exists a delay between data being sent and read by 1 byte. Tehrefore acking must be disaled when the second byte is being read as the last byte is sent at this point
			if(i == 2) // if last 2 bytes are remaning
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d10e      	bne.n	80018c0 <I2C_MasterReceiveData+0xea>
			{
				//disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f852 	bl	8001952 <I2C_ManageAcking>
				if(Sr == I2C_DISABLE_SR)
 80018ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d104      	bne.n	80018c0 <I2C_MasterReceiveData+0xea>
					//generate stop condition
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe30 	bl	8001520 <I2C_GenerateStopCondition>
			}

			//read the data from data register into the buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1d4      	bne.n	8001888 <I2C_MasterReceiveData+0xb2>
		}
	}

	//re-enable accking
	I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f834 	bl	8001952 <I2C_ManageAcking>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <I2C_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1<< I2C_CR1_PE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
	}
}
 8001910:	e005      	b.n	800191e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0201 	bic.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <I2C_GetFlagStatus>:
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <I2C_GetFlagStatus+0x1a>
	{
		return SET;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <I2C_GetFlagStatus+0x1c>
	}
	else
	{
		return RESET;
 8001944:	2300      	movs	r3, #0
	}
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <I2C_ManageAcking>:
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001970:	e005      	b.n	800197e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <RCC_GetPCLK1Value>:

uint16_t AHBPreScalarValues[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1PreScalarValues[8] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
	uint32_t pClk1,SystemClk;

	//Get the clock source HSI, HSE, PLL
	uint8_t clkSrc = (RCC->CFGR >> 2) & 0x3;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <RCC_GetPCLK1Value+0x94>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	71fb      	strb	r3, [r7, #7]
	if(clkSrc == 0)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <RCC_GetPCLK1Value+0x20>
	{
		//HSI
		SystemClk = 16000000;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <RCC_GetPCLK1Value+0x98>)
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e004      	b.n	80019b6 <RCC_GetPCLK1Value+0x2a>
	}
	else if (clkSrc == 1)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <RCC_GetPCLK1Value+0x2a>
	{
		//HSE
		SystemClk = 8000000;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <RCC_GetPCLK1Value+0x9c>)
 80019b4:	60fb      	str	r3, [r7, #12]
	{
		//PLL not used
	}

	//Get the AHB prescalar value
	uint8_t AHBSetPreScalar = (RCC->CFGR >> 4) & 0xF;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <RCC_GetPCLK1Value+0x94>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	71bb      	strb	r3, [r7, #6]
	uint16_t ahbp;

	if(AHBSetPreScalar < 8)
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b07      	cmp	r3, #7
 80019c8:	d802      	bhi.n	80019d0 <RCC_GetPCLK1Value+0x44>
	{
		ahbp = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	817b      	strh	r3, [r7, #10]
 80019ce:	e005      	b.n	80019dc <RCC_GetPCLK1Value+0x50>
	}
	else
	{
		//First value is 1000 next is 1001. Therefore -8 is nesscary to index array correctly
		ahbp = AHBPreScalarValues[AHBSetPreScalar-8];
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	3b08      	subs	r3, #8
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <RCC_GetPCLK1Value+0xa0>)
 80019d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019da:	817b      	strh	r3, [r7, #10]
	}

	//Get the APB1 prescalar value
	uint8_t APB1SetPreScalar = (RCC->CFGR >> 10) & 0x7;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <RCC_GetPCLK1Value+0x94>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	0a9b      	lsrs	r3, r3, #10
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	717b      	strb	r3, [r7, #5]
	uint16_t apb1p;

	if(APB1SetPreScalar < 4)
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d802      	bhi.n	80019f6 <RCC_GetPCLK1Value+0x6a>
	{
		apb1p = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	813b      	strh	r3, [r7, #8]
 80019f4:	e005      	b.n	8001a02 <RCC_GetPCLK1Value+0x76>
	}
	else
	{
		apb1p = APB1PreScalarValues[APB1SetPreScalar-4];
 80019f6:	797b      	ldrb	r3, [r7, #5]
 80019f8:	3b04      	subs	r3, #4
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <RCC_GetPCLK1Value+0xa4>)
 80019fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a00:	813b      	strh	r3, [r7, #8]
	}

	pClk1 = SystemClk/ahbp/apb1p;
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0a:	893b      	ldrh	r3, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	603b      	str	r3, [r7, #0]

	return pClk1;
 8001a12:	683b      	ldr	r3, [r7, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400
 8001a28:	007a1200 	.word	0x007a1200
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000010 	.word	0x20000010

08001a34 <__errno>:
 8001a34:	4b01      	ldr	r3, [pc, #4]	; (8001a3c <__errno+0x8>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000020 	.word	0x20000020

08001a40 <__libc_init_array>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4d0d      	ldr	r5, [pc, #52]	; (8001a78 <__libc_init_array+0x38>)
 8001a44:	4c0d      	ldr	r4, [pc, #52]	; (8001a7c <__libc_init_array+0x3c>)
 8001a46:	1b64      	subs	r4, r4, r5
 8001a48:	10a4      	asrs	r4, r4, #2
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	42a6      	cmp	r6, r4
 8001a4e:	d109      	bne.n	8001a64 <__libc_init_array+0x24>
 8001a50:	4d0b      	ldr	r5, [pc, #44]	; (8001a80 <__libc_init_array+0x40>)
 8001a52:	4c0c      	ldr	r4, [pc, #48]	; (8001a84 <__libc_init_array+0x44>)
 8001a54:	f001 f824 	bl	8002aa0 <_init>
 8001a58:	1b64      	subs	r4, r4, r5
 8001a5a:	10a4      	asrs	r4, r4, #2
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	42a6      	cmp	r6, r4
 8001a60:	d105      	bne.n	8001a6e <__libc_init_array+0x2e>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a68:	4798      	blx	r3
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	e7ee      	b.n	8001a4c <__libc_init_array+0xc>
 8001a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a72:	4798      	blx	r3
 8001a74:	3601      	adds	r6, #1
 8001a76:	e7f2      	b.n	8001a5e <__libc_init_array+0x1e>
 8001a78:	08002c28 	.word	0x08002c28
 8001a7c:	08002c28 	.word	0x08002c28
 8001a80:	08002c28 	.word	0x08002c28
 8001a84:	08002c2c 	.word	0x08002c2c

08001a88 <memset>:
 8001a88:	4402      	add	r2, r0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <memset+0xa>
 8001a90:	4770      	bx	lr
 8001a92:	f803 1b01 	strb.w	r1, [r3], #1
 8001a96:	e7f9      	b.n	8001a8c <memset+0x4>

08001a98 <iprintf>:
 8001a98:	b40f      	push	{r0, r1, r2, r3}
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <iprintf+0x2c>)
 8001a9c:	b513      	push	{r0, r1, r4, lr}
 8001a9e:	681c      	ldr	r4, [r3, #0]
 8001aa0:	b124      	cbz	r4, 8001aac <iprintf+0x14>
 8001aa2:	69a3      	ldr	r3, [r4, #24]
 8001aa4:	b913      	cbnz	r3, 8001aac <iprintf+0x14>
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f000 fa5e 	bl	8001f68 <__sinit>
 8001aac:	ab05      	add	r3, sp, #20
 8001aae:	9a04      	ldr	r2, [sp, #16]
 8001ab0:	68a1      	ldr	r1, [r4, #8]
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f000 fc67 	bl	8002388 <_vfiprintf_r>
 8001aba:	b002      	add	sp, #8
 8001abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac0:	b004      	add	sp, #16
 8001ac2:	4770      	bx	lr
 8001ac4:	20000020 	.word	0x20000020

08001ac8 <_puts_r>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	460e      	mov	r6, r1
 8001acc:	4605      	mov	r5, r0
 8001ace:	b118      	cbz	r0, 8001ad8 <_puts_r+0x10>
 8001ad0:	6983      	ldr	r3, [r0, #24]
 8001ad2:	b90b      	cbnz	r3, 8001ad8 <_puts_r+0x10>
 8001ad4:	f000 fa48 	bl	8001f68 <__sinit>
 8001ad8:	69ab      	ldr	r3, [r5, #24]
 8001ada:	68ac      	ldr	r4, [r5, #8]
 8001adc:	b913      	cbnz	r3, 8001ae4 <_puts_r+0x1c>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 fa42 	bl	8001f68 <__sinit>
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <_puts_r+0xd0>)
 8001ae6:	429c      	cmp	r4, r3
 8001ae8:	d120      	bne.n	8001b2c <_puts_r+0x64>
 8001aea:	686c      	ldr	r4, [r5, #4]
 8001aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aee:	07db      	lsls	r3, r3, #31
 8001af0:	d405      	bmi.n	8001afe <_puts_r+0x36>
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	0598      	lsls	r0, r3, #22
 8001af6:	d402      	bmi.n	8001afe <_puts_r+0x36>
 8001af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001afa:	f000 fad3 	bl	80020a4 <__retarget_lock_acquire_recursive>
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	0719      	lsls	r1, r3, #28
 8001b02:	d51d      	bpl.n	8001b40 <_puts_r+0x78>
 8001b04:	6923      	ldr	r3, [r4, #16]
 8001b06:	b1db      	cbz	r3, 8001b40 <_puts_r+0x78>
 8001b08:	3e01      	subs	r6, #1
 8001b0a:	68a3      	ldr	r3, [r4, #8]
 8001b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60a3      	str	r3, [r4, #8]
 8001b14:	bb39      	cbnz	r1, 8001b66 <_puts_r+0x9e>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da38      	bge.n	8001b8c <_puts_r+0xc4>
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	210a      	movs	r1, #10
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f000 f848 	bl	8001bb4 <__swbuf_r>
 8001b24:	3001      	adds	r0, #1
 8001b26:	d011      	beq.n	8001b4c <_puts_r+0x84>
 8001b28:	250a      	movs	r5, #10
 8001b2a:	e011      	b.n	8001b50 <_puts_r+0x88>
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <_puts_r+0xd4>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	d101      	bne.n	8001b36 <_puts_r+0x6e>
 8001b32:	68ac      	ldr	r4, [r5, #8]
 8001b34:	e7da      	b.n	8001aec <_puts_r+0x24>
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <_puts_r+0xd8>)
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	bf08      	it	eq
 8001b3c:	68ec      	ldreq	r4, [r5, #12]
 8001b3e:	e7d5      	b.n	8001aec <_puts_r+0x24>
 8001b40:	4621      	mov	r1, r4
 8001b42:	4628      	mov	r0, r5
 8001b44:	f000 f888 	bl	8001c58 <__swsetup_r>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d0dd      	beq.n	8001b08 <_puts_r+0x40>
 8001b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8001b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b52:	07da      	lsls	r2, r3, #31
 8001b54:	d405      	bmi.n	8001b62 <_puts_r+0x9a>
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	059b      	lsls	r3, r3, #22
 8001b5a:	d402      	bmi.n	8001b62 <_puts_r+0x9a>
 8001b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b5e:	f000 faa2 	bl	80020a6 <__retarget_lock_release_recursive>
 8001b62:	4628      	mov	r0, r5
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da04      	bge.n	8001b74 <_puts_r+0xac>
 8001b6a:	69a2      	ldr	r2, [r4, #24]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dc06      	bgt.n	8001b7e <_puts_r+0xb6>
 8001b70:	290a      	cmp	r1, #10
 8001b72:	d004      	beq.n	8001b7e <_puts_r+0xb6>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	6022      	str	r2, [r4, #0]
 8001b7a:	7019      	strb	r1, [r3, #0]
 8001b7c:	e7c5      	b.n	8001b0a <_puts_r+0x42>
 8001b7e:	4622      	mov	r2, r4
 8001b80:	4628      	mov	r0, r5
 8001b82:	f000 f817 	bl	8001bb4 <__swbuf_r>
 8001b86:	3001      	adds	r0, #1
 8001b88:	d1bf      	bne.n	8001b0a <_puts_r+0x42>
 8001b8a:	e7df      	b.n	8001b4c <_puts_r+0x84>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	250a      	movs	r5, #10
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	6022      	str	r2, [r4, #0]
 8001b94:	701d      	strb	r5, [r3, #0]
 8001b96:	e7db      	b.n	8001b50 <_puts_r+0x88>
 8001b98:	08002bb4 	.word	0x08002bb4
 8001b9c:	08002bd4 	.word	0x08002bd4
 8001ba0:	08002b94 	.word	0x08002b94

08001ba4 <puts>:
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <puts+0xc>)
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f7ff bf8d 	b.w	8001ac8 <_puts_r>
 8001bae:	bf00      	nop
 8001bb0:	20000020 	.word	0x20000020

08001bb4 <__swbuf_r>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	4605      	mov	r5, r0
 8001bbc:	b118      	cbz	r0, 8001bc6 <__swbuf_r+0x12>
 8001bbe:	6983      	ldr	r3, [r0, #24]
 8001bc0:	b90b      	cbnz	r3, 8001bc6 <__swbuf_r+0x12>
 8001bc2:	f000 f9d1 	bl	8001f68 <__sinit>
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <__swbuf_r+0x98>)
 8001bc8:	429c      	cmp	r4, r3
 8001bca:	d12b      	bne.n	8001c24 <__swbuf_r+0x70>
 8001bcc:	686c      	ldr	r4, [r5, #4]
 8001bce:	69a3      	ldr	r3, [r4, #24]
 8001bd0:	60a3      	str	r3, [r4, #8]
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	071a      	lsls	r2, r3, #28
 8001bd6:	d52f      	bpl.n	8001c38 <__swbuf_r+0x84>
 8001bd8:	6923      	ldr	r3, [r4, #16]
 8001bda:	b36b      	cbz	r3, 8001c38 <__swbuf_r+0x84>
 8001bdc:	6923      	ldr	r3, [r4, #16]
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	1ac0      	subs	r0, r0, r3
 8001be2:	6963      	ldr	r3, [r4, #20]
 8001be4:	b2f6      	uxtb	r6, r6
 8001be6:	4283      	cmp	r3, r0
 8001be8:	4637      	mov	r7, r6
 8001bea:	dc04      	bgt.n	8001bf6 <__swbuf_r+0x42>
 8001bec:	4621      	mov	r1, r4
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 f926 	bl	8001e40 <_fflush_r>
 8001bf4:	bb30      	cbnz	r0, 8001c44 <__swbuf_r+0x90>
 8001bf6:	68a3      	ldr	r3, [r4, #8]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60a3      	str	r3, [r4, #8]
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	6022      	str	r2, [r4, #0]
 8001c02:	701e      	strb	r6, [r3, #0]
 8001c04:	6963      	ldr	r3, [r4, #20]
 8001c06:	3001      	adds	r0, #1
 8001c08:	4283      	cmp	r3, r0
 8001c0a:	d004      	beq.n	8001c16 <__swbuf_r+0x62>
 8001c0c:	89a3      	ldrh	r3, [r4, #12]
 8001c0e:	07db      	lsls	r3, r3, #31
 8001c10:	d506      	bpl.n	8001c20 <__swbuf_r+0x6c>
 8001c12:	2e0a      	cmp	r6, #10
 8001c14:	d104      	bne.n	8001c20 <__swbuf_r+0x6c>
 8001c16:	4621      	mov	r1, r4
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f000 f911 	bl	8001e40 <_fflush_r>
 8001c1e:	b988      	cbnz	r0, 8001c44 <__swbuf_r+0x90>
 8001c20:	4638      	mov	r0, r7
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <__swbuf_r+0x9c>)
 8001c26:	429c      	cmp	r4, r3
 8001c28:	d101      	bne.n	8001c2e <__swbuf_r+0x7a>
 8001c2a:	68ac      	ldr	r4, [r5, #8]
 8001c2c:	e7cf      	b.n	8001bce <__swbuf_r+0x1a>
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <__swbuf_r+0xa0>)
 8001c30:	429c      	cmp	r4, r3
 8001c32:	bf08      	it	eq
 8001c34:	68ec      	ldreq	r4, [r5, #12]
 8001c36:	e7ca      	b.n	8001bce <__swbuf_r+0x1a>
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f000 f80c 	bl	8001c58 <__swsetup_r>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0cb      	beq.n	8001bdc <__swbuf_r+0x28>
 8001c44:	f04f 37ff 	mov.w	r7, #4294967295
 8001c48:	e7ea      	b.n	8001c20 <__swbuf_r+0x6c>
 8001c4a:	bf00      	nop
 8001c4c:	08002bb4 	.word	0x08002bb4
 8001c50:	08002bd4 	.word	0x08002bd4
 8001c54:	08002b94 	.word	0x08002b94

08001c58 <__swsetup_r>:
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <__swsetup_r+0xcc>)
 8001c5a:	b570      	push	{r4, r5, r6, lr}
 8001c5c:	681d      	ldr	r5, [r3, #0]
 8001c5e:	4606      	mov	r6, r0
 8001c60:	460c      	mov	r4, r1
 8001c62:	b125      	cbz	r5, 8001c6e <__swsetup_r+0x16>
 8001c64:	69ab      	ldr	r3, [r5, #24]
 8001c66:	b913      	cbnz	r3, 8001c6e <__swsetup_r+0x16>
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f000 f97d 	bl	8001f68 <__sinit>
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <__swsetup_r+0xd0>)
 8001c70:	429c      	cmp	r4, r3
 8001c72:	d10f      	bne.n	8001c94 <__swsetup_r+0x3c>
 8001c74:	686c      	ldr	r4, [r5, #4]
 8001c76:	89a3      	ldrh	r3, [r4, #12]
 8001c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c7c:	0719      	lsls	r1, r3, #28
 8001c7e:	d42c      	bmi.n	8001cda <__swsetup_r+0x82>
 8001c80:	06dd      	lsls	r5, r3, #27
 8001c82:	d411      	bmi.n	8001ca8 <__swsetup_r+0x50>
 8001c84:	2309      	movs	r3, #9
 8001c86:	6033      	str	r3, [r6, #0]
 8001c88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c8c:	81a3      	strh	r3, [r4, #12]
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c92:	e03e      	b.n	8001d12 <__swsetup_r+0xba>
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <__swsetup_r+0xd4>)
 8001c96:	429c      	cmp	r4, r3
 8001c98:	d101      	bne.n	8001c9e <__swsetup_r+0x46>
 8001c9a:	68ac      	ldr	r4, [r5, #8]
 8001c9c:	e7eb      	b.n	8001c76 <__swsetup_r+0x1e>
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <__swsetup_r+0xd8>)
 8001ca0:	429c      	cmp	r4, r3
 8001ca2:	bf08      	it	eq
 8001ca4:	68ec      	ldreq	r4, [r5, #12]
 8001ca6:	e7e6      	b.n	8001c76 <__swsetup_r+0x1e>
 8001ca8:	0758      	lsls	r0, r3, #29
 8001caa:	d512      	bpl.n	8001cd2 <__swsetup_r+0x7a>
 8001cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cae:	b141      	cbz	r1, 8001cc2 <__swsetup_r+0x6a>
 8001cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cb4:	4299      	cmp	r1, r3
 8001cb6:	d002      	beq.n	8001cbe <__swsetup_r+0x66>
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 fa5b 	bl	8002174 <_free_r>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cc8:	81a3      	strh	r3, [r4, #12]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6063      	str	r3, [r4, #4]
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	6023      	str	r3, [r4, #0]
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	81a3      	strh	r3, [r4, #12]
 8001cda:	6923      	ldr	r3, [r4, #16]
 8001cdc:	b94b      	cbnz	r3, 8001cf2 <__swsetup_r+0x9a>
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d003      	beq.n	8001cf2 <__swsetup_r+0x9a>
 8001cea:	4621      	mov	r1, r4
 8001cec:	4630      	mov	r0, r6
 8001cee:	f000 fa01 	bl	80020f4 <__smakebuf_r>
 8001cf2:	89a0      	ldrh	r0, [r4, #12]
 8001cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cf8:	f010 0301 	ands.w	r3, r0, #1
 8001cfc:	d00a      	beq.n	8001d14 <__swsetup_r+0xbc>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60a3      	str	r3, [r4, #8]
 8001d02:	6963      	ldr	r3, [r4, #20]
 8001d04:	425b      	negs	r3, r3
 8001d06:	61a3      	str	r3, [r4, #24]
 8001d08:	6923      	ldr	r3, [r4, #16]
 8001d0a:	b943      	cbnz	r3, 8001d1e <__swsetup_r+0xc6>
 8001d0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d10:	d1ba      	bne.n	8001c88 <__swsetup_r+0x30>
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
 8001d14:	0781      	lsls	r1, r0, #30
 8001d16:	bf58      	it	pl
 8001d18:	6963      	ldrpl	r3, [r4, #20]
 8001d1a:	60a3      	str	r3, [r4, #8]
 8001d1c:	e7f4      	b.n	8001d08 <__swsetup_r+0xb0>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e7f7      	b.n	8001d12 <__swsetup_r+0xba>
 8001d22:	bf00      	nop
 8001d24:	20000020 	.word	0x20000020
 8001d28:	08002bb4 	.word	0x08002bb4
 8001d2c:	08002bd4 	.word	0x08002bd4
 8001d30:	08002b94 	.word	0x08002b94

08001d34 <__sflush_r>:
 8001d34:	898a      	ldrh	r2, [r1, #12]
 8001d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3a:	4605      	mov	r5, r0
 8001d3c:	0710      	lsls	r0, r2, #28
 8001d3e:	460c      	mov	r4, r1
 8001d40:	d458      	bmi.n	8001df4 <__sflush_r+0xc0>
 8001d42:	684b      	ldr	r3, [r1, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	dc05      	bgt.n	8001d54 <__sflush_r+0x20>
 8001d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dc02      	bgt.n	8001d54 <__sflush_r+0x20>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d56:	2e00      	cmp	r6, #0
 8001d58:	d0f9      	beq.n	8001d4e <__sflush_r+0x1a>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d60:	682f      	ldr	r7, [r5, #0]
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	d032      	beq.n	8001dcc <__sflush_r+0x98>
 8001d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d68:	89a3      	ldrh	r3, [r4, #12]
 8001d6a:	075a      	lsls	r2, r3, #29
 8001d6c:	d505      	bpl.n	8001d7a <__sflush_r+0x46>
 8001d6e:	6863      	ldr	r3, [r4, #4]
 8001d70:	1ac0      	subs	r0, r0, r3
 8001d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d74:	b10b      	cbz	r3, 8001d7a <__sflush_r+0x46>
 8001d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d78:	1ac0      	subs	r0, r0, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d80:	6a21      	ldr	r1, [r4, #32]
 8001d82:	4628      	mov	r0, r5
 8001d84:	47b0      	blx	r6
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	d106      	bne.n	8001d9a <__sflush_r+0x66>
 8001d8c:	6829      	ldr	r1, [r5, #0]
 8001d8e:	291d      	cmp	r1, #29
 8001d90:	d82c      	bhi.n	8001dec <__sflush_r+0xb8>
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <__sflush_r+0x108>)
 8001d94:	40ca      	lsrs	r2, r1
 8001d96:	07d6      	lsls	r6, r2, #31
 8001d98:	d528      	bpl.n	8001dec <__sflush_r+0xb8>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	6062      	str	r2, [r4, #4]
 8001d9e:	04d9      	lsls	r1, r3, #19
 8001da0:	6922      	ldr	r2, [r4, #16]
 8001da2:	6022      	str	r2, [r4, #0]
 8001da4:	d504      	bpl.n	8001db0 <__sflush_r+0x7c>
 8001da6:	1c42      	adds	r2, r0, #1
 8001da8:	d101      	bne.n	8001dae <__sflush_r+0x7a>
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	b903      	cbnz	r3, 8001db0 <__sflush_r+0x7c>
 8001dae:	6560      	str	r0, [r4, #84]	; 0x54
 8001db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001db2:	602f      	str	r7, [r5, #0]
 8001db4:	2900      	cmp	r1, #0
 8001db6:	d0ca      	beq.n	8001d4e <__sflush_r+0x1a>
 8001db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d002      	beq.n	8001dc6 <__sflush_r+0x92>
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 f9d7 	bl	8002174 <_free_r>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8001dca:	e7c1      	b.n	8001d50 <__sflush_r+0x1c>
 8001dcc:	6a21      	ldr	r1, [r4, #32]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	47b0      	blx	r6
 8001dd4:	1c41      	adds	r1, r0, #1
 8001dd6:	d1c7      	bne.n	8001d68 <__sflush_r+0x34>
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0c4      	beq.n	8001d68 <__sflush_r+0x34>
 8001dde:	2b1d      	cmp	r3, #29
 8001de0:	d001      	beq.n	8001de6 <__sflush_r+0xb2>
 8001de2:	2b16      	cmp	r3, #22
 8001de4:	d101      	bne.n	8001dea <__sflush_r+0xb6>
 8001de6:	602f      	str	r7, [r5, #0]
 8001de8:	e7b1      	b.n	8001d4e <__sflush_r+0x1a>
 8001dea:	89a3      	ldrh	r3, [r4, #12]
 8001dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df0:	81a3      	strh	r3, [r4, #12]
 8001df2:	e7ad      	b.n	8001d50 <__sflush_r+0x1c>
 8001df4:	690f      	ldr	r7, [r1, #16]
 8001df6:	2f00      	cmp	r7, #0
 8001df8:	d0a9      	beq.n	8001d4e <__sflush_r+0x1a>
 8001dfa:	0793      	lsls	r3, r2, #30
 8001dfc:	680e      	ldr	r6, [r1, #0]
 8001dfe:	bf08      	it	eq
 8001e00:	694b      	ldreq	r3, [r1, #20]
 8001e02:	600f      	str	r7, [r1, #0]
 8001e04:	bf18      	it	ne
 8001e06:	2300      	movne	r3, #0
 8001e08:	eba6 0807 	sub.w	r8, r6, r7
 8001e0c:	608b      	str	r3, [r1, #8]
 8001e0e:	f1b8 0f00 	cmp.w	r8, #0
 8001e12:	dd9c      	ble.n	8001d4e <__sflush_r+0x1a>
 8001e14:	6a21      	ldr	r1, [r4, #32]
 8001e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e18:	4643      	mov	r3, r8
 8001e1a:	463a      	mov	r2, r7
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	47b0      	blx	r6
 8001e20:	2800      	cmp	r0, #0
 8001e22:	dc06      	bgt.n	8001e32 <__sflush_r+0xfe>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2a:	81a3      	strh	r3, [r4, #12]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	e78e      	b.n	8001d50 <__sflush_r+0x1c>
 8001e32:	4407      	add	r7, r0
 8001e34:	eba8 0800 	sub.w	r8, r8, r0
 8001e38:	e7e9      	b.n	8001e0e <__sflush_r+0xda>
 8001e3a:	bf00      	nop
 8001e3c:	20400001 	.word	0x20400001

08001e40 <_fflush_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	690b      	ldr	r3, [r1, #16]
 8001e44:	4605      	mov	r5, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	b913      	cbnz	r3, 8001e50 <_fflush_r+0x10>
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	b118      	cbz	r0, 8001e5a <_fflush_r+0x1a>
 8001e52:	6983      	ldr	r3, [r0, #24]
 8001e54:	b90b      	cbnz	r3, 8001e5a <_fflush_r+0x1a>
 8001e56:	f000 f887 	bl	8001f68 <__sinit>
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <_fflush_r+0x6c>)
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	d11b      	bne.n	8001e98 <_fflush_r+0x58>
 8001e60:	686c      	ldr	r4, [r5, #4]
 8001e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ef      	beq.n	8001e4a <_fflush_r+0xa>
 8001e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e6c:	07d0      	lsls	r0, r2, #31
 8001e6e:	d404      	bmi.n	8001e7a <_fflush_r+0x3a>
 8001e70:	0599      	lsls	r1, r3, #22
 8001e72:	d402      	bmi.n	8001e7a <_fflush_r+0x3a>
 8001e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e76:	f000 f915 	bl	80020a4 <__retarget_lock_acquire_recursive>
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	f7ff ff59 	bl	8001d34 <__sflush_r>
 8001e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e84:	07da      	lsls	r2, r3, #31
 8001e86:	4605      	mov	r5, r0
 8001e88:	d4e0      	bmi.n	8001e4c <_fflush_r+0xc>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	059b      	lsls	r3, r3, #22
 8001e8e:	d4dd      	bmi.n	8001e4c <_fflush_r+0xc>
 8001e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e92:	f000 f908 	bl	80020a6 <__retarget_lock_release_recursive>
 8001e96:	e7d9      	b.n	8001e4c <_fflush_r+0xc>
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <_fflush_r+0x70>)
 8001e9a:	429c      	cmp	r4, r3
 8001e9c:	d101      	bne.n	8001ea2 <_fflush_r+0x62>
 8001e9e:	68ac      	ldr	r4, [r5, #8]
 8001ea0:	e7df      	b.n	8001e62 <_fflush_r+0x22>
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <_fflush_r+0x74>)
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	bf08      	it	eq
 8001ea8:	68ec      	ldreq	r4, [r5, #12]
 8001eaa:	e7da      	b.n	8001e62 <_fflush_r+0x22>
 8001eac:	08002bb4 	.word	0x08002bb4
 8001eb0:	08002bd4 	.word	0x08002bd4
 8001eb4:	08002b94 	.word	0x08002b94

08001eb8 <std>:
 8001eb8:	2300      	movs	r3, #0
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8001ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ec6:	6083      	str	r3, [r0, #8]
 8001ec8:	8181      	strh	r1, [r0, #12]
 8001eca:	6643      	str	r3, [r0, #100]	; 0x64
 8001ecc:	81c2      	strh	r2, [r0, #14]
 8001ece:	6183      	str	r3, [r0, #24]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	305c      	adds	r0, #92	; 0x5c
 8001ed6:	f7ff fdd7 	bl	8001a88 <memset>
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <std+0x38>)
 8001edc:	6263      	str	r3, [r4, #36]	; 0x24
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <std+0x3c>)
 8001ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <std+0x40>)
 8001ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <std+0x44>)
 8001ee8:	6224      	str	r4, [r4, #32]
 8001eea:	6323      	str	r3, [r4, #48]	; 0x30
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	08002931 	.word	0x08002931
 8001ef4:	08002953 	.word	0x08002953
 8001ef8:	0800298b 	.word	0x0800298b
 8001efc:	080029af 	.word	0x080029af

08001f00 <_cleanup_r>:
 8001f00:	4901      	ldr	r1, [pc, #4]	; (8001f08 <_cleanup_r+0x8>)
 8001f02:	f000 b8af 	b.w	8002064 <_fwalk_reent>
 8001f06:	bf00      	nop
 8001f08:	08001e41 	.word	0x08001e41

08001f0c <__sfmoreglue>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	2268      	movs	r2, #104	; 0x68
 8001f10:	1e4d      	subs	r5, r1, #1
 8001f12:	4355      	muls	r5, r2
 8001f14:	460e      	mov	r6, r1
 8001f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f1a:	f000 f997 	bl	800224c <_malloc_r>
 8001f1e:	4604      	mov	r4, r0
 8001f20:	b140      	cbz	r0, 8001f34 <__sfmoreglue+0x28>
 8001f22:	2100      	movs	r1, #0
 8001f24:	e9c0 1600 	strd	r1, r6, [r0]
 8001f28:	300c      	adds	r0, #12
 8001f2a:	60a0      	str	r0, [r4, #8]
 8001f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f30:	f7ff fdaa 	bl	8001a88 <memset>
 8001f34:	4620      	mov	r0, r4
 8001f36:	bd70      	pop	{r4, r5, r6, pc}

08001f38 <__sfp_lock_acquire>:
 8001f38:	4801      	ldr	r0, [pc, #4]	; (8001f40 <__sfp_lock_acquire+0x8>)
 8001f3a:	f000 b8b3 	b.w	80020a4 <__retarget_lock_acquire_recursive>
 8001f3e:	bf00      	nop
 8001f40:	200000e2 	.word	0x200000e2

08001f44 <__sfp_lock_release>:
 8001f44:	4801      	ldr	r0, [pc, #4]	; (8001f4c <__sfp_lock_release+0x8>)
 8001f46:	f000 b8ae 	b.w	80020a6 <__retarget_lock_release_recursive>
 8001f4a:	bf00      	nop
 8001f4c:	200000e2 	.word	0x200000e2

08001f50 <__sinit_lock_acquire>:
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <__sinit_lock_acquire+0x8>)
 8001f52:	f000 b8a7 	b.w	80020a4 <__retarget_lock_acquire_recursive>
 8001f56:	bf00      	nop
 8001f58:	200000e3 	.word	0x200000e3

08001f5c <__sinit_lock_release>:
 8001f5c:	4801      	ldr	r0, [pc, #4]	; (8001f64 <__sinit_lock_release+0x8>)
 8001f5e:	f000 b8a2 	b.w	80020a6 <__retarget_lock_release_recursive>
 8001f62:	bf00      	nop
 8001f64:	200000e3 	.word	0x200000e3

08001f68 <__sinit>:
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	f7ff fff0 	bl	8001f50 <__sinit_lock_acquire>
 8001f70:	69a3      	ldr	r3, [r4, #24]
 8001f72:	b11b      	cbz	r3, 8001f7c <__sinit+0x14>
 8001f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f78:	f7ff bff0 	b.w	8001f5c <__sinit_lock_release>
 8001f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f80:	6523      	str	r3, [r4, #80]	; 0x50
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <__sinit+0x68>)
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <__sinit+0x6c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f8a:	42a3      	cmp	r3, r4
 8001f8c:	bf04      	itt	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	61a3      	streq	r3, [r4, #24]
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 f820 	bl	8001fd8 <__sfp>
 8001f98:	6060      	str	r0, [r4, #4]
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f000 f81c 	bl	8001fd8 <__sfp>
 8001fa0:	60a0      	str	r0, [r4, #8]
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 f818 	bl	8001fd8 <__sfp>
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60e0      	str	r0, [r4, #12]
 8001fac:	2104      	movs	r1, #4
 8001fae:	6860      	ldr	r0, [r4, #4]
 8001fb0:	f7ff ff82 	bl	8001eb8 <std>
 8001fb4:	68a0      	ldr	r0, [r4, #8]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2109      	movs	r1, #9
 8001fba:	f7ff ff7d 	bl	8001eb8 <std>
 8001fbe:	68e0      	ldr	r0, [r4, #12]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	2112      	movs	r1, #18
 8001fc4:	f7ff ff78 	bl	8001eb8 <std>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61a3      	str	r3, [r4, #24]
 8001fcc:	e7d2      	b.n	8001f74 <__sinit+0xc>
 8001fce:	bf00      	nop
 8001fd0:	08002b90 	.word	0x08002b90
 8001fd4:	08001f01 	.word	0x08001f01

08001fd8 <__sfp>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	4607      	mov	r7, r0
 8001fdc:	f7ff ffac 	bl	8001f38 <__sfp_lock_acquire>
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <__sfp+0x84>)
 8001fe2:	681e      	ldr	r6, [r3, #0]
 8001fe4:	69b3      	ldr	r3, [r6, #24]
 8001fe6:	b913      	cbnz	r3, 8001fee <__sfp+0x16>
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f7ff ffbd 	bl	8001f68 <__sinit>
 8001fee:	3648      	adds	r6, #72	; 0x48
 8001ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	d503      	bpl.n	8002000 <__sfp+0x28>
 8001ff8:	6833      	ldr	r3, [r6, #0]
 8001ffa:	b30b      	cbz	r3, 8002040 <__sfp+0x68>
 8001ffc:	6836      	ldr	r6, [r6, #0]
 8001ffe:	e7f7      	b.n	8001ff0 <__sfp+0x18>
 8002000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002004:	b9d5      	cbnz	r5, 800203c <__sfp+0x64>
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <__sfp+0x88>)
 8002008:	60e3      	str	r3, [r4, #12]
 800200a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800200e:	6665      	str	r5, [r4, #100]	; 0x64
 8002010:	f000 f847 	bl	80020a2 <__retarget_lock_init_recursive>
 8002014:	f7ff ff96 	bl	8001f44 <__sfp_lock_release>
 8002018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800201c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002020:	6025      	str	r5, [r4, #0]
 8002022:	61a5      	str	r5, [r4, #24]
 8002024:	2208      	movs	r2, #8
 8002026:	4629      	mov	r1, r5
 8002028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800202c:	f7ff fd2c 	bl	8001a88 <memset>
 8002030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002038:	4620      	mov	r0, r4
 800203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203c:	3468      	adds	r4, #104	; 0x68
 800203e:	e7d9      	b.n	8001ff4 <__sfp+0x1c>
 8002040:	2104      	movs	r1, #4
 8002042:	4638      	mov	r0, r7
 8002044:	f7ff ff62 	bl	8001f0c <__sfmoreglue>
 8002048:	4604      	mov	r4, r0
 800204a:	6030      	str	r0, [r6, #0]
 800204c:	2800      	cmp	r0, #0
 800204e:	d1d5      	bne.n	8001ffc <__sfp+0x24>
 8002050:	f7ff ff78 	bl	8001f44 <__sfp_lock_release>
 8002054:	230c      	movs	r3, #12
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	e7ee      	b.n	8002038 <__sfp+0x60>
 800205a:	bf00      	nop
 800205c:	08002b90 	.word	0x08002b90
 8002060:	ffff0001 	.word	0xffff0001

08002064 <_fwalk_reent>:
 8002064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	4606      	mov	r6, r0
 800206a:	4688      	mov	r8, r1
 800206c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002070:	2700      	movs	r7, #0
 8002072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002076:	f1b9 0901 	subs.w	r9, r9, #1
 800207a:	d505      	bpl.n	8002088 <_fwalk_reent+0x24>
 800207c:	6824      	ldr	r4, [r4, #0]
 800207e:	2c00      	cmp	r4, #0
 8002080:	d1f7      	bne.n	8002072 <_fwalk_reent+0xe>
 8002082:	4638      	mov	r0, r7
 8002084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002088:	89ab      	ldrh	r3, [r5, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d907      	bls.n	800209e <_fwalk_reent+0x3a>
 800208e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002092:	3301      	adds	r3, #1
 8002094:	d003      	beq.n	800209e <_fwalk_reent+0x3a>
 8002096:	4629      	mov	r1, r5
 8002098:	4630      	mov	r0, r6
 800209a:	47c0      	blx	r8
 800209c:	4307      	orrs	r7, r0
 800209e:	3568      	adds	r5, #104	; 0x68
 80020a0:	e7e9      	b.n	8002076 <_fwalk_reent+0x12>

080020a2 <__retarget_lock_init_recursive>:
 80020a2:	4770      	bx	lr

080020a4 <__retarget_lock_acquire_recursive>:
 80020a4:	4770      	bx	lr

080020a6 <__retarget_lock_release_recursive>:
 80020a6:	4770      	bx	lr

080020a8 <__swhatbuf_r>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
 80020ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b0:	2900      	cmp	r1, #0
 80020b2:	b096      	sub	sp, #88	; 0x58
 80020b4:	4614      	mov	r4, r2
 80020b6:	461d      	mov	r5, r3
 80020b8:	da08      	bge.n	80020cc <__swhatbuf_r+0x24>
 80020ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	602a      	str	r2, [r5, #0]
 80020c2:	061a      	lsls	r2, r3, #24
 80020c4:	d410      	bmi.n	80020e8 <__swhatbuf_r+0x40>
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	e00e      	b.n	80020ea <__swhatbuf_r+0x42>
 80020cc:	466a      	mov	r2, sp
 80020ce:	f000 fc95 	bl	80029fc <_fstat_r>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	dbf1      	blt.n	80020ba <__swhatbuf_r+0x12>
 80020d6:	9a01      	ldr	r2, [sp, #4]
 80020d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020e0:	425a      	negs	r2, r3
 80020e2:	415a      	adcs	r2, r3
 80020e4:	602a      	str	r2, [r5, #0]
 80020e6:	e7ee      	b.n	80020c6 <__swhatbuf_r+0x1e>
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	2000      	movs	r0, #0
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	b016      	add	sp, #88	; 0x58
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020f4 <__smakebuf_r>:
 80020f4:	898b      	ldrh	r3, [r1, #12]
 80020f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f8:	079d      	lsls	r5, r3, #30
 80020fa:	4606      	mov	r6, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	d507      	bpl.n	8002110 <__smakebuf_r+0x1c>
 8002100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	6123      	str	r3, [r4, #16]
 8002108:	2301      	movs	r3, #1
 800210a:	6163      	str	r3, [r4, #20]
 800210c:	b002      	add	sp, #8
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	ab01      	add	r3, sp, #4
 8002112:	466a      	mov	r2, sp
 8002114:	f7ff ffc8 	bl	80020a8 <__swhatbuf_r>
 8002118:	9900      	ldr	r1, [sp, #0]
 800211a:	4605      	mov	r5, r0
 800211c:	4630      	mov	r0, r6
 800211e:	f000 f895 	bl	800224c <_malloc_r>
 8002122:	b948      	cbnz	r0, 8002138 <__smakebuf_r+0x44>
 8002124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002128:	059a      	lsls	r2, r3, #22
 800212a:	d4ef      	bmi.n	800210c <__smakebuf_r+0x18>
 800212c:	f023 0303 	bic.w	r3, r3, #3
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	e7e3      	b.n	8002100 <__smakebuf_r+0xc>
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <__smakebuf_r+0x7c>)
 800213a:	62b3      	str	r3, [r6, #40]	; 0x28
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	6020      	str	r0, [r4, #0]
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	9b00      	ldr	r3, [sp, #0]
 8002148:	6163      	str	r3, [r4, #20]
 800214a:	9b01      	ldr	r3, [sp, #4]
 800214c:	6120      	str	r0, [r4, #16]
 800214e:	b15b      	cbz	r3, 8002168 <__smakebuf_r+0x74>
 8002150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002154:	4630      	mov	r0, r6
 8002156:	f000 fc63 	bl	8002a20 <_isatty_r>
 800215a:	b128      	cbz	r0, 8002168 <__smakebuf_r+0x74>
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	f023 0303 	bic.w	r3, r3, #3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	81a3      	strh	r3, [r4, #12]
 8002168:	89a0      	ldrh	r0, [r4, #12]
 800216a:	4305      	orrs	r5, r0
 800216c:	81a5      	strh	r5, [r4, #12]
 800216e:	e7cd      	b.n	800210c <__smakebuf_r+0x18>
 8002170:	08001f01 	.word	0x08001f01

08002174 <_free_r>:
 8002174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002176:	2900      	cmp	r1, #0
 8002178:	d044      	beq.n	8002204 <_free_r+0x90>
 800217a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800217e:	9001      	str	r0, [sp, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f1a1 0404 	sub.w	r4, r1, #4
 8002186:	bfb8      	it	lt
 8002188:	18e4      	addlt	r4, r4, r3
 800218a:	f000 fc6b 	bl	8002a64 <__malloc_lock>
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <_free_r+0x94>)
 8002190:	9801      	ldr	r0, [sp, #4]
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	b933      	cbnz	r3, 80021a4 <_free_r+0x30>
 8002196:	6063      	str	r3, [r4, #4]
 8002198:	6014      	str	r4, [r2, #0]
 800219a:	b003      	add	sp, #12
 800219c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021a0:	f000 bc66 	b.w	8002a70 <__malloc_unlock>
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	d908      	bls.n	80021ba <_free_r+0x46>
 80021a8:	6825      	ldr	r5, [r4, #0]
 80021aa:	1961      	adds	r1, r4, r5
 80021ac:	428b      	cmp	r3, r1
 80021ae:	bf01      	itttt	eq
 80021b0:	6819      	ldreq	r1, [r3, #0]
 80021b2:	685b      	ldreq	r3, [r3, #4]
 80021b4:	1949      	addeq	r1, r1, r5
 80021b6:	6021      	streq	r1, [r4, #0]
 80021b8:	e7ed      	b.n	8002196 <_free_r+0x22>
 80021ba:	461a      	mov	r2, r3
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	b10b      	cbz	r3, 80021c4 <_free_r+0x50>
 80021c0:	42a3      	cmp	r3, r4
 80021c2:	d9fa      	bls.n	80021ba <_free_r+0x46>
 80021c4:	6811      	ldr	r1, [r2, #0]
 80021c6:	1855      	adds	r5, r2, r1
 80021c8:	42a5      	cmp	r5, r4
 80021ca:	d10b      	bne.n	80021e4 <_free_r+0x70>
 80021cc:	6824      	ldr	r4, [r4, #0]
 80021ce:	4421      	add	r1, r4
 80021d0:	1854      	adds	r4, r2, r1
 80021d2:	42a3      	cmp	r3, r4
 80021d4:	6011      	str	r1, [r2, #0]
 80021d6:	d1e0      	bne.n	800219a <_free_r+0x26>
 80021d8:	681c      	ldr	r4, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	6053      	str	r3, [r2, #4]
 80021de:	4421      	add	r1, r4
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	e7da      	b.n	800219a <_free_r+0x26>
 80021e4:	d902      	bls.n	80021ec <_free_r+0x78>
 80021e6:	230c      	movs	r3, #12
 80021e8:	6003      	str	r3, [r0, #0]
 80021ea:	e7d6      	b.n	800219a <_free_r+0x26>
 80021ec:	6825      	ldr	r5, [r4, #0]
 80021ee:	1961      	adds	r1, r4, r5
 80021f0:	428b      	cmp	r3, r1
 80021f2:	bf04      	itt	eq
 80021f4:	6819      	ldreq	r1, [r3, #0]
 80021f6:	685b      	ldreq	r3, [r3, #4]
 80021f8:	6063      	str	r3, [r4, #4]
 80021fa:	bf04      	itt	eq
 80021fc:	1949      	addeq	r1, r1, r5
 80021fe:	6021      	streq	r1, [r4, #0]
 8002200:	6054      	str	r4, [r2, #4]
 8002202:	e7ca      	b.n	800219a <_free_r+0x26>
 8002204:	b003      	add	sp, #12
 8002206:	bd30      	pop	{r4, r5, pc}
 8002208:	200000e4 	.word	0x200000e4

0800220c <sbrk_aligned>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4e0e      	ldr	r6, [pc, #56]	; (8002248 <sbrk_aligned+0x3c>)
 8002210:	460c      	mov	r4, r1
 8002212:	6831      	ldr	r1, [r6, #0]
 8002214:	4605      	mov	r5, r0
 8002216:	b911      	cbnz	r1, 800221e <sbrk_aligned+0x12>
 8002218:	f000 fb7a 	bl	8002910 <_sbrk_r>
 800221c:	6030      	str	r0, [r6, #0]
 800221e:	4621      	mov	r1, r4
 8002220:	4628      	mov	r0, r5
 8002222:	f000 fb75 	bl	8002910 <_sbrk_r>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	d00a      	beq.n	8002240 <sbrk_aligned+0x34>
 800222a:	1cc4      	adds	r4, r0, #3
 800222c:	f024 0403 	bic.w	r4, r4, #3
 8002230:	42a0      	cmp	r0, r4
 8002232:	d007      	beq.n	8002244 <sbrk_aligned+0x38>
 8002234:	1a21      	subs	r1, r4, r0
 8002236:	4628      	mov	r0, r5
 8002238:	f000 fb6a 	bl	8002910 <_sbrk_r>
 800223c:	3001      	adds	r0, #1
 800223e:	d101      	bne.n	8002244 <sbrk_aligned+0x38>
 8002240:	f04f 34ff 	mov.w	r4, #4294967295
 8002244:	4620      	mov	r0, r4
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	200000e8 	.word	0x200000e8

0800224c <_malloc_r>:
 800224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002250:	1ccd      	adds	r5, r1, #3
 8002252:	f025 0503 	bic.w	r5, r5, #3
 8002256:	3508      	adds	r5, #8
 8002258:	2d0c      	cmp	r5, #12
 800225a:	bf38      	it	cc
 800225c:	250c      	movcc	r5, #12
 800225e:	2d00      	cmp	r5, #0
 8002260:	4607      	mov	r7, r0
 8002262:	db01      	blt.n	8002268 <_malloc_r+0x1c>
 8002264:	42a9      	cmp	r1, r5
 8002266:	d905      	bls.n	8002274 <_malloc_r+0x28>
 8002268:	230c      	movs	r3, #12
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	2600      	movs	r6, #0
 800226e:	4630      	mov	r0, r6
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002274:	4e2e      	ldr	r6, [pc, #184]	; (8002330 <_malloc_r+0xe4>)
 8002276:	f000 fbf5 	bl	8002a64 <__malloc_lock>
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	461c      	mov	r4, r3
 800227e:	bb34      	cbnz	r4, 80022ce <_malloc_r+0x82>
 8002280:	4629      	mov	r1, r5
 8002282:	4638      	mov	r0, r7
 8002284:	f7ff ffc2 	bl	800220c <sbrk_aligned>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	4604      	mov	r4, r0
 800228c:	d14d      	bne.n	800232a <_malloc_r+0xde>
 800228e:	6834      	ldr	r4, [r6, #0]
 8002290:	4626      	mov	r6, r4
 8002292:	2e00      	cmp	r6, #0
 8002294:	d140      	bne.n	8002318 <_malloc_r+0xcc>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	4631      	mov	r1, r6
 800229a:	4638      	mov	r0, r7
 800229c:	eb04 0803 	add.w	r8, r4, r3
 80022a0:	f000 fb36 	bl	8002910 <_sbrk_r>
 80022a4:	4580      	cmp	r8, r0
 80022a6:	d13a      	bne.n	800231e <_malloc_r+0xd2>
 80022a8:	6821      	ldr	r1, [r4, #0]
 80022aa:	3503      	adds	r5, #3
 80022ac:	1a6d      	subs	r5, r5, r1
 80022ae:	f025 0503 	bic.w	r5, r5, #3
 80022b2:	3508      	adds	r5, #8
 80022b4:	2d0c      	cmp	r5, #12
 80022b6:	bf38      	it	cc
 80022b8:	250c      	movcc	r5, #12
 80022ba:	4629      	mov	r1, r5
 80022bc:	4638      	mov	r0, r7
 80022be:	f7ff ffa5 	bl	800220c <sbrk_aligned>
 80022c2:	3001      	adds	r0, #1
 80022c4:	d02b      	beq.n	800231e <_malloc_r+0xd2>
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	442b      	add	r3, r5
 80022ca:	6023      	str	r3, [r4, #0]
 80022cc:	e00e      	b.n	80022ec <_malloc_r+0xa0>
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	1b52      	subs	r2, r2, r5
 80022d2:	d41e      	bmi.n	8002312 <_malloc_r+0xc6>
 80022d4:	2a0b      	cmp	r2, #11
 80022d6:	d916      	bls.n	8002306 <_malloc_r+0xba>
 80022d8:	1961      	adds	r1, r4, r5
 80022da:	42a3      	cmp	r3, r4
 80022dc:	6025      	str	r5, [r4, #0]
 80022de:	bf18      	it	ne
 80022e0:	6059      	strne	r1, [r3, #4]
 80022e2:	6863      	ldr	r3, [r4, #4]
 80022e4:	bf08      	it	eq
 80022e6:	6031      	streq	r1, [r6, #0]
 80022e8:	5162      	str	r2, [r4, r5]
 80022ea:	604b      	str	r3, [r1, #4]
 80022ec:	4638      	mov	r0, r7
 80022ee:	f104 060b 	add.w	r6, r4, #11
 80022f2:	f000 fbbd 	bl	8002a70 <__malloc_unlock>
 80022f6:	f026 0607 	bic.w	r6, r6, #7
 80022fa:	1d23      	adds	r3, r4, #4
 80022fc:	1af2      	subs	r2, r6, r3
 80022fe:	d0b6      	beq.n	800226e <_malloc_r+0x22>
 8002300:	1b9b      	subs	r3, r3, r6
 8002302:	50a3      	str	r3, [r4, r2]
 8002304:	e7b3      	b.n	800226e <_malloc_r+0x22>
 8002306:	6862      	ldr	r2, [r4, #4]
 8002308:	42a3      	cmp	r3, r4
 800230a:	bf0c      	ite	eq
 800230c:	6032      	streq	r2, [r6, #0]
 800230e:	605a      	strne	r2, [r3, #4]
 8002310:	e7ec      	b.n	80022ec <_malloc_r+0xa0>
 8002312:	4623      	mov	r3, r4
 8002314:	6864      	ldr	r4, [r4, #4]
 8002316:	e7b2      	b.n	800227e <_malloc_r+0x32>
 8002318:	4634      	mov	r4, r6
 800231a:	6876      	ldr	r6, [r6, #4]
 800231c:	e7b9      	b.n	8002292 <_malloc_r+0x46>
 800231e:	230c      	movs	r3, #12
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4638      	mov	r0, r7
 8002324:	f000 fba4 	bl	8002a70 <__malloc_unlock>
 8002328:	e7a1      	b.n	800226e <_malloc_r+0x22>
 800232a:	6025      	str	r5, [r4, #0]
 800232c:	e7de      	b.n	80022ec <_malloc_r+0xa0>
 800232e:	bf00      	nop
 8002330:	200000e4 	.word	0x200000e4

08002334 <__sfputc_r>:
 8002334:	6893      	ldr	r3, [r2, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	b410      	push	{r4}
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	da08      	bge.n	8002352 <__sfputc_r+0x1e>
 8002340:	6994      	ldr	r4, [r2, #24]
 8002342:	42a3      	cmp	r3, r4
 8002344:	db01      	blt.n	800234a <__sfputc_r+0x16>
 8002346:	290a      	cmp	r1, #10
 8002348:	d103      	bne.n	8002352 <__sfputc_r+0x1e>
 800234a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234e:	f7ff bc31 	b.w	8001bb4 <__swbuf_r>
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	1c58      	adds	r0, r3, #1
 8002356:	6010      	str	r0, [r2, #0]
 8002358:	7019      	strb	r1, [r3, #0]
 800235a:	4608      	mov	r0, r1
 800235c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002360:	4770      	bx	lr

08002362 <__sfputs_r>:
 8002362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002364:	4606      	mov	r6, r0
 8002366:	460f      	mov	r7, r1
 8002368:	4614      	mov	r4, r2
 800236a:	18d5      	adds	r5, r2, r3
 800236c:	42ac      	cmp	r4, r5
 800236e:	d101      	bne.n	8002374 <__sfputs_r+0x12>
 8002370:	2000      	movs	r0, #0
 8002372:	e007      	b.n	8002384 <__sfputs_r+0x22>
 8002374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002378:	463a      	mov	r2, r7
 800237a:	4630      	mov	r0, r6
 800237c:	f7ff ffda 	bl	8002334 <__sfputc_r>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d1f3      	bne.n	800236c <__sfputs_r+0xa>
 8002384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002388 <_vfiprintf_r>:
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	460d      	mov	r5, r1
 800238e:	b09d      	sub	sp, #116	; 0x74
 8002390:	4614      	mov	r4, r2
 8002392:	4698      	mov	r8, r3
 8002394:	4606      	mov	r6, r0
 8002396:	b118      	cbz	r0, 80023a0 <_vfiprintf_r+0x18>
 8002398:	6983      	ldr	r3, [r0, #24]
 800239a:	b90b      	cbnz	r3, 80023a0 <_vfiprintf_r+0x18>
 800239c:	f7ff fde4 	bl	8001f68 <__sinit>
 80023a0:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <_vfiprintf_r+0x240>)
 80023a2:	429d      	cmp	r5, r3
 80023a4:	d11b      	bne.n	80023de <_vfiprintf_r+0x56>
 80023a6:	6875      	ldr	r5, [r6, #4]
 80023a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023aa:	07d9      	lsls	r1, r3, #31
 80023ac:	d405      	bmi.n	80023ba <_vfiprintf_r+0x32>
 80023ae:	89ab      	ldrh	r3, [r5, #12]
 80023b0:	059a      	lsls	r2, r3, #22
 80023b2:	d402      	bmi.n	80023ba <_vfiprintf_r+0x32>
 80023b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023b6:	f7ff fe75 	bl	80020a4 <__retarget_lock_acquire_recursive>
 80023ba:	89ab      	ldrh	r3, [r5, #12]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	d501      	bpl.n	80023c4 <_vfiprintf_r+0x3c>
 80023c0:	692b      	ldr	r3, [r5, #16]
 80023c2:	b9eb      	cbnz	r3, 8002400 <_vfiprintf_r+0x78>
 80023c4:	4629      	mov	r1, r5
 80023c6:	4630      	mov	r0, r6
 80023c8:	f7ff fc46 	bl	8001c58 <__swsetup_r>
 80023cc:	b1c0      	cbz	r0, 8002400 <_vfiprintf_r+0x78>
 80023ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023d0:	07dc      	lsls	r4, r3, #31
 80023d2:	d50e      	bpl.n	80023f2 <_vfiprintf_r+0x6a>
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	b01d      	add	sp, #116	; 0x74
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <_vfiprintf_r+0x244>)
 80023e0:	429d      	cmp	r5, r3
 80023e2:	d101      	bne.n	80023e8 <_vfiprintf_r+0x60>
 80023e4:	68b5      	ldr	r5, [r6, #8]
 80023e6:	e7df      	b.n	80023a8 <_vfiprintf_r+0x20>
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <_vfiprintf_r+0x248>)
 80023ea:	429d      	cmp	r5, r3
 80023ec:	bf08      	it	eq
 80023ee:	68f5      	ldreq	r5, [r6, #12]
 80023f0:	e7da      	b.n	80023a8 <_vfiprintf_r+0x20>
 80023f2:	89ab      	ldrh	r3, [r5, #12]
 80023f4:	0598      	lsls	r0, r3, #22
 80023f6:	d4ed      	bmi.n	80023d4 <_vfiprintf_r+0x4c>
 80023f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023fa:	f7ff fe54 	bl	80020a6 <__retarget_lock_release_recursive>
 80023fe:	e7e9      	b.n	80023d4 <_vfiprintf_r+0x4c>
 8002400:	2300      	movs	r3, #0
 8002402:	9309      	str	r3, [sp, #36]	; 0x24
 8002404:	2320      	movs	r3, #32
 8002406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800240a:	f8cd 800c 	str.w	r8, [sp, #12]
 800240e:	2330      	movs	r3, #48	; 0x30
 8002410:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80025d4 <_vfiprintf_r+0x24c>
 8002414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002418:	f04f 0901 	mov.w	r9, #1
 800241c:	4623      	mov	r3, r4
 800241e:	469a      	mov	sl, r3
 8002420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002424:	b10a      	cbz	r2, 800242a <_vfiprintf_r+0xa2>
 8002426:	2a25      	cmp	r2, #37	; 0x25
 8002428:	d1f9      	bne.n	800241e <_vfiprintf_r+0x96>
 800242a:	ebba 0b04 	subs.w	fp, sl, r4
 800242e:	d00b      	beq.n	8002448 <_vfiprintf_r+0xc0>
 8002430:	465b      	mov	r3, fp
 8002432:	4622      	mov	r2, r4
 8002434:	4629      	mov	r1, r5
 8002436:	4630      	mov	r0, r6
 8002438:	f7ff ff93 	bl	8002362 <__sfputs_r>
 800243c:	3001      	adds	r0, #1
 800243e:	f000 80aa 	beq.w	8002596 <_vfiprintf_r+0x20e>
 8002442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002444:	445a      	add	r2, fp
 8002446:	9209      	str	r2, [sp, #36]	; 0x24
 8002448:	f89a 3000 	ldrb.w	r3, [sl]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a2 	beq.w	8002596 <_vfiprintf_r+0x20e>
 8002452:	2300      	movs	r3, #0
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800245c:	f10a 0a01 	add.w	sl, sl, #1
 8002460:	9304      	str	r3, [sp, #16]
 8002462:	9307      	str	r3, [sp, #28]
 8002464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002468:	931a      	str	r3, [sp, #104]	; 0x68
 800246a:	4654      	mov	r4, sl
 800246c:	2205      	movs	r2, #5
 800246e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002472:	4858      	ldr	r0, [pc, #352]	; (80025d4 <_vfiprintf_r+0x24c>)
 8002474:	f7fd febc 	bl	80001f0 <memchr>
 8002478:	9a04      	ldr	r2, [sp, #16]
 800247a:	b9d8      	cbnz	r0, 80024b4 <_vfiprintf_r+0x12c>
 800247c:	06d1      	lsls	r1, r2, #27
 800247e:	bf44      	itt	mi
 8002480:	2320      	movmi	r3, #32
 8002482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002486:	0713      	lsls	r3, r2, #28
 8002488:	bf44      	itt	mi
 800248a:	232b      	movmi	r3, #43	; 0x2b
 800248c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002490:	f89a 3000 	ldrb.w	r3, [sl]
 8002494:	2b2a      	cmp	r3, #42	; 0x2a
 8002496:	d015      	beq.n	80024c4 <_vfiprintf_r+0x13c>
 8002498:	9a07      	ldr	r2, [sp, #28]
 800249a:	4654      	mov	r4, sl
 800249c:	2000      	movs	r0, #0
 800249e:	f04f 0c0a 	mov.w	ip, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024a8:	3b30      	subs	r3, #48	; 0x30
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d94e      	bls.n	800254c <_vfiprintf_r+0x1c4>
 80024ae:	b1b0      	cbz	r0, 80024de <_vfiprintf_r+0x156>
 80024b0:	9207      	str	r2, [sp, #28]
 80024b2:	e014      	b.n	80024de <_vfiprintf_r+0x156>
 80024b4:	eba0 0308 	sub.w	r3, r0, r8
 80024b8:	fa09 f303 	lsl.w	r3, r9, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	9304      	str	r3, [sp, #16]
 80024c0:	46a2      	mov	sl, r4
 80024c2:	e7d2      	b.n	800246a <_vfiprintf_r+0xe2>
 80024c4:	9b03      	ldr	r3, [sp, #12]
 80024c6:	1d19      	adds	r1, r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	9103      	str	r1, [sp, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bfbb      	ittet	lt
 80024d0:	425b      	neglt	r3, r3
 80024d2:	f042 0202 	orrlt.w	r2, r2, #2
 80024d6:	9307      	strge	r3, [sp, #28]
 80024d8:	9307      	strlt	r3, [sp, #28]
 80024da:	bfb8      	it	lt
 80024dc:	9204      	strlt	r2, [sp, #16]
 80024de:	7823      	ldrb	r3, [r4, #0]
 80024e0:	2b2e      	cmp	r3, #46	; 0x2e
 80024e2:	d10c      	bne.n	80024fe <_vfiprintf_r+0x176>
 80024e4:	7863      	ldrb	r3, [r4, #1]
 80024e6:	2b2a      	cmp	r3, #42	; 0x2a
 80024e8:	d135      	bne.n	8002556 <_vfiprintf_r+0x1ce>
 80024ea:	9b03      	ldr	r3, [sp, #12]
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	9203      	str	r2, [sp, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bfb8      	it	lt
 80024f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024fa:	3402      	adds	r4, #2
 80024fc:	9305      	str	r3, [sp, #20]
 80024fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80025e4 <_vfiprintf_r+0x25c>
 8002502:	7821      	ldrb	r1, [r4, #0]
 8002504:	2203      	movs	r2, #3
 8002506:	4650      	mov	r0, sl
 8002508:	f7fd fe72 	bl	80001f0 <memchr>
 800250c:	b140      	cbz	r0, 8002520 <_vfiprintf_r+0x198>
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	eba0 000a 	sub.w	r0, r0, sl
 8002514:	fa03 f000 	lsl.w	r0, r3, r0
 8002518:	9b04      	ldr	r3, [sp, #16]
 800251a:	4303      	orrs	r3, r0
 800251c:	3401      	adds	r4, #1
 800251e:	9304      	str	r3, [sp, #16]
 8002520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002524:	482c      	ldr	r0, [pc, #176]	; (80025d8 <_vfiprintf_r+0x250>)
 8002526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800252a:	2206      	movs	r2, #6
 800252c:	f7fd fe60 	bl	80001f0 <memchr>
 8002530:	2800      	cmp	r0, #0
 8002532:	d03f      	beq.n	80025b4 <_vfiprintf_r+0x22c>
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <_vfiprintf_r+0x254>)
 8002536:	bb1b      	cbnz	r3, 8002580 <_vfiprintf_r+0x1f8>
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	3307      	adds	r3, #7
 800253c:	f023 0307 	bic.w	r3, r3, #7
 8002540:	3308      	adds	r3, #8
 8002542:	9303      	str	r3, [sp, #12]
 8002544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002546:	443b      	add	r3, r7
 8002548:	9309      	str	r3, [sp, #36]	; 0x24
 800254a:	e767      	b.n	800241c <_vfiprintf_r+0x94>
 800254c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002550:	460c      	mov	r4, r1
 8002552:	2001      	movs	r0, #1
 8002554:	e7a5      	b.n	80024a2 <_vfiprintf_r+0x11a>
 8002556:	2300      	movs	r3, #0
 8002558:	3401      	adds	r4, #1
 800255a:	9305      	str	r3, [sp, #20]
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 0c0a 	mov.w	ip, #10
 8002562:	4620      	mov	r0, r4
 8002564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002568:	3a30      	subs	r2, #48	; 0x30
 800256a:	2a09      	cmp	r2, #9
 800256c:	d903      	bls.n	8002576 <_vfiprintf_r+0x1ee>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0c5      	beq.n	80024fe <_vfiprintf_r+0x176>
 8002572:	9105      	str	r1, [sp, #20]
 8002574:	e7c3      	b.n	80024fe <_vfiprintf_r+0x176>
 8002576:	fb0c 2101 	mla	r1, ip, r1, r2
 800257a:	4604      	mov	r4, r0
 800257c:	2301      	movs	r3, #1
 800257e:	e7f0      	b.n	8002562 <_vfiprintf_r+0x1da>
 8002580:	ab03      	add	r3, sp, #12
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	462a      	mov	r2, r5
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <_vfiprintf_r+0x258>)
 8002588:	a904      	add	r1, sp, #16
 800258a:	4630      	mov	r0, r6
 800258c:	f3af 8000 	nop.w
 8002590:	4607      	mov	r7, r0
 8002592:	1c78      	adds	r0, r7, #1
 8002594:	d1d6      	bne.n	8002544 <_vfiprintf_r+0x1bc>
 8002596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002598:	07d9      	lsls	r1, r3, #31
 800259a:	d405      	bmi.n	80025a8 <_vfiprintf_r+0x220>
 800259c:	89ab      	ldrh	r3, [r5, #12]
 800259e:	059a      	lsls	r2, r3, #22
 80025a0:	d402      	bmi.n	80025a8 <_vfiprintf_r+0x220>
 80025a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025a4:	f7ff fd7f 	bl	80020a6 <__retarget_lock_release_recursive>
 80025a8:	89ab      	ldrh	r3, [r5, #12]
 80025aa:	065b      	lsls	r3, r3, #25
 80025ac:	f53f af12 	bmi.w	80023d4 <_vfiprintf_r+0x4c>
 80025b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025b2:	e711      	b.n	80023d8 <_vfiprintf_r+0x50>
 80025b4:	ab03      	add	r3, sp, #12
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	462a      	mov	r2, r5
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <_vfiprintf_r+0x258>)
 80025bc:	a904      	add	r1, sp, #16
 80025be:	4630      	mov	r0, r6
 80025c0:	f000 f880 	bl	80026c4 <_printf_i>
 80025c4:	e7e4      	b.n	8002590 <_vfiprintf_r+0x208>
 80025c6:	bf00      	nop
 80025c8:	08002bb4 	.word	0x08002bb4
 80025cc:	08002bd4 	.word	0x08002bd4
 80025d0:	08002b94 	.word	0x08002b94
 80025d4:	08002bf4 	.word	0x08002bf4
 80025d8:	08002bfe 	.word	0x08002bfe
 80025dc:	00000000 	.word	0x00000000
 80025e0:	08002363 	.word	0x08002363
 80025e4:	08002bfa 	.word	0x08002bfa

080025e8 <_printf_common>:
 80025e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025ec:	4616      	mov	r6, r2
 80025ee:	4699      	mov	r9, r3
 80025f0:	688a      	ldr	r2, [r1, #8]
 80025f2:	690b      	ldr	r3, [r1, #16]
 80025f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	bfb8      	it	lt
 80025fc:	4613      	movlt	r3, r2
 80025fe:	6033      	str	r3, [r6, #0]
 8002600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002604:	4607      	mov	r7, r0
 8002606:	460c      	mov	r4, r1
 8002608:	b10a      	cbz	r2, 800260e <_printf_common+0x26>
 800260a:	3301      	adds	r3, #1
 800260c:	6033      	str	r3, [r6, #0]
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	0699      	lsls	r1, r3, #26
 8002612:	bf42      	ittt	mi
 8002614:	6833      	ldrmi	r3, [r6, #0]
 8002616:	3302      	addmi	r3, #2
 8002618:	6033      	strmi	r3, [r6, #0]
 800261a:	6825      	ldr	r5, [r4, #0]
 800261c:	f015 0506 	ands.w	r5, r5, #6
 8002620:	d106      	bne.n	8002630 <_printf_common+0x48>
 8002622:	f104 0a19 	add.w	sl, r4, #25
 8002626:	68e3      	ldr	r3, [r4, #12]
 8002628:	6832      	ldr	r2, [r6, #0]
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	42ab      	cmp	r3, r5
 800262e:	dc26      	bgt.n	800267e <_printf_common+0x96>
 8002630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002634:	1e13      	subs	r3, r2, #0
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	bf18      	it	ne
 800263a:	2301      	movne	r3, #1
 800263c:	0692      	lsls	r2, r2, #26
 800263e:	d42b      	bmi.n	8002698 <_printf_common+0xb0>
 8002640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002644:	4649      	mov	r1, r9
 8002646:	4638      	mov	r0, r7
 8002648:	47c0      	blx	r8
 800264a:	3001      	adds	r0, #1
 800264c:	d01e      	beq.n	800268c <_printf_common+0xa4>
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	68e5      	ldr	r5, [r4, #12]
 8002652:	6832      	ldr	r2, [r6, #0]
 8002654:	f003 0306 	and.w	r3, r3, #6
 8002658:	2b04      	cmp	r3, #4
 800265a:	bf08      	it	eq
 800265c:	1aad      	subeq	r5, r5, r2
 800265e:	68a3      	ldr	r3, [r4, #8]
 8002660:	6922      	ldr	r2, [r4, #16]
 8002662:	bf0c      	ite	eq
 8002664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002668:	2500      	movne	r5, #0
 800266a:	4293      	cmp	r3, r2
 800266c:	bfc4      	itt	gt
 800266e:	1a9b      	subgt	r3, r3, r2
 8002670:	18ed      	addgt	r5, r5, r3
 8002672:	2600      	movs	r6, #0
 8002674:	341a      	adds	r4, #26
 8002676:	42b5      	cmp	r5, r6
 8002678:	d11a      	bne.n	80026b0 <_printf_common+0xc8>
 800267a:	2000      	movs	r0, #0
 800267c:	e008      	b.n	8002690 <_printf_common+0xa8>
 800267e:	2301      	movs	r3, #1
 8002680:	4652      	mov	r2, sl
 8002682:	4649      	mov	r1, r9
 8002684:	4638      	mov	r0, r7
 8002686:	47c0      	blx	r8
 8002688:	3001      	adds	r0, #1
 800268a:	d103      	bne.n	8002694 <_printf_common+0xac>
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002694:	3501      	adds	r5, #1
 8002696:	e7c6      	b.n	8002626 <_printf_common+0x3e>
 8002698:	18e1      	adds	r1, r4, r3
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	2030      	movs	r0, #48	; 0x30
 800269e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026a2:	4422      	add	r2, r4
 80026a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026ac:	3302      	adds	r3, #2
 80026ae:	e7c7      	b.n	8002640 <_printf_common+0x58>
 80026b0:	2301      	movs	r3, #1
 80026b2:	4622      	mov	r2, r4
 80026b4:	4649      	mov	r1, r9
 80026b6:	4638      	mov	r0, r7
 80026b8:	47c0      	blx	r8
 80026ba:	3001      	adds	r0, #1
 80026bc:	d0e6      	beq.n	800268c <_printf_common+0xa4>
 80026be:	3601      	adds	r6, #1
 80026c0:	e7d9      	b.n	8002676 <_printf_common+0x8e>
	...

080026c4 <_printf_i>:
 80026c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026c8:	7e0f      	ldrb	r7, [r1, #24]
 80026ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026cc:	2f78      	cmp	r7, #120	; 0x78
 80026ce:	4691      	mov	r9, r2
 80026d0:	4680      	mov	r8, r0
 80026d2:	460c      	mov	r4, r1
 80026d4:	469a      	mov	sl, r3
 80026d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026da:	d807      	bhi.n	80026ec <_printf_i+0x28>
 80026dc:	2f62      	cmp	r7, #98	; 0x62
 80026de:	d80a      	bhi.n	80026f6 <_printf_i+0x32>
 80026e0:	2f00      	cmp	r7, #0
 80026e2:	f000 80d8 	beq.w	8002896 <_printf_i+0x1d2>
 80026e6:	2f58      	cmp	r7, #88	; 0x58
 80026e8:	f000 80a3 	beq.w	8002832 <_printf_i+0x16e>
 80026ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026f4:	e03a      	b.n	800276c <_printf_i+0xa8>
 80026f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026fa:	2b15      	cmp	r3, #21
 80026fc:	d8f6      	bhi.n	80026ec <_printf_i+0x28>
 80026fe:	a101      	add	r1, pc, #4	; (adr r1, 8002704 <_printf_i+0x40>)
 8002700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002704:	0800275d 	.word	0x0800275d
 8002708:	08002771 	.word	0x08002771
 800270c:	080026ed 	.word	0x080026ed
 8002710:	080026ed 	.word	0x080026ed
 8002714:	080026ed 	.word	0x080026ed
 8002718:	080026ed 	.word	0x080026ed
 800271c:	08002771 	.word	0x08002771
 8002720:	080026ed 	.word	0x080026ed
 8002724:	080026ed 	.word	0x080026ed
 8002728:	080026ed 	.word	0x080026ed
 800272c:	080026ed 	.word	0x080026ed
 8002730:	0800287d 	.word	0x0800287d
 8002734:	080027a1 	.word	0x080027a1
 8002738:	0800285f 	.word	0x0800285f
 800273c:	080026ed 	.word	0x080026ed
 8002740:	080026ed 	.word	0x080026ed
 8002744:	0800289f 	.word	0x0800289f
 8002748:	080026ed 	.word	0x080026ed
 800274c:	080027a1 	.word	0x080027a1
 8002750:	080026ed 	.word	0x080026ed
 8002754:	080026ed 	.word	0x080026ed
 8002758:	08002867 	.word	0x08002867
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	1d1a      	adds	r2, r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	602a      	str	r2, [r5, #0]
 8002764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800276c:	2301      	movs	r3, #1
 800276e:	e0a3      	b.n	80028b8 <_printf_i+0x1f4>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	6829      	ldr	r1, [r5, #0]
 8002774:	0606      	lsls	r6, r0, #24
 8002776:	f101 0304 	add.w	r3, r1, #4
 800277a:	d50a      	bpl.n	8002792 <_printf_i+0xce>
 800277c:	680e      	ldr	r6, [r1, #0]
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	2e00      	cmp	r6, #0
 8002782:	da03      	bge.n	800278c <_printf_i+0xc8>
 8002784:	232d      	movs	r3, #45	; 0x2d
 8002786:	4276      	negs	r6, r6
 8002788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800278c:	485e      	ldr	r0, [pc, #376]	; (8002908 <_printf_i+0x244>)
 800278e:	230a      	movs	r3, #10
 8002790:	e019      	b.n	80027c6 <_printf_i+0x102>
 8002792:	680e      	ldr	r6, [r1, #0]
 8002794:	602b      	str	r3, [r5, #0]
 8002796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800279a:	bf18      	it	ne
 800279c:	b236      	sxthne	r6, r6
 800279e:	e7ef      	b.n	8002780 <_printf_i+0xbc>
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	1d19      	adds	r1, r3, #4
 80027a6:	6029      	str	r1, [r5, #0]
 80027a8:	0601      	lsls	r1, r0, #24
 80027aa:	d501      	bpl.n	80027b0 <_printf_i+0xec>
 80027ac:	681e      	ldr	r6, [r3, #0]
 80027ae:	e002      	b.n	80027b6 <_printf_i+0xf2>
 80027b0:	0646      	lsls	r6, r0, #25
 80027b2:	d5fb      	bpl.n	80027ac <_printf_i+0xe8>
 80027b4:	881e      	ldrh	r6, [r3, #0]
 80027b6:	4854      	ldr	r0, [pc, #336]	; (8002908 <_printf_i+0x244>)
 80027b8:	2f6f      	cmp	r7, #111	; 0x6f
 80027ba:	bf0c      	ite	eq
 80027bc:	2308      	moveq	r3, #8
 80027be:	230a      	movne	r3, #10
 80027c0:	2100      	movs	r1, #0
 80027c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027c6:	6865      	ldr	r5, [r4, #4]
 80027c8:	60a5      	str	r5, [r4, #8]
 80027ca:	2d00      	cmp	r5, #0
 80027cc:	bfa2      	ittt	ge
 80027ce:	6821      	ldrge	r1, [r4, #0]
 80027d0:	f021 0104 	bicge.w	r1, r1, #4
 80027d4:	6021      	strge	r1, [r4, #0]
 80027d6:	b90e      	cbnz	r6, 80027dc <_printf_i+0x118>
 80027d8:	2d00      	cmp	r5, #0
 80027da:	d04d      	beq.n	8002878 <_printf_i+0x1b4>
 80027dc:	4615      	mov	r5, r2
 80027de:	fbb6 f1f3 	udiv	r1, r6, r3
 80027e2:	fb03 6711 	mls	r7, r3, r1, r6
 80027e6:	5dc7      	ldrb	r7, [r0, r7]
 80027e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027ec:	4637      	mov	r7, r6
 80027ee:	42bb      	cmp	r3, r7
 80027f0:	460e      	mov	r6, r1
 80027f2:	d9f4      	bls.n	80027de <_printf_i+0x11a>
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d10b      	bne.n	8002810 <_printf_i+0x14c>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	07de      	lsls	r6, r3, #31
 80027fc:	d508      	bpl.n	8002810 <_printf_i+0x14c>
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	6861      	ldr	r1, [r4, #4]
 8002802:	4299      	cmp	r1, r3
 8002804:	bfde      	ittt	le
 8002806:	2330      	movle	r3, #48	; 0x30
 8002808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800280c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002810:	1b52      	subs	r2, r2, r5
 8002812:	6122      	str	r2, [r4, #16]
 8002814:	f8cd a000 	str.w	sl, [sp]
 8002818:	464b      	mov	r3, r9
 800281a:	aa03      	add	r2, sp, #12
 800281c:	4621      	mov	r1, r4
 800281e:	4640      	mov	r0, r8
 8002820:	f7ff fee2 	bl	80025e8 <_printf_common>
 8002824:	3001      	adds	r0, #1
 8002826:	d14c      	bne.n	80028c2 <_printf_i+0x1fe>
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	b004      	add	sp, #16
 800282e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002832:	4835      	ldr	r0, [pc, #212]	; (8002908 <_printf_i+0x244>)
 8002834:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002838:	6829      	ldr	r1, [r5, #0]
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002840:	6029      	str	r1, [r5, #0]
 8002842:	061d      	lsls	r5, r3, #24
 8002844:	d514      	bpl.n	8002870 <_printf_i+0x1ac>
 8002846:	07df      	lsls	r7, r3, #31
 8002848:	bf44      	itt	mi
 800284a:	f043 0320 	orrmi.w	r3, r3, #32
 800284e:	6023      	strmi	r3, [r4, #0]
 8002850:	b91e      	cbnz	r6, 800285a <_printf_i+0x196>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	f023 0320 	bic.w	r3, r3, #32
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	2310      	movs	r3, #16
 800285c:	e7b0      	b.n	80027c0 <_printf_i+0xfc>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	2378      	movs	r3, #120	; 0x78
 8002868:	4828      	ldr	r0, [pc, #160]	; (800290c <_printf_i+0x248>)
 800286a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800286e:	e7e3      	b.n	8002838 <_printf_i+0x174>
 8002870:	0659      	lsls	r1, r3, #25
 8002872:	bf48      	it	mi
 8002874:	b2b6      	uxthmi	r6, r6
 8002876:	e7e6      	b.n	8002846 <_printf_i+0x182>
 8002878:	4615      	mov	r5, r2
 800287a:	e7bb      	b.n	80027f4 <_printf_i+0x130>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	6826      	ldr	r6, [r4, #0]
 8002880:	6961      	ldr	r1, [r4, #20]
 8002882:	1d18      	adds	r0, r3, #4
 8002884:	6028      	str	r0, [r5, #0]
 8002886:	0635      	lsls	r5, r6, #24
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	d501      	bpl.n	8002890 <_printf_i+0x1cc>
 800288c:	6019      	str	r1, [r3, #0]
 800288e:	e002      	b.n	8002896 <_printf_i+0x1d2>
 8002890:	0670      	lsls	r0, r6, #25
 8002892:	d5fb      	bpl.n	800288c <_printf_i+0x1c8>
 8002894:	8019      	strh	r1, [r3, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	6123      	str	r3, [r4, #16]
 800289a:	4615      	mov	r5, r2
 800289c:	e7ba      	b.n	8002814 <_printf_i+0x150>
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	1d1a      	adds	r2, r3, #4
 80028a2:	602a      	str	r2, [r5, #0]
 80028a4:	681d      	ldr	r5, [r3, #0]
 80028a6:	6862      	ldr	r2, [r4, #4]
 80028a8:	2100      	movs	r1, #0
 80028aa:	4628      	mov	r0, r5
 80028ac:	f7fd fca0 	bl	80001f0 <memchr>
 80028b0:	b108      	cbz	r0, 80028b6 <_printf_i+0x1f2>
 80028b2:	1b40      	subs	r0, r0, r5
 80028b4:	6060      	str	r0, [r4, #4]
 80028b6:	6863      	ldr	r3, [r4, #4]
 80028b8:	6123      	str	r3, [r4, #16]
 80028ba:	2300      	movs	r3, #0
 80028bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c0:	e7a8      	b.n	8002814 <_printf_i+0x150>
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	462a      	mov	r2, r5
 80028c6:	4649      	mov	r1, r9
 80028c8:	4640      	mov	r0, r8
 80028ca:	47d0      	blx	sl
 80028cc:	3001      	adds	r0, #1
 80028ce:	d0ab      	beq.n	8002828 <_printf_i+0x164>
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	079b      	lsls	r3, r3, #30
 80028d4:	d413      	bmi.n	80028fe <_printf_i+0x23a>
 80028d6:	68e0      	ldr	r0, [r4, #12]
 80028d8:	9b03      	ldr	r3, [sp, #12]
 80028da:	4298      	cmp	r0, r3
 80028dc:	bfb8      	it	lt
 80028de:	4618      	movlt	r0, r3
 80028e0:	e7a4      	b.n	800282c <_printf_i+0x168>
 80028e2:	2301      	movs	r3, #1
 80028e4:	4632      	mov	r2, r6
 80028e6:	4649      	mov	r1, r9
 80028e8:	4640      	mov	r0, r8
 80028ea:	47d0      	blx	sl
 80028ec:	3001      	adds	r0, #1
 80028ee:	d09b      	beq.n	8002828 <_printf_i+0x164>
 80028f0:	3501      	adds	r5, #1
 80028f2:	68e3      	ldr	r3, [r4, #12]
 80028f4:	9903      	ldr	r1, [sp, #12]
 80028f6:	1a5b      	subs	r3, r3, r1
 80028f8:	42ab      	cmp	r3, r5
 80028fa:	dcf2      	bgt.n	80028e2 <_printf_i+0x21e>
 80028fc:	e7eb      	b.n	80028d6 <_printf_i+0x212>
 80028fe:	2500      	movs	r5, #0
 8002900:	f104 0619 	add.w	r6, r4, #25
 8002904:	e7f5      	b.n	80028f2 <_printf_i+0x22e>
 8002906:	bf00      	nop
 8002908:	08002c05 	.word	0x08002c05
 800290c:	08002c16 	.word	0x08002c16

08002910 <_sbrk_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d06      	ldr	r5, [pc, #24]	; (800292c <_sbrk_r+0x1c>)
 8002914:	2300      	movs	r3, #0
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	f7fd fd4e 	bl	80003bc <_sbrk>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_sbrk_r+0x1a>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_sbrk_r+0x1a>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	200000ec 	.word	0x200000ec

08002930 <__sread>:
 8002930:	b510      	push	{r4, lr}
 8002932:	460c      	mov	r4, r1
 8002934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002938:	f000 f8a0 	bl	8002a7c <_read_r>
 800293c:	2800      	cmp	r0, #0
 800293e:	bfab      	itete	ge
 8002940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002942:	89a3      	ldrhlt	r3, [r4, #12]
 8002944:	181b      	addge	r3, r3, r0
 8002946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800294a:	bfac      	ite	ge
 800294c:	6563      	strge	r3, [r4, #84]	; 0x54
 800294e:	81a3      	strhlt	r3, [r4, #12]
 8002950:	bd10      	pop	{r4, pc}

08002952 <__swrite>:
 8002952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002956:	461f      	mov	r7, r3
 8002958:	898b      	ldrh	r3, [r1, #12]
 800295a:	05db      	lsls	r3, r3, #23
 800295c:	4605      	mov	r5, r0
 800295e:	460c      	mov	r4, r1
 8002960:	4616      	mov	r6, r2
 8002962:	d505      	bpl.n	8002970 <__swrite+0x1e>
 8002964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002968:	2302      	movs	r3, #2
 800296a:	2200      	movs	r2, #0
 800296c:	f000 f868 	bl	8002a40 <_lseek_r>
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800297a:	81a3      	strh	r3, [r4, #12]
 800297c:	4632      	mov	r2, r6
 800297e:	463b      	mov	r3, r7
 8002980:	4628      	mov	r0, r5
 8002982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002986:	f000 b817 	b.w	80029b8 <_write_r>

0800298a <__sseek>:
 800298a:	b510      	push	{r4, lr}
 800298c:	460c      	mov	r4, r1
 800298e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002992:	f000 f855 	bl	8002a40 <_lseek_r>
 8002996:	1c43      	adds	r3, r0, #1
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	bf15      	itete	ne
 800299c:	6560      	strne	r0, [r4, #84]	; 0x54
 800299e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029a6:	81a3      	strheq	r3, [r4, #12]
 80029a8:	bf18      	it	ne
 80029aa:	81a3      	strhne	r3, [r4, #12]
 80029ac:	bd10      	pop	{r4, pc}

080029ae <__sclose>:
 80029ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b2:	f000 b813 	b.w	80029dc <_close_r>
	...

080029b8 <_write_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4d07      	ldr	r5, [pc, #28]	; (80029d8 <_write_r+0x20>)
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	602a      	str	r2, [r5, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7fd fca7 	bl	800031a <_write>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_write_r+0x1e>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_write_r+0x1e>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	200000ec 	.word	0x200000ec

080029dc <_close_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4d06      	ldr	r5, [pc, #24]	; (80029f8 <_close_r+0x1c>)
 80029e0:	2300      	movs	r3, #0
 80029e2:	4604      	mov	r4, r0
 80029e4:	4608      	mov	r0, r1
 80029e6:	602b      	str	r3, [r5, #0]
 80029e8:	f7fd fcb3 	bl	8000352 <_close>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d102      	bne.n	80029f6 <_close_r+0x1a>
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	b103      	cbz	r3, 80029f6 <_close_r+0x1a>
 80029f4:	6023      	str	r3, [r4, #0]
 80029f6:	bd38      	pop	{r3, r4, r5, pc}
 80029f8:	200000ec 	.word	0x200000ec

080029fc <_fstat_r>:
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	4d07      	ldr	r5, [pc, #28]	; (8002a1c <_fstat_r+0x20>)
 8002a00:	2300      	movs	r3, #0
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	f7fd fcae 	bl	800036a <_fstat>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d102      	bne.n	8002a18 <_fstat_r+0x1c>
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	b103      	cbz	r3, 8002a18 <_fstat_r+0x1c>
 8002a16:	6023      	str	r3, [r4, #0]
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200000ec 	.word	0x200000ec

08002a20 <_isatty_r>:
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	4d06      	ldr	r5, [pc, #24]	; (8002a3c <_isatty_r+0x1c>)
 8002a24:	2300      	movs	r3, #0
 8002a26:	4604      	mov	r4, r0
 8002a28:	4608      	mov	r0, r1
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	f7fd fcad 	bl	800038a <_isatty>
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	d102      	bne.n	8002a3a <_isatty_r+0x1a>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	b103      	cbz	r3, 8002a3a <_isatty_r+0x1a>
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	200000ec 	.word	0x200000ec

08002a40 <_lseek_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4d07      	ldr	r5, [pc, #28]	; (8002a60 <_lseek_r+0x20>)
 8002a44:	4604      	mov	r4, r0
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	602a      	str	r2, [r5, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f7fd fca6 	bl	80003a0 <_lseek>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d102      	bne.n	8002a5e <_lseek_r+0x1e>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	b103      	cbz	r3, 8002a5e <_lseek_r+0x1e>
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	200000ec 	.word	0x200000ec

08002a64 <__malloc_lock>:
 8002a64:	4801      	ldr	r0, [pc, #4]	; (8002a6c <__malloc_lock+0x8>)
 8002a66:	f7ff bb1d 	b.w	80020a4 <__retarget_lock_acquire_recursive>
 8002a6a:	bf00      	nop
 8002a6c:	200000e1 	.word	0x200000e1

08002a70 <__malloc_unlock>:
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <__malloc_unlock+0x8>)
 8002a72:	f7ff bb18 	b.w	80020a6 <__retarget_lock_release_recursive>
 8002a76:	bf00      	nop
 8002a78:	200000e1 	.word	0x200000e1

08002a7c <_read_r>:
 8002a7c:	b538      	push	{r3, r4, r5, lr}
 8002a7e:	4d07      	ldr	r5, [pc, #28]	; (8002a9c <_read_r+0x20>)
 8002a80:	4604      	mov	r4, r0
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	2200      	movs	r2, #0
 8002a88:	602a      	str	r2, [r5, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f7fd fc28 	bl	80002e0 <_read>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_read_r+0x1e>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_read_r+0x1e>
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	200000ec 	.word	0x200000ec

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
