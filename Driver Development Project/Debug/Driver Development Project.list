
Driver Development Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c60  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e08  08000e08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e08  08000e08  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000e08  08000e08  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e08  08000e08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000064  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001919  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000155c  00000000  00000000  00021969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004c6  00000000  00000000  00022ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  00023390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000094eb  00000000  00000000  00023500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000138  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000d50  00000000  00000000  0002cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002d878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000534  00000000  00000000  0002d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000df0 	.word	0x08000df0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000024 	.word	0x20000024
 80001e4:	08000df0 	.word	0x08000df0

080001e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f2:	490d      	ldr	r1, [pc, #52]	; (8000228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <LoopForever+0xe>)
  movs r3, #0
 80001f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f8:	e002      	b.n	8000200 <LoopCopyDataInit>

080001fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fe:	3304      	adds	r3, #4

08000200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000204:	d3f9      	bcc.n	80001fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000208:	4c0a      	ldr	r4, [pc, #40]	; (8000234 <LoopForever+0x16>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800020c:	e001      	b.n	8000212 <LoopFillZerobss>

0800020e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000210:	3204      	adds	r2, #4

08000212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000214:	d3fb      	bcc.n	800020e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000216:	f000 fdc7 	bl	8000da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021a:	f000 f87b 	bl	8000314 <main>

0800021e <LoopForever>:

LoopForever:
    b LoopForever
 800021e:	e7fe      	b.n	800021e <LoopForever>
  ldr   r0, =_estack
 8000220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000228:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800022c:	08000e10 	.word	0x08000e10
  ldr r2, =_sbss
 8000230:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000234:	20000084 	.word	0x20000084

08000238 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000238:	e7fe      	b.n	8000238 <ADC_IRQHandler>
	...

0800023c <delay>:

#include "stm32f407xx.h"
#include <string.h>

void delay(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e002      	b.n	800024e <delay+0x12>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <delay+0x28>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d9f8      	bls.n	8000248 <delay+0xc>
}
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	0003d08f 	.word	0x0003d08f

08000268 <I2C1_GPIO_Inits>:
void I2C1_GPIO_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
	//GPIO pins must be configured for AF mode
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <I2C1_GPIO_Inits+0x40>)
 8000270:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000272:	2302      	movs	r3, #2
 8000274:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000276:	2304      	movs	r3, #4
 8000278:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800027a:	2301      	movs	r3, #1
 800027c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800027e:	2301      	movs	r3, #1
 8000280:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]

	//SCLK
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000286:	2306      	movs	r3, #6
 8000288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f90f 	bl	80004b0 <GPIO_Init>

	//MOSI
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000292:	2307      	movs	r3, #7
 8000294:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f909 	bl	80004b0 <GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020400 	.word	0x40020400

080002ac <I2C1_Inits>:

#define MY_ADDR 0x61
#define SLAVE_ADDR 0x68

void I2C1_Inits(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <I2C1_Inits+0x2c>)
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <I2C1_Inits+0x30>)
 80002b4:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <I2C1_Inits+0x2c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <I2C1_Inits+0x2c>)
 80002be:	2261      	movs	r2, #97	; 0x61
 80002c0:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <I2C1_Inits+0x2c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <I2C1_Inits+0x2c>)
 80002ca:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <I2C1_Inits+0x34>)
 80002cc:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <I2C1_Inits+0x2c>)
 80002d0:	f000 fb7c 	bl	80009cc <I2C_Init>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000003c 	.word	0x2000003c
 80002dc:	40005400 	.word	0x40005400
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <Btn_GPIO_Inits>:

void Btn_GPIO_Inits(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <Btn_GPIO_Inits+0x2c>)
 80002ec:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002f2:	2300      	movs	r3, #0
 80002f4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002f6:	2302      	movs	r3, #2
 80002f8:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002fa:	2300      	movs	r3, #0
 80002fc:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIOBtn);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8d5 	bl	80004b0 <GPIO_Init>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40020000 	.word	0x40020000

08000314 <main>:


int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af02      	add	r7, sp, #8

	uint8_t commandcode;
	uint8_t len;

	//Intalize peripheals
	Btn_GPIO_Inits();
 800031a:	f7ff ffe3 	bl	80002e4 <Btn_GPIO_Inits>
	I2C1_GPIO_Inits();
 800031e:	f7ff ffa3 	bl	8000268 <I2C1_GPIO_Inits>
	I2C1_Inits();
 8000322:	f7ff ffc3 	bl	80002ac <I2C1_Inits>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	481a      	ldr	r0, [pc, #104]	; (8000394 <main+0x80>)
 800032a:	f000 fcf0 	bl	8000d0e <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	4818      	ldr	r0, [pc, #96]	; (8000394 <main+0x80>)
 8000332:	f000 fd1c 	bl	8000d6e <I2C_ManageAcking>
	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000336:	bf00      	nop
 8000338:	2100      	movs	r1, #0
 800033a:	4817      	ldr	r0, [pc, #92]	; (8000398 <main+0x84>)
 800033c:	f000 fa46 	bl	80007cc <GPIO_ReadFromInputPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <main+0x24>
		delay();
 8000346:	f7ff ff79 	bl	800023c <delay>

		//Send the command code that will cause slave to send length of data
		commandcode = 0x51;
 800034a:	2351      	movs	r3, #81	; 0x51
 800034c:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 800034e:	1df9      	adds	r1, r7, #7
 8000350:	2301      	movs	r3, #1
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2368      	movs	r3, #104	; 0x68
 8000356:	2201      	movs	r2, #1
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <main+0x88>)
 800035a:	f000 fbe7 	bl	8000b2c <I2C_MasterSendData>

		//Read the length of the data from the slave
		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 800035e:	1db9      	adds	r1, r7, #6
 8000360:	2301      	movs	r3, #1
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2368      	movs	r3, #104	; 0x68
 8000366:	2201      	movs	r2, #1
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <main+0x88>)
 800036a:	f000 fc42 	bl	8000bf2 <I2C_MasterReceiveData>

		//Send the command to slave to send data
		commandcode = 0x52;
 800036e:	2352      	movs	r3, #82	; 0x52
 8000370:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 8000372:	1df9      	adds	r1, r7, #7
 8000374:	2301      	movs	r3, #1
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2368      	movs	r3, #104	; 0x68
 800037a:	2201      	movs	r2, #1
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <main+0x88>)
 800037e:	f000 fbd5 	bl	8000b2c <I2C_MasterSendData>

		//Read the  data from the slave
		I2C_MasterReceiveData(&I2C1Handle, rcv_buff, len, SLAVE_ADDR,I2C_DISABLE_SR);
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2368      	movs	r3, #104	; 0x68
 800038a:	4905      	ldr	r1, [pc, #20]	; (80003a0 <main+0x8c>)
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <main+0x88>)
 800038e:	f000 fc30 	bl	8000bf2 <I2C_MasterReceiveData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000392:	e7d0      	b.n	8000336 <main+0x22>
 8000394:	40005400 	.word	0x40005400
 8000398:	40020000 	.word	0x40020000
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	20000064 	.word	0x20000064

080003a4 <GPIO_PeriClockControl>:
 * @Note              - the base address of gpio peripheal is used as a parameter as it allows the inuse GPIO port to be distnigused
 *********************************************************************/

//Peripheal clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d161      	bne.n	800047a <GPIO_PeriClockControl+0xd6>
	{
		//In header file for GPIO macros are set for all GPIO addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pGPIOx == GPIOA)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a33      	ldr	r2, [pc, #204]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003be:	4b33      	ldr	r3, [pc, #204]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_EN();
		}
	}
}
 80003ca:	e056      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a30      	ldr	r2, [pc, #192]	; (8000490 <GPIO_PeriClockControl+0xec>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e04b      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a2b      	ldr	r2, [pc, #172]	; (8000494 <GPIO_PeriClockControl+0xf0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ea:	4b28      	ldr	r3, [pc, #160]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a27      	ldr	r2, [pc, #156]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e040      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a27      	ldr	r2, [pc, #156]	; (8000498 <GPIO_PeriClockControl+0xf4>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a21      	ldr	r2, [pc, #132]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e035      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a22      	ldr	r2, [pc, #136]	; (800049c <GPIO_PeriClockControl+0xf8>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <GPIO_PeriClockControl+0xe8>)
 800041c:	f043 0310 	orr.w	r3, r3, #16
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e02a      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a1e      	ldr	r2, [pc, #120]	; (80004a0 <GPIO_PeriClockControl+0xfc>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <GPIO_PeriClockControl+0xe8>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a16      	ldr	r2, [pc, #88]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e01f      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <GPIO_PeriClockControl+0x100>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a11      	ldr	r2, [pc, #68]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e014      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <GPIO_PeriClockControl+0x104>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <GPIO_PeriClockControl+0xe8>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <GPIO_PeriClockControl+0xe8>)
 800045e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e009      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <GPIO_PeriClockControl+0x108>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a06      	ldr	r2, [pc, #24]	; (800048c <GPIO_PeriClockControl+0xe8>)
 8000474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40020000 	.word	0x40020000
 800048c:	40023800 	.word	0x40023800
 8000490:	40020400 	.word	0x40020400
 8000494:	40020800 	.word	0x40020800
 8000498:	40020c00 	.word	0x40020c00
 800049c:	40021000 	.word	0x40021000
 80004a0:	40021400 	.word	0x40021400
 80004a4:	40021800 	.word	0x40021800
 80004a8:	40021c00 	.word	0x40021c00
 80004ac:	40022000 	.word	0x40022000

080004b0 <GPIO_Init>:
 *
 * @Note              - none
 *********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]

	//Enable peripheal clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff70 	bl	80003a4 <GPIO_PeriClockControl>
	//Set mode of GPIO some modes are interupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d810      	bhi.n	80004ee <GPIO_Init+0x3e>
	{
		//Bit shifted by two for each pin number
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	4619      	mov	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	e0d4      	b.n	8000698 <GPIO_Init+0x1e8>
	}
	else
	{
		//EXTI can trigger an interupt on GPIO on falling edge, rising edge or both.
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d117      	bne.n	8000526 <GPIO_Init+0x76>
		{
			//Set the FTSR and clear the correpsoning RSTR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b4e      	ldr	r3, [pc, #312]	; (8000630 <GPIO_Init+0x180>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a4a      	ldr	r2, [pc, #296]	; (8000630 <GPIO_Init+0x180>)
 8000508:	430b      	orrs	r3, r1
 800050a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <GPIO_Init+0x180>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a44      	ldr	r2, [pc, #272]	; (8000630 <GPIO_Init+0x180>)
 8000520:	400b      	ands	r3, r1
 8000522:	6093      	str	r3, [r2, #8]
 8000524:	e035      	b.n	8000592 <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b04      	cmp	r3, #4
 800052c:	d117      	bne.n	800055e <GPIO_Init+0xae>
		{
			//Set the RTSR and clear the correpsoning FTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b40      	ldr	r3, [pc, #256]	; (8000630 <GPIO_Init+0x180>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a3c      	ldr	r2, [pc, #240]	; (8000630 <GPIO_Init+0x180>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000544:	4b3a      	ldr	r3, [pc, #232]	; (8000630 <GPIO_Init+0x180>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	43d2      	mvns	r2, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a36      	ldr	r2, [pc, #216]	; (8000630 <GPIO_Init+0x180>)
 8000558:	400b      	ands	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]
 800055c:	e019      	b.n	8000592 <GPIO_Init+0xe2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	2b06      	cmp	r3, #6
 8000564:	d115      	bne.n	8000592 <GPIO_Init+0xe2>
		{
			//Set both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000566:	4b32      	ldr	r3, [pc, #200]	; (8000630 <GPIO_Init+0x180>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7912      	ldrb	r2, [r2, #4]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <GPIO_Init+0x180>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <GPIO_Init+0x180>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	4611      	mov	r1, r2
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <GPIO_Init+0x180>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCF_EXTICR
		//Before using the peripheal it must be enabled
		SYSCFG_PCLK_EN();
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <GPIO_Init+0x184>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a27      	ldr	r2, [pc, #156]	; (8000634 <GPIO_Init+0x184>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	6453      	str	r3, [r2, #68]	; 0x44

		//There are four registers each storing 4EXTI therefore we must divide by four to find this register
		uint8_t subRegister = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	089b      	lsrs	r3, r3, #2
 80005a4:	73fb      	strb	r3, [r7, #15]
		uint8_t offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	f003 0303 	and.w	r3, r3, #3
 80005ae:	73bb      	strb	r3, [r7, #14]

		//Port code stores the value for the resptive port ie a, b, c ,d
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <GPIO_Init+0x188>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d050      	beq.n	800065c <GPIO_Init+0x1ac>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1f      	ldr	r2, [pc, #124]	; (800063c <GPIO_Init+0x18c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d032      	beq.n	800062a <GPIO_Init+0x17a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <GPIO_Init+0x190>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d02b      	beq.n	8000626 <GPIO_Init+0x176>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <GPIO_Init+0x194>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d024      	beq.n	8000622 <GPIO_Init+0x172>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <GPIO_Init+0x198>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d01d      	beq.n	800061e <GPIO_Init+0x16e>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <GPIO_Init+0x19c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d016      	beq.n	800061a <GPIO_Init+0x16a>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <GPIO_Init+0x1a0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00f      	beq.n	8000616 <GPIO_Init+0x166>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <GPIO_Init+0x1a4>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d008      	beq.n	8000612 <GPIO_Init+0x162>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <GPIO_Init+0x1a8>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d101      	bne.n	800060e <GPIO_Init+0x15e>
 800060a:	2308      	movs	r3, #8
 800060c:	e027      	b.n	800065e <GPIO_Init+0x1ae>
 800060e:	2300      	movs	r3, #0
 8000610:	e025      	b.n	800065e <GPIO_Init+0x1ae>
 8000612:	2307      	movs	r3, #7
 8000614:	e023      	b.n	800065e <GPIO_Init+0x1ae>
 8000616:	2306      	movs	r3, #6
 8000618:	e021      	b.n	800065e <GPIO_Init+0x1ae>
 800061a:	2305      	movs	r3, #5
 800061c:	e01f      	b.n	800065e <GPIO_Init+0x1ae>
 800061e:	2304      	movs	r3, #4
 8000620:	e01d      	b.n	800065e <GPIO_Init+0x1ae>
 8000622:	2303      	movs	r3, #3
 8000624:	e01b      	b.n	800065e <GPIO_Init+0x1ae>
 8000626:	2302      	movs	r3, #2
 8000628:	e019      	b.n	800065e <GPIO_Init+0x1ae>
 800062a:	2301      	movs	r3, #1
 800062c:	e017      	b.n	800065e <GPIO_Init+0x1ae>
 800062e:	bf00      	nop
 8000630:	40013c00 	.word	0x40013c00
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40021400 	.word	0x40021400
 8000650:	40021800 	.word	0x40021800
 8000654:	40021c00 	.word	0x40021c00
 8000658:	40022000 	.word	0x40022000
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]


		SYSCFG->EXTICR[subRegister] |= portCode << offset*4;
 8000660:	4a58      	ldr	r2, [pc, #352]	; (80007c4 <GPIO_Init+0x314>)
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	3302      	adds	r3, #2
 8000666:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066a:	7b79      	ldrb	r1, [r7, #13]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	4618      	mov	r0, r3
 8000676:	4953      	ldr	r1, [pc, #332]	; (80007c4 <GPIO_Init+0x314>)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4302      	orrs	r2, r0
 800067c:	3302      	adds	r3, #2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable the exti interupt deilever
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000682:	4b51      	ldr	r3, [pc, #324]	; (80007c8 <GPIO_Init+0x318>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	7912      	ldrb	r2, [r2, #4]
 800068a:	4611      	mov	r1, r2
 800068c:	2201      	movs	r2, #1
 800068e:	408a      	lsls	r2, r1
 8000690:	4611      	mov	r1, r2
 8000692:	4a4d      	ldr	r2, [pc, #308]	; (80007c8 <GPIO_Init+0x318>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6013      	str	r3, [r2, #0]

	}

	//Set speed - bits must be cleared as they may have a random unexpected value
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	400a      	ands	r2, r1
 80006b4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	609a      	str	r2, [r3, #8]

	//Set PUPD
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	79db      	ldrb	r3, [r3, #7]
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	430a      	orrs	r2, r1
 8000712:	60da      	str	r2, [r3, #12]

	//configure the output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	400a      	ands	r2, r1
 8000730:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7a1b      	ldrb	r3, [r3, #8]
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	4619      	mov	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	430a      	orrs	r2, r1
 800074e:	605a      	str	r2, [r3, #4]

	//configure alternate fuctionality mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d131      	bne.n	80007bc <GPIO_Init+0x30c>
	{
		//Alternate functionality register has a higher and lower which we must determine what to use
		uint8_t HorLReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	733b      	strb	r3, [r7, #12]
		uint8_t relativeBitPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	72fb      	strb	r3, [r7, #11]

		pGPIOHandle->pGPIOx->AFR[HorLReg] &= ~(0xF << (4*relativeBitPos ));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7b3a      	ldrb	r2, [r7, #12]
 8000770:	3208      	adds	r2, #8
 8000772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	220f      	movs	r2, #15
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7b3a      	ldrb	r2, [r7, #12]
 800078a:	4001      	ands	r1, r0
 800078c:	3208      	adds	r2, #8
 800078e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[HorLReg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*relativeBitPos ));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	7b3a      	ldrb	r2, [r7, #12]
 8000798:	3208      	adds	r2, #8
 800079a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7a5b      	ldrb	r3, [r3, #9]
 80007a2:	461a      	mov	r2, r3
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7b3a      	ldrb	r2, [r7, #12]
 80007b4:	4301      	orrs	r1, r0
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40013800 	.word	0x40013800
 80007c8:	40013c00 	.word	0x40013c00

080007cc <GPIO_ReadFromInputPin>:
 *
 * @Note              - none
 *********************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	//Shift the value to the LSB then mask all other bits
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691a      	ldr	r2, [r3, #16]
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	fa22 f303 	lsr.w	r3, r2, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
	return value;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_START);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	//Slave address is 7 bits from 7:1. The first bit must be cleared as its r/w bit and we are wirting
	SlaveAddr <<= 1;
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8000832:	78fa      	ldrb	r2, [r7, #3]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	611a      	str	r2, [r3, #16]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	//Slave address is 7 bits from 7:1. The first bit must be set as its r/w bit and we are readin
	SlaveAddr <<= 1;
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 800085e:	78fa      	ldrb	r2, [r7, #3]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	611a      	str	r2, [r3, #16]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2CHandle->pI2Cx->SR1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2CHandle->pI2Cx->SR2;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	60fb      	str	r3, [r7, #12]
	(void)dummyRead; //dummy read needs to be type cast to void to prevent unused variable warning

}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<< I2C_CR1_STOP);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <I2C_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11f      	bne.n	8000906 <I2C_PeriClockControl+0x52>
	{
		//In header file for I2C macros are set for all I2C addresses allowing a comparinson to be made.
		//Switch isnt used as pointers cannot be passed as an arugment
		if(pI2Cx == I2C1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <I2C_PeriClockControl+0x60>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <I2C_PeriClockControl+0x64>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <I2C_PeriClockControl+0x64>)
 80008d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}
}
 80008da:	e014      	b.n	8000906 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <I2C_PeriClockControl+0x68>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <I2C_PeriClockControl+0x64>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <I2C_PeriClockControl+0x64>)
 80008ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f0:	e009      	b.n	8000906 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <I2C_PeriClockControl+0x6c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d105      	bne.n	8000906 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <I2C_PeriClockControl+0x64>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <I2C_PeriClockControl+0x64>)
 8000900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	40023800 	.word	0x40023800
 800091c:	40005800 	.word	0x40005800
 8000920:	40005c00 	.word	0x40005c00

08000924 <RCC_Get_PCLK1Value>:

uint32_t RCC_Get_PCLK1Value(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
	uint32_t pClk1,SystemClk;

	//Get the clock source HSI, HSE, PLL
	uint8_t clkSrc = (RCC->CFGR >> 2) & 0x3;
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <RCC_Get_PCLK1Value+0x94>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	71fb      	strb	r3, [r7, #7]
	if(clkSrc == 0)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <RCC_Get_PCLK1Value+0x20>
	{
		//HSI
		SystemClk = 16000000;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <RCC_Get_PCLK1Value+0x98>)
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e004      	b.n	800094e <RCC_Get_PCLK1Value+0x2a>
	}
	else if (clkSrc == 1)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <RCC_Get_PCLK1Value+0x2a>
	{
		//HSE
		SystemClk = 8000000;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <RCC_Get_PCLK1Value+0x9c>)
 800094c:	60fb      	str	r3, [r7, #12]
	{
		//PLL not used
	}

	//Get the AHB prescalar value
	uint8_t AHBSetPreScalar = (RCC->CFGR >> 4) & 0xF;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <RCC_Get_PCLK1Value+0x94>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	091b      	lsrs	r3, r3, #4
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	71bb      	strb	r3, [r7, #6]
	uint16_t ahbp;

	if(AHBSetPreScalar < 8)
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	2b07      	cmp	r3, #7
 8000960:	d802      	bhi.n	8000968 <RCC_Get_PCLK1Value+0x44>
	{
		ahbp = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	817b      	strh	r3, [r7, #10]
 8000966:	e005      	b.n	8000974 <RCC_Get_PCLK1Value+0x50>
	}
	else
	{
		//First value is 1000 next is 1001. Therefore -8 is nesscary to index array correctly
		ahbp = AHBPreScalarValues[AHBSetPreScalar-8];
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	3b08      	subs	r3, #8
 800096c:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <RCC_Get_PCLK1Value+0xa0>)
 800096e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000972:	817b      	strh	r3, [r7, #10]
	}

	//Get the APB1 prescalar value
	uint8_t APB1SetPreScalar = (RCC->CFGR >> 10) & 0x7;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <RCC_Get_PCLK1Value+0x94>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	0a9b      	lsrs	r3, r3, #10
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	717b      	strb	r3, [r7, #5]
	uint16_t apb1p;

	if(APB1SetPreScalar < 4)
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d802      	bhi.n	800098e <RCC_Get_PCLK1Value+0x6a>
	{
		apb1p = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	813b      	strh	r3, [r7, #8]
 800098c:	e005      	b.n	800099a <RCC_Get_PCLK1Value+0x76>
	}
	else
	{
		apb1p = APB1PreScalarValues[APB1SetPreScalar-4];
 800098e:	797b      	ldrb	r3, [r7, #5]
 8000990:	3b04      	subs	r3, #4
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <RCC_Get_PCLK1Value+0xa4>)
 8000994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000998:	813b      	strh	r3, [r7, #8]
	}

	pClk1 = SystemClk/ahbp/apb1p;
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	fbb2 f2f3 	udiv	r2, r2, r3
 80009a2:	893b      	ldrh	r3, [r7, #8]
 80009a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a8:	603b      	str	r3, [r7, #0]

	return pClk1;
 80009aa:	683b      	ldr	r3, [r7, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40023800 	.word	0x40023800
 80009bc:	00f42400 	.word	0x00f42400
 80009c0:	007a1200 	.word	0x007a1200
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000010 	.word	0x20000010

080009cc <I2C_Init>:

/*
 * Init and De-init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	//Enable the clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff6a 	bl	80008b4 <I2C_PeriClockControl>



	//Set the freq field
	pI2CHandle->pI2Cx->CR2 |= (RCC_Get_PCLK1Value())/1000000;
 80009e0:	f7ff ffa0 	bl	8000924 <RCC_Get_PCLK1Value>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a4f      	ldr	r2, [pc, #316]	; (8000b24 <I2C_Init+0x158>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c99      	lsrs	r1, r3, #18
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	605a      	str	r2, [r3, #4]

	//Configure the device address
	pI2CHandle->pI2Cx->OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress) << 1;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	609a      	str	r2, [r3, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	pI2CHandle->pI2Cx->OAR1 |= (1<<14);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a20:	609a      	str	r2, [r3, #8]

	//CCR calculation
	uint16_t ccr_value = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	81fb      	strh	r3, [r7, #14]

	//First mode is configured
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a3f      	ldr	r2, [pc, #252]	; (8000b28 <I2C_Init+0x15c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d813      	bhi.n	8000a58 <I2C_Init+0x8c>
	{
		//CCR = Tscl / 2TpClk1 | CCR = FPclk1 / 2Fscl
		ccr_value = RCC_Get_PCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a30:	f7ff ff78 	bl	8000924 <RCC_Get_PCLK1Value>
 8000a34:	4602      	mov	r2, r0
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	81fb      	strh	r3, [r7, #14]
		//Mask out bits beyond 13 bits of ccr_value
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	69d9      	ldr	r1, [r3, #28]
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	61da      	str	r2, [r3, #28]
 8000a56:	e039      	b.n	8000acc <I2C_Init+0x100>
	}
	else
	{
		//fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	69da      	ldr	r2, [r3, #28]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a66:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY );
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7a9b      	ldrb	r3, [r3, #10]
 8000a72:	039b      	lsls	r3, r3, #14
 8000a74:	4619      	mov	r1, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]

		//Configure the duty cycle based on value user provided
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7a9b      	ldrb	r3, [r3, #10]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10b      	bne.n	8000a9e <I2C_Init+0xd2>
		{
			//Tlow : Thigh is 2:1
			ccr_value = RCC_Get_PCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a86:	f7ff ff4d 	bl	8000924 <RCC_Get_PCLK1Value>
 8000a8a:	4601      	mov	r1, r0
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	e00c      	b.n	8000ab8 <I2C_Init+0xec>
		}
		else
		{
			//Tlow : Thigh is 16:9
			ccr_value = RCC_Get_PCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a9e:	f7ff ff41 	bl	8000924 <RCC_Get_PCLK1Value>
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	009a      	lsls	r2, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab6:	81fb      	strh	r3, [r7, #14]
		}
		pI2CHandle->pI2Cx->CCR |=(ccr_value & 0xFFF);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	69d9      	ldr	r1, [r3, #28]
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]
	}

	//Configure the rise time for I2C pin
	uint8_t tRise;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <I2C_Init+0x15c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d80a      	bhi.n	8000aec <I2C_Init+0x120>
	{
		//standard mode
		//trise = trisemax / tpclk1
		//trise = Fpclk / Frisemax
		tRise = (RCC_Get_PCLK1Value() / 1000000U) + 1;
 8000ad6:	f7ff ff25 	bl	8000924 <RCC_Get_PCLK1Value>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <I2C_Init+0x158>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	737b      	strb	r3, [r7, #13]
 8000aea:	e00d      	b.n	8000b08 <I2C_Init+0x13c>
	}
	else
	{
		tRise = ((RCC_Get_PCLK1Value()  *300)/ 1000000U) + 1;
 8000aec:	f7ff ff1a 	bl	8000924 <RCC_Get_PCLK1Value>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <I2C_Init+0x158>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	0c9b      	lsrs	r3, r3, #18
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	737b      	strb	r3, [r7, #13]
	}
	pI2CHandle->pI2Cx->TRISE |=(tRise & 0x3F);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6a19      	ldr	r1, [r3, #32]
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	621a      	str	r2, [r3, #32]
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <I2C_MasterSendData>:

/*
 * Data Send and Receive
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	70fb      	strb	r3, [r7, #3]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe5a 	bl	80007f8 <I2C_GenerateStartCondition>

	//Read SR1 register to check if SB has been set. Not operator is nesscary to hang the code until flag = 1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000b44:	bf00      	nop
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f8fa 	bl	8000d46 <I2C_GetFlagStatus>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f6      	beq.n	8000b46 <I2C_MasterSendData+0x1a>

	//Write the address of the slave to DR register
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	78fa      	ldrb	r2, [r7, #3]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe59 	bl	8000818 <I2C_ExecuteAddressPhaseWrite>

	//Confirm the address phase is compelted by checking if ADDR bit set in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000b66:	bf00      	nop
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f8e9 	bl	8000d46 <I2C_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f6      	beq.n	8000b68 <I2C_MasterSendData+0x3c>

	//Clear the ADDR flag by reading SR1 and SR2
	I2C_ClearADDRFlag(pI2CHandle);
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fe78 	bl	8000870 <I2C_ClearADDRFlag>

	//Send all bytes of data until len is = 0
	while(Len > 0)
 8000b80:	e014      	b.n	8000bac <I2C_MasterSendData+0x80>
	{
		//When txe is set to 1 data register is empty and ready to recieve data
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000b82:	bf00      	nop
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f8db 	bl	8000d46 <I2C_GetFlagStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f6      	beq.n	8000b84 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	611a      	str	r2, [r3, #16]
		pTxbuffer ++;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
		Len --;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1e7      	bne.n	8000b82 <I2C_MasterSendData+0x56>
	}

	//Wait for Txe and BTF to be set as they signal end of data transfer
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000bb2:	bf00      	nop
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f8c3 	bl	8000d46 <I2C_GetFlagStatus>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f6      	beq.n	8000bb4 <I2C_MasterSendData+0x88>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000bc6:	bf00      	nop
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f8b9 	bl	8000d46 <I2C_GetFlagStatus>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f6      	beq.n	8000bc8 <I2C_MasterSendData+0x9c>

	//Generate stop condition
	if(Sr == I2C_DISABLE_SR)
 8000bda:	7e3b      	ldrb	r3, [r7, #24]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe55 	bl	8000894 <I2C_GenerateStopCondition>


}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	461a      	mov	r2, r3
 8000c00:	460b      	mov	r3, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fdf3 	bl	80007f8 <I2C_GenerateStartCondition>

	//Confirm the start generation is completed by checking the SB flag in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f893 	bl	8000d46 <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f6      	beq.n	8000c14 <I2C_MasterReceiveData+0x22>

	//Send the address of the slave with the r/nw bit to R(1)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	79ba      	ldrb	r2, [r7, #6]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fe08 	bl	8000844 <I2C_ExecuteAddressPhaseRead>

	//Wait until the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000c34:	bf00      	nop
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f882 	bl	8000d46 <I2C_GetFlagStatus>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f6      	beq.n	8000c36 <I2C_MasterReceiveData+0x44>


	//Procedure to handle last byte and ending communcation
	if(Len == 1)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d121      	bne.n	8000c92 <I2C_MasterReceiveData+0xa0>
	{
		//Disable acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f88a 	bl	8000d6e <I2C_ManageAcking>


		//clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe08 	bl	8000870 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000c60:	bf00      	nop
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f86c 	bl	8000d46 <I2C_GetFlagStatus>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f6      	beq.n	8000c62 <I2C_MasterReceiveData+0x70>

		if(Sr == I2C_DISABLE_SR)
 8000c74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <I2C_MasterReceiveData+0x94>
			//Generate the stop condtion
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe07 	bl	8000894 <I2C_GenerateStopCondition>

		//read data in to the buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	701a      	strb	r2, [r3, #0]

	}

	if(Len > 1)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d930      	bls.n	8000cfa <I2C_MasterReceiveData+0x108>
	{
		//Clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fde9 	bl	8000870 <I2C_ClearADDRFlag>
		//read the data until len becomes 0
		for(uint32_t i = Len; i > 0; i--)
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e027      	b.n	8000cf4 <I2C_MasterReceiveData+0x102>
		{
			//wait until rxne becomes 1. hang the program until read buffer is full
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000ca4:	bf00      	nop
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f84a 	bl	8000d46 <I2C_GetFlagStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f6      	beq.n	8000ca6 <I2C_MasterReceiveData+0xb4>

			//There exists a delay between data being sent and read by 1 byte. Tehrefore acking must be disaled when the second byte is being read as the last byte is sent at this point
			if(i == 2) // if last 2 bytes are remaning
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d10e      	bne.n	8000cdc <I2C_MasterReceiveData+0xea>
			{
				//disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f852 	bl	8000d6e <I2C_ManageAcking>
				if(Sr == I2C_DISABLE_SR)
 8000cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <I2C_MasterReceiveData+0xea>
					//generate stop condition
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fddc 	bl	8000894 <I2C_GenerateStopCondition>
			}

			//read the data from data register into the buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1d4      	bne.n	8000ca4 <I2C_MasterReceiveData+0xb2>
		}
	}

	//re-enable accking
	I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f834 	bl	8000d6e <I2C_ManageAcking>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <I2C_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d106      	bne.n	8000d2e <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1<< I2C_CR1_PE);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
	}
}
 8000d2c:	e005      	b.n	8000d3a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<< I2C_CR1_PE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 0201 	bic.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <I2C_GetFlagStatus>:
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <I2C_GetFlagStatus+0x1a>
	{
		return SET;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <I2C_GetFlagStatus+0x1c>
	}
	else
	{
		return RESET;
 8000d60:	2300      	movs	r3, #0
	}
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <I2C_ManageAcking>:
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d106      	bne.n	8000d8e <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000d8c:	e005      	b.n	8000d9a <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <__libc_init_array>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	4d0d      	ldr	r5, [pc, #52]	; (8000de0 <__libc_init_array+0x38>)
 8000dac:	4c0d      	ldr	r4, [pc, #52]	; (8000de4 <__libc_init_array+0x3c>)
 8000dae:	1b64      	subs	r4, r4, r5
 8000db0:	10a4      	asrs	r4, r4, #2
 8000db2:	2600      	movs	r6, #0
 8000db4:	42a6      	cmp	r6, r4
 8000db6:	d109      	bne.n	8000dcc <__libc_init_array+0x24>
 8000db8:	4d0b      	ldr	r5, [pc, #44]	; (8000de8 <__libc_init_array+0x40>)
 8000dba:	4c0c      	ldr	r4, [pc, #48]	; (8000dec <__libc_init_array+0x44>)
 8000dbc:	f000 f818 	bl	8000df0 <_init>
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	10a4      	asrs	r4, r4, #2
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	42a6      	cmp	r6, r4
 8000dc8:	d105      	bne.n	8000dd6 <__libc_init_array+0x2e>
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd0:	4798      	blx	r3
 8000dd2:	3601      	adds	r6, #1
 8000dd4:	e7ee      	b.n	8000db4 <__libc_init_array+0xc>
 8000dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dda:	4798      	blx	r3
 8000ddc:	3601      	adds	r6, #1
 8000dde:	e7f2      	b.n	8000dc6 <__libc_init_array+0x1e>
 8000de0:	08000e08 	.word	0x08000e08
 8000de4:	08000e08 	.word	0x08000e08
 8000de8:	08000e08 	.word	0x08000e08
 8000dec:	08000e0c 	.word	0x08000e0c

08000df0 <_init>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr

08000dfc <_fini>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr
