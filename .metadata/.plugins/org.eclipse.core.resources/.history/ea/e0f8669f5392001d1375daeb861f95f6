/*
 * main.c
 *
 *  Created on: 12/01/2023
 *      Author: tomed
 */

#include "stm32f407xx.h"
#include <string.h>

//PB14 MISO
//PB15 MOSI
//PB13 SCLK
//PB12 NSS
//Alt function mode 5
void delay(void)
{
	for(uint32_t i = 0; i < 500000/2; i++);
}
void SPI_GPIO_Inits(void)
{
	//GPIO pins must be configured for AF mode
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);
}




void SPI2_Inits(void)
{
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;

	SPI_Init(&SPI2handle);
}

void Btn_GPIO_Inits(void)
{
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOA;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;


	GPIO_Init(&GPIOBtn);
}


int main(void)
{
	char user_data[] = "Hello world";
	//Enable clock for GPIOB and SPI2
	SPI_GPIO_Inits();
	SPI2_Inits();
	Btn_GPIO_Inits();


	SPI_SSOEConfig(SPI2, ENABLE);
	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
		delay();
		//Enable the SPE bit. It is recommended to only enable this bit after the settings have been made on the peripheal
		SPI_PeripheralControl(SPI2, ENABLE);

		//First send length information
		uint8_t dataLen = strlen(user_data);
		SPI_SendData(SPI2, (uint8_t*)dataLen, strlen(dataLen));
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));

		//Waits until spi is no longer busy and commuication has finished
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));

		SPI_SSIConfig(SPI2,DISABLE);
	}

	return 0;
}
