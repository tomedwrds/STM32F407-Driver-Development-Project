/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Jan 9, 2023
 *      Author: tomed
 */


#include "stm32f407xx_spi_driver.h"

/*********************************************************************
 * @fn      		  - SPI_PeriClockControl
 *
 * @brief             - This function enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]         - base address of the SPI peripheral
 * @param[in]         - ENABLE or DISABLE macros
 * @param[in]         -
 *
 * @return            -  none
 *
 * @Note              -none
 *********************************************************************/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
		{
			//Enables the clock for the given SPI peripheal
			if(pSPIx == SPI1)
			{
				SPI1_PCLK_EN();
			}else if (pSPIx == SPI2)
			{
				SPI2_PCLK_EN();
			}else if (pSPIx == SPI3)
			{
				SPI3_PCLK_EN();
			}
		}
}


void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	//First the SPI_CR1 is configured
	//As a large amount of bits need to be set a temp register is used. This will then be copied into the actual register.
	uint16_t tempReg = 0;

	//Configure the device mode mater or slave
	tempReg |= pSPIHandle->SPIConfig->SPI_DeviceMode << 2;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx);
